/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { mount } from 'enzyme';
import 'jest';
import * as React from 'react';
/**
 * Given an input control (specifically, one implemented with the `<input>` element and accepting `focus`, `input`, and `blur` events)
 * simulate typing in a series of inputs into the control. Afterwards, return if the `onChanged` callback was ever called,
 * as well as the last value it was called with.
 * @param Component the Component to test
 * @param baseValue The base value to give to the component
 * @param valuesToInput A list of values to input into the component, one at a time.
 */
export function simulateInput(Component, baseValue) {
    var valuesToInput = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        valuesToInput[_i - 2] = arguments[_i];
    }
    var onChangedSpy = jest.fn();
    var element = React.createElement(Component, { value: baseValue, onChanged: onChangedSpy });
    var mounted = mount(element);
    var inputElement = mounted.find('input');
    valuesToInput.forEach(function (value) {
        inputElement.simulate('focus');
        inputElement.simulate('input', { target: { value: value } });
        inputElement.simulate('blur');
    });
    var callCount = onChangedSpy.mock.calls.length;
    if (onChangedSpy.mock.calls.length > 0) {
        return {
            hasBeenChanged: true,
            lastValue: onChangedSpy.mock.calls[callCount - 1][0]
        };
    }
    else {
        return {
            hasBeenChanged: false
        };
    }
}
//# sourceMappingURL=tests.js.map