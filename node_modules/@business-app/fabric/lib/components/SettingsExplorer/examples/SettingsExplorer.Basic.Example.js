import { __assign, __extends } from "tslib";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { DefaultButton } from '@fluentui/react/lib/Button';
import { Checkbox } from '@fluentui/react/lib/Checkbox';
import { Dropdown } from '@fluentui/react/lib/Dropdown';
import { Modal } from '@fluentui/react/lib/Modal';
import { Overlay } from '@fluentui/react/lib/Overlay';
import { Spinner, SpinnerSize } from '@fluentui/react/lib/Spinner';
import { mergeStyles } from '@fluentui/react/lib/Styling';
import * as React from 'react';
import { SettingsExplorer } from '../SettingsExplorer';
import { SettingsItem } from '../SettingsItem';
import { SettingsPage } from '../SettingsPage';
import { dateFormatOptions, languageOptions, timeFormatOptions } from './ExampleInput';
var dropdownOptions = [
    { key: 'pug', text: 'pug' },
    { key: 'poodle', text: 'poodle' },
    { key: 'cocker spaniel', text: 'cocker spaniel' },
    { key: 'samoyed', text: 'samoyed' }
];
var asyncSettingPageId = 'asyncSettingPage';
var SettingsExplorerBasicExample = /** @class */ (function (_super) {
    __extends(SettingsExplorerBasicExample, _super);
    function SettingsExplorerBasicExample(props) {
        var _this = _super.call(this, props) || this;
        _this.buttonRef = React.createRef();
        _this.loadAsyncSetting = function () {
            setTimeout(function () {
                _this.setState({
                    asyncSettingsData: 'The quick brown fox jumps over the lazy asynchronous page.'
                });
                _this.buttonRef.current.focus();
            }, 2000);
        };
        _this._openSettingsExplorer = function (status) {
            _this.setState({ modalOpen: status });
        };
        _this.state = {
            modalOpen: false,
            asyncSettingsData: ''
        };
        return _this;
    }
    SettingsExplorerBasicExample.prototype.render = function () {
        var _this = this;
        return (React.createElement("div", null,
            React.createElement(DefaultButton, { onClick: function () { return _this._openSettingsExplorer(true); }, text: "One Tiered", className: mergeStyles({
                    width: 200
                }) }),
            React.createElement(Modal, { isOpen: this.state.modalOpen, onDismiss: function () { return _this._openSettingsExplorer(false); }, closeButtonAriaLabel: "Cancel" },
                React.createElement(SettingsExplorer, __assign({ name: 'General Settings', saveButtonProps: {
                        onClick: function () {
                            alert('save clicked');
                        },
                        text: 'Save'
                    }, cancelButtonProps: {
                        onClick: function () {
                            _this._openSettingsExplorer(false);
                        },
                        text: 'Discard'
                    }, exitButtonProps: {
                        onClick: function () { return _this._openSettingsExplorer(false); },
                        ariaLabel: 'Clear'
                    }, onPageSelected: function (id) {
                        if (id === asyncSettingPageId) {
                            _this.loadAsyncSetting();
                        }
                    } }, this.props),
                    React.createElement(SettingsPage, { name: 'Language and time' },
                        React.createElement(SettingsItem, null,
                            React.createElement(Dropdown, { label: 'Language', options: languageOptions, defaultSelectedKey: 'en-US' })),
                        React.createElement(SettingsItem, null,
                            React.createElement(Dropdown, { label: 'Date format', options: dateFormatOptions, defaultSelectedKey: 'M/D/YYYY' })),
                        React.createElement(SettingsItem, null,
                            React.createElement(Dropdown, { label: 'Time format', options: timeFormatOptions, defaultSelectedKey: '1:01 AM - 11:59 PM' })),
                        React.createElement(SettingsItem, null,
                            React.createElement(Dropdown, { label: 'Current timezone', options: dropdownOptions, defaultSelectedKey: 'pug' }))),
                    React.createElement(SettingsPage, { name: 'Disabled Page', disabled: true },
                        React.createElement(SettingsItem, { name: 'Disabled setting' },
                            React.createElement("p", null, "You should never be able to see this."))),
                    React.createElement(SettingsPage, { name: 'Async Setting', id: asyncSettingPageId }, this.state.asyncSettingsData ? (React.createElement(React.Fragment, null,
                        React.createElement("p", null, this.state.asyncSettingsData),
                        React.createElement(DefaultButton, { ariaLabel: 'Refresh', componentRef: this.buttonRef, onClick: function () {
                                _this.setState({
                                    asyncSettingsData: ''
                                }, function () {
                                    _this.loadAsyncSetting();
                                });
                            } }, "Refresh"))) : (React.createElement(Overlay, { styles: {
                            root: {
                                backgroundColor: '#ffffff',
                                opacity: 0.7,
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center'
                            }
                        } },
                        React.createElement(Spinner, { size: SpinnerSize.large, label: 'Loading' })))),
                    React.createElement(SettingsPage, { name: 'Notifications' },
                        React.createElement(SettingsItem, { name: 'Newsletter' },
                            React.createElement(Dropdown, { label: 'Choose your country/region:', options: dropdownOptions, defaultValue: 'pug' }),
                            React.createElement("br", null),
                            React.createElement(Checkbox, { label: 'Send me the latest PowerApps updates, tips, and offers' })),
                        React.createElement(SettingsItem, { name: 'App usage emails' },
                            React.createElement(Checkbox, { label: 'Check here to receive app usage emails' })))))));
    };
    return SettingsExplorerBasicExample;
}(React.Component));
export { SettingsExplorerBasicExample };
//# sourceMappingURL=SettingsExplorer.Basic.Example.js.map