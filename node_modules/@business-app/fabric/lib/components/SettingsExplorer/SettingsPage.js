/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import * as React from 'react';
import { classNamesFunction, styled } from '@fluentui/react/lib/Utilities';
import { DefaultButton, IconButton, PrimaryButton } from '@fluentui/react/lib/Button';
import { mergeStyles } from '@fluentui/react/lib/Styling';
import { getStyles } from './SettingsPage.styles';
var getClassNames = classNamesFunction();
var SettingsPageBase = function (props) {
    var children = props.children, _a = props.onRenderFooter, onRenderFooter = _a === void 0 ? renderFooter : _a, _b = props.onRenderCloseButton, onRenderCloseButton = _b === void 0 ? renderCloseButton : _b, name = props.name, pageHeader = props.pageHeader, exitButtonProps = props.exitButtonProps, saveButtonProps = props.saveButtonProps, cancelButtonProps = props.cancelButtonProps, styles = props.styles, theme = props.theme;
    var classNames = getClassNames(styles, { theme: theme });
    return (React.createElement("div", { className: classNames.body },
        React.createElement("div", { className: classNames.header },
            React.createElement("h3", { className: classNames.headerName }, pageHeader !== null && pageHeader !== void 0 ? pageHeader : name),
            onRenderCloseButton(exitButtonProps)),
        React.createElement("div", { className: classNames.contentContainer }, children),
        onRenderFooter(saveButtonProps, cancelButtonProps, classNames.footerButtons)));
};
function renderFooter(saveButtonProps, discardButtonProps, footerStyle) {
    return (React.createElement("div", { className: footerStyle },
        !!saveButtonProps && (React.createElement(PrimaryButton, __assign({ className: mergeStyles({
                marginRight: 8
            }) }, saveButtonProps))),
        !!discardButtonProps && React.createElement(DefaultButton, __assign({}, discardButtonProps))));
}
function renderCloseButton(exitButtonProps) {
    return (React.createElement(IconButton, __assign({ className: mergeStyles({
            padding: 8
        }), iconProps: { iconName: 'Clear' } }, exitButtonProps)));
}
export var SettingsPage = styled(SettingsPageBase, getStyles, undefined, { scope: 'SettingsPage' });
//# sourceMappingURL=SettingsPage.js.map