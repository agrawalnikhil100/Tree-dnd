/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import * as Enzyme from 'enzyme';
import 'jest';
import { DefaultButton, IconButton, PrimaryButton } from '@fluentui/react/lib/Button';
import { Label } from '@fluentui/react/lib/Label';
import * as React from 'react';
import { ExplorerPanel } from './ExplorerPanel';
import { SettingsExplorerBase } from './SettingsExplorer.base';
import { SettingsItem } from './SettingsItem';
import { SettingsPage } from './SettingsPage';
describe('Settings component with children', function () {
    var SettingsExplorerProps;
    var wrapper;
    var mountedWrapper;
    var onSaveButtonClick = jest.fn();
    var onCancelButtonClick = jest.fn();
    var onExitButtonClick = jest.fn();
    var onPageSelected = jest.fn();
    beforeEach(function () {
        SettingsExplorerProps = {
            name: 'General Settings',
            saveButtonProps: {
                onClick: onSaveButtonClick,
                text: 'Save'
            },
            cancelButtonProps: {
                onClick: onCancelButtonClick,
                text: 'Cancel'
            },
            exitButtonProps: {
                onClick: onExitButtonClick,
                ariaLabel: 'Exit'
            }
        };
        wrapper = Enzyme.shallow(React.createElement(SettingsExplorerBase, __assign({}, SettingsExplorerProps),
            React.createElement(SettingsPage, { name: 'First' }),
            React.createElement(SettingsPage, { name: 'Second' })));
    });
    it('should initialize the state to default select the first element in the list if no initial id is provided', function () {
        expect(wrapper.state()).toHaveProperty('selectedKey');
        expect(wrapper.state().selectedKey).toBe('0');
    });
    it('should initialize the state to default select the first non-disabled element in the list if no id is provided', function () {
        wrapper = Enzyme.shallow(React.createElement(SettingsExplorerBase, __assign({}, SettingsExplorerProps),
            React.createElement(SettingsPage, { name: 'First', id: "id1", disabled: true }),
            React.createElement(SettingsPage, { name: 'Second', id: "id2" })));
        expect(wrapper.state()).toHaveProperty('selectedKey');
        expect(wrapper.state().selectedKey).toBe('id2');
    });
    it('should initialize the state to default select the initialSelected page if provided', function () {
        SettingsExplorerProps.initialSelectedPageId = 'id2';
        mountedWrapper = Enzyme.mount(React.createElement(SettingsExplorerBase, __assign({}, SettingsExplorerProps),
            React.createElement(SettingsPage, { name: 'First', id: "id1" }),
            React.createElement(SettingsPage, { name: 'Second', id: "id2" }),
            React.createElement(SettingsPage, { name: 'Third', id: "id3" })));
        expect(mountedWrapper.state()).toHaveProperty('selectedKey');
        expect(mountedWrapper.state().selectedKey).toBe('id2');
    });
    it('should update the current selected key on button click of different key', function () {
        var lastButton = mountedWrapper.find(ExplorerPanel).find({ text: 'Second' }).first();
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        lastButton.props().onClick({});
        expect(mountedWrapper.state().selectedKey).toBe('id2');
    });
    it('should allow a custom key prop to override the index-based key', function () {
        var firstKey = 'firstKey';
        mountedWrapper = Enzyme.mount(React.createElement(SettingsExplorerBase, __assign({}, SettingsExplorerProps),
            React.createElement(SettingsPage, { name: 'First', id: firstKey }),
            React.createElement(SettingsPage, { name: 'Second' })));
        expect(mountedWrapper.state().selectedKey).toBe(firstKey);
    });
    it('should render a single side panel', function () {
        expect(mountedWrapper.find(ExplorerPanel)).toHaveLength(1);
    });
    it('should render the same number of side panel buttons as there are child props', function () {
        var panelButtons = mountedWrapper.find(ExplorerPanel).find(DefaultButton);
        expect(panelButtons.exists()).toBeTruthy();
        expect(panelButtons).toHaveLength(React.Children.count(mountedWrapper.props().children));
    });
    it('should render panel buttons with the same names as the child props', function () {
        var sidePanel = mountedWrapper.find(ExplorerPanel);
        expect(sidePanel.find({ text: 'First' }).exists()).toBeTruthy();
        expect(sidePanel.find({ text: 'Second' }).exists()).toBeTruthy();
    });
    it('should render a footer with a save and cancel button', function () {
        mountedWrapper = Enzyme.mount(React.createElement(SettingsExplorerBase, __assign({}, SettingsExplorerProps),
            React.createElement(SettingsPage, { name: 'First', id: "id1", disabled: true }),
            React.createElement(SettingsPage, { name: 'Second', id: "id2" })));
        var pageContents = mountedWrapper.find(SettingsPage);
        expect(pageContents.exists()).toBeTruthy();
        expect(pageContents.find(PrimaryButton).exists()).toBeTruthy();
        expect(pageContents.find(DefaultButton).exists()).toBeTruthy();
        expect(pageContents.find({ text: 'Save' }).exists()).toBeTruthy();
        expect(pageContents.find({ text: 'Cancel' }).exists()).toBeTruthy();
    });
    it('should call onPageSelected for when a page is selected', function () {
        var firstKey = 'id1';
        var secondKey = 'id2';
        mountedWrapper = Enzyme.mount(React.createElement(SettingsExplorerBase, __assign({}, SettingsExplorerProps, { onPageSelected: onPageSelected }),
            React.createElement(SettingsPage, { name: 'First', id: firstKey }),
            React.createElement(SettingsPage, { name: 'Second', id: secondKey })));
        // initial page selection callback
        expect(onPageSelected).toHaveBeenCalledWith(firstKey);
        var sidePanel = mountedWrapper.find(ExplorerPanel);
        sidePanel
            .find(DefaultButton)
            .last()
            .props()
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .onClick({});
        // page selection callback
        expect(onPageSelected).toHaveBeenCalledWith(secondKey);
    });
    it('should call save and cancel when corresponding buttons are clicked', function () {
        var buttons = mountedWrapper.find(SettingsPage).find(DefaultButton);
        expect(buttons).toHaveLength(2);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        buttons.forEach(function (button) { return button.props().onClick({}); });
        expect(onSaveButtonClick).toHaveBeenCalled();
        expect(onCancelButtonClick).toHaveBeenCalled();
    });
    it('should render a close button to exit the explorer', function () {
        var pageHeader = mountedWrapper.find(SettingsPage);
        expect(pageHeader.exists()).toBeTruthy();
        var exitButton = pageHeader.find(IconButton);
        expect(exitButton.exists()).toBeTruthy();
        expect(exitButton.find({ ariaLabel: 'Exit' }).exists()).toBeTruthy();
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        exitButton.props().onClick({});
        expect(onExitButtonClick).toHaveBeenCalled();
    });
    it('should only have a single settings page being rendered at a time', function () {
        var pageContents = mountedWrapper.find(SettingsPage);
        expect(pageContents.exists()).toBeTruthy();
        var sidePanel = mountedWrapper.find(ExplorerPanel);
        sidePanel
            .find(DefaultButton)
            .last()
            .props()
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .onClick({});
        expect(pageContents.find(SettingsPage)).toHaveLength(1);
    });
    it('should render the children of each settings page', function () {
        mountedWrapper = Enzyme.mount(React.createElement(SettingsExplorerBase, __assign({}, SettingsExplorerProps),
            React.createElement(SettingsPage, { name: 'First' },
                React.createElement(SettingsItem, { name: 'Settings Page with label' },
                    React.createElement(Label, null, "some text"))),
            React.createElement(SettingsPage, { name: 'Second' })));
        var label = mountedWrapper.find(SettingsPage).find(SettingsPage).find(SettingsItem).find(Label);
        expect(label.exists()).toBeTruthy();
    });
});
//# sourceMappingURL=SettingsExplorer.test.js.map