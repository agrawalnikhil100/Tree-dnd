/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __extends } from "tslib";
import { mergeStyleSets } from '@fluentui/react/lib/Styling';
import * as React from 'react';
import { TreeView } from '../TreeView.base';
var TreeViewCustomItemExample = /** @class */ (function (_super) {
    __extends(TreeViewCustomItemExample, _super);
    function TreeViewCustomItemExample(props) {
        var _this = _super.call(this, props) || this;
        _this._onRenderItemLabel = function (item) {
            var name = item.label;
            return (React.createElement("div", { className: customStyles.itemContainer, "data-is-focusable": false },
                React.createElement("div", { title: name, className: customStyles.nameContainer, "aria-readonly": true },
                    name,
                    ' - ',
                    item.pizza)));
        };
        _this._onItemSelected = function (item, type, isSelected, isExpanded, index) {
            _this.setState({ lastSelectedPizza: item.pizza });
        };
        _this._getCommands = function () {
            return [
                {
                    key: 'New',
                    text: 'New',
                    iconProps: { iconName: 'Add' }
                },
                {
                    key: 'Mail',
                    text: 'Mail',
                    iconProps: { iconName: 'Mail' }
                },
                {
                    key: 'Calendar',
                    text: 'Calendar',
                    iconProps: { iconName: 'Calendar' }
                }
            ];
        };
        _this.state = {
            lastSelectedPizza: 'none'
        };
        return _this;
    }
    TreeViewCustomItemExample.prototype.render = function () {
        var items = [
            {
                label: 'Group1',
                key: '0',
                pizza: 'cheese',
                children: [
                    {
                        label: 'Group1-1',
                        key: '1',
                        pizza: 'pepperoni',
                        children: [
                            {
                                label: 'Item 1-1-1',
                                key: '2',
                                pizza: 'four meat'
                            },
                            {
                                label: 'Item 1-1-2',
                                key: '3',
                                pizza: 'hawaiian'
                            },
                            {
                                label: 'Item 1-1-3',
                                key: '4',
                                pizza: 'vegetable'
                            }
                        ]
                    },
                    {
                        label: 'Item 1-1',
                        key: '5',
                        pizza: 'supreme'
                    },
                    {
                        label: 'Item 1-2',
                        key: '6',
                        pizza: 'no cheese'
                    }
                ]
            },
            {
                label: 'Group2',
                key: '7',
                pizza: 'four cheese',
                children: [
                    {
                        label: 'Item 2-1',
                        key: '8',
                        pizza: 'grilled chicken'
                    },
                    {
                        label: 'Item 2-2',
                        key: '9',
                        pizza: 'empty box'
                    }
                ]
            }
        ];
        return (React.createElement("div", null,
            React.createElement("p", null, "This is an example to show how you can use the TreeView with custom tree items (where you've added additional properties to the item interface)."),
            React.createElement("p", null,
                "The last pizza you selected was: ",
                React.createElement("b", null, this.state.lastSelectedPizza)),
            React.createElement("div", { style: { width: '320px', height: '320px', overflow: 'auto', userSelect: 'none' } },
                React.createElement(TreeView, { items: items, strings: {
                        listAriaLabel: 'list',
                        moreCommandsAriaLabel: 'more commands'
                    }, onRenderItemLabel: this._onRenderItemLabel, onItemSelected: this._onItemSelected, getItemCommands: this._getCommands }))));
    };
    return TreeViewCustomItemExample;
}(React.Component));
export { TreeViewCustomItemExample };
var customStyles = mergeStyleSets({
    itemContainer: {
        flex: '1 1 auto',
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
        maxWidth: '100%',
        outline: 'none',
        textOverflow: 'ellipsis',
        overflow: 'hidden'
    },
    nameContainer: {
        flex: '1 1 auto',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        maxWidth: '100%',
        color: '#333333',
        fontSize: '12px',
        marginLeft: '5px',
        outline: 'none'
    }
});
//# sourceMappingURL=TreeView.CustomItem.Example.js.map