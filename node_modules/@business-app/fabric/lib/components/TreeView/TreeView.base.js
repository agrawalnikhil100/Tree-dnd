/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __extends } from "tslib";
import { BaseComponent } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { Tree } from '../Tree';
/**
 * A wrapper on top of the generic Tree which allows a nested items structure, which is often more convenient.
 */
var TreeView = /** @class */ (function (_super) {
    __extends(TreeView, _super);
    function TreeView(props) {
        var _this = _super.call(this, props) || this;
        _this.state = TreeView._getStateFromProps(props, {
            itemsInput: _this.props.items,
            itemsOutput: TreeView._mapControlsToTreeViewItems(_this.props.items)
        });
        return _this;
    }
    TreeView._getStateFromProps = function (nextProps, prevState) {
        // Only remap the items when the array reference has changed.
        if (nextProps.items !== prevState.itemsInput) {
            return {
                itemsInput: nextProps.items,
                itemsOutput: this._mapControlsToTreeViewItems(nextProps.items)
            };
        }
        return prevState;
    };
    TreeView.getDerivedStateFromProps = function (nextProps, prevState) {
        if (!prevState) {
            return null;
        }
        return TreeView._getStateFromProps(nextProps, prevState);
    };
    TreeView.prototype.render = function () {
        return React.createElement(Tree, __assign({}, this.props, { items: this.state.itemsOutput }));
    };
    TreeView._mapControlsToTreeViewItems = function (items, treeItems, level) {
        if (treeItems === void 0) { treeItems = []; }
        if (level === void 0) { level = 0; }
        for (var index = 0; index < items.length; index++) {
            var item = items[index];
            var hasChildren = !!item.children && item.children.length > 0;
            // Add the item
            treeItems.push(__assign(__assign({}, item), { level: level, setSize: items.length, indexInParent: index, isFolder: hasChildren }));
            // If the item is a category and has children, add the children
            if (item.children) {
                TreeView._mapControlsToTreeViewItems(item.children, treeItems, level + 1);
            }
        }
        return treeItems;
    };
    return TreeView;
}(BaseComponent));
export { TreeView };
//# sourceMappingURL=TreeView.base.js.map