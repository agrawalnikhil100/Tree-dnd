/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import * as Enzyme from 'enzyme';
import 'jest';
import { Icon } from '@fluentui/react/lib/Icon';
import { Label } from '@fluentui/react/lib/Label';
import { Link } from '@fluentui/react/lib/Link';
import { getTheme } from '@fluentui/react/lib/Styling';
import { Toggle } from '@fluentui/react/lib/Toggle';
import { KeyCodes } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { NotificationCardBase } from './NotificationCard.base';
import { getStyles } from './NotificationCard.styles';
describe('NotificationCard', function () {
    var styleProps = {
        theme: getTheme(),
        styles: getStyles
    };
    it('Simple Test', function () {
        var dismiss = function () {
            alert('dismiss');
        };
        var wrapper = Enzyme.shallow(React.createElement(NotificationCardBase, __assign({}, styleProps, { id: "n1", title: "Title", body: "Body", headerPrimaryText: "1 hr ago", headerSecondaryText: "7/14/2018", actionText: "Action", onActionClick: dismiss, onDismiss: dismiss })));
        // Three icons, the close icon, the generic notification icon and the separator icon
        expect(wrapper.find(Icon).length).toBe(3);
        // Two labels, title and body
        expect(wrapper.find(Label).length).toBe(2);
        // one Link
        expect(wrapper.find(Link).length).toBe(1);
    });
    it('Calls onDismiss on clicking the close icon', function () {
        var dismissCalled = false;
        var onDismiss = function (id) {
            expect(id).toEqual('n1');
            dismissCalled = true;
        };
        var wrapper = Enzyme.shallow(React.createElement(NotificationCardBase, __assign({}, styleProps, { id: "n1", title: "Title", body: "Body", actionText: "Action", headerPrimaryText: "1 hr ago", headerSecondaryText: "7/14/2018", onActionClick: null, onDismiss: onDismiss })));
        var button = wrapper.find('button').at(0);
        var stopPropagationCalled = false;
        var stopPropagation = function () {
            stopPropagationCalled = true;
        };
        button.simulate('click', { stopPropagation: stopPropagation });
        expect(dismissCalled).toEqual(true);
        expect(stopPropagationCalled).toEqual(true);
    });
    it('OnDismiss icon has ariaLabel', function () {
        var wrapper = Enzyme.shallow(React.createElement(NotificationCardBase, __assign({}, styleProps, { id: "n1", title: "Title", body: "Body", actionText: "Action", headerPrimaryText: "1 hr ago", headerSecondaryText: "7/14/2018", onActionClick: null, onDismiss: jest.fn(), dismissAriaLabel: "DismissIconAriaLabel" })));
        var button = wrapper.find('button').at(0);
        expect(button.prop('aria-label')).toEqual('DismissIconAriaLabel');
    });
    it('Calls onAction when clicking the action link', function () {
        var actionCallbackCalled = false;
        var onActionClick = function (id) {
            expect(id).toEqual('a1');
            actionCallbackCalled = true;
        };
        var wrapper = Enzyme.shallow(React.createElement(NotificationCardBase, __assign({}, styleProps, { id: "a1", title: "Title", body: "Body", actionText: "Action", headerPrimaryText: "1 hr ago", headerSecondaryText: "7/14/2018", onActionClick: onActionClick })));
        var link = wrapper.find(Link);
        var stopPropagationCalled = false;
        var stopPropagation = function () {
            stopPropagationCalled = true;
        };
        link.simulate('click', { stopPropagation: stopPropagation });
        expect(actionCallbackCalled).toEqual(true);
        expect(stopPropagationCalled).toEqual(true);
    });
    it('Calls onClick when clicking the notification body', function () {
        var onClickCallCount = 0;
        var onClick = function (id) {
            expect(id).toEqual('b1');
            onClickCallCount++;
        };
        var wrapper = Enzyme.mount(React.createElement(NotificationCardBase, __assign({}, styleProps, { id: "b1", title: "Title", body: "Body", actionText: "Action", headerPrimaryText: "1 hr ago", headerSecondaryText: "7/14/2018", onClick: onClick })));
        var body = wrapper.find('.ba-notificationCard-body');
        expect(body.prop('role')).toEqual('link');
        body.simulate('click');
        expect(onClickCallCount).toEqual(1);
        var element = body.getElement();
        var target = element.ref.current;
        body.simulate('keydown', { keyCode: KeyCodes.space, target: target });
        expect(onClickCallCount).toEqual(2);
        body.simulate('keydown', { keyCode: KeyCodes.enter, target: target });
        expect(onClickCallCount).toEqual(3);
    });
    it('Body has a role attribute even if not clickable', function () {
        var wrapper = Enzyme.shallow(React.createElement(NotificationCardBase, __assign({}, styleProps, { id: "c1", title: "Title", body: "Body", actionText: "Action", headerPrimaryText: "1 hr ago", headerSecondaryText: "7/14/2018" })));
        var body = wrapper.childAt(0).childAt(0);
        expect(body.prop('role')).not.toBeUndefined();
    });
    it('Renders custom component for icon if required', function () {
        var onRenderIcon = function () { return React.createElement(Toggle, { title: "my custom component title" }); };
        var wrapper = Enzyme.shallow(React.createElement(NotificationCardBase, __assign({}, styleProps, { id: "a1", title: "Title", body: "Body", actionText: "Action", headerPrimaryText: "1 hr ago", headerSecondaryText: "7/14/2018", onRenderIcon: onRenderIcon })));
        var toggle = wrapper.find(Toggle);
        expect(toggle.length).toEqual(1);
        expect(toggle.prop('title')).toEqual('my custom component title');
    });
    it('Title and Body properties are optional', function () {
        var dismiss = function () {
            alert('dismiss');
        };
        var wrapper = Enzyme.shallow(React.createElement(NotificationCardBase, __assign({}, styleProps, { id: "n1", headerPrimaryText: "1 hr ago", headerSecondaryText: "7/16/2020", actionText: "Action", onActionClick: dismiss, onDismiss: dismiss })));
        // Two labels, title and body are empty
        expect(wrapper.find(Label).length).toBe(0);
    });
    it('Renders custom notification card', function () {
        var dismiss = function () {
            alert('dismiss');
        };
        var wrapper = Enzyme.shallow(React.createElement(NotificationCardBase, __assign({}, styleProps, { id: "n1", title: "Title", body: "Body", actionText: "Action", headerPrimaryText: "1 hr ago", headerSecondaryText: "7/14/2018", onActionClick: dismiss, onDismiss: dismiss, onRenderCardBody: function () { return React.createElement("div", { className: "customNotificationCardBody" }, "Hello Microsoft!!!"); } })));
        var customCardContent = wrapper.find('.customNotificationCardBody');
        expect(customCardContent.text()).toBe('Hello Microsoft!!!');
    });
    it('HeaderSecondaryText and headerPrimaryText properties are optional', function () {
        var wrapper = Enzyme.shallow(React.createElement(NotificationCardBase, __assign({}, styleProps, { id: "n1", title: "Title", actionText: "Action", headerPrimaryText: "1 hr ago" })));
        // one label title
        expect(wrapper.find(Label).length).toBe(1);
        var titleLabelWrapper = wrapper.find('.ba-notificationCard-title');
        expect(titleLabelWrapper.text()).toBe('Title');
        var headerWrapper = wrapper.find('.ba-notificationCard-headerTextContainer');
        expect(headerWrapper.childAt(0).text()).toBe('1 hr ago');
    });
    it('The separator icon renders only when both headerText properties are present', function () {
        var wrapper = Enzyme.shallow(React.createElement(NotificationCardBase, __assign({}, styleProps, { id: "n1", title: "Title", actionText: "Action", headerPrimaryText: "1 hr ago", headerSecondaryText: "7/15/2020" })));
        var headerWrapper = wrapper.find('.ba-notificationCard-headerTextContainer');
        expect(headerWrapper.childAt(0).text()).toBe('1 hr ago');
        expect(headerWrapper.childAt(2).text()).toBe('7/15/2020');
        // one separator icon and one info icon
        expect(wrapper.find(Icon).length).toBe(2);
        expect(wrapper.find(Icon).at(0).html()).toContain('data-icon-name="Separator"');
        expect(wrapper.find(Icon).at(1).html()).toContain('data-icon-name="Info"');
    });
    it('Tab index exists', function () {
        var dismiss = function () {
            alert('dismiss');
        };
        var wrapper = Enzyme.shallow(React.createElement(NotificationCardBase, __assign({}, styleProps, { id: "n1", title: "Title", body: "Body", headerPrimaryText: "1 hr ago", headerSecondaryText: "7/14/2018", actionText: "Action", onActionClick: dismiss, onDismiss: dismiss })));
        expect(wrapper.html()).toContain('tabindex');
    });
    it('Tab index can be disabled', function () {
        var dismiss = function () {
            alert('dismiss');
        };
        var wrapper = Enzyme.shallow(React.createElement(NotificationCardBase, __assign({}, styleProps, { id: "n1", title: "Title", body: "Body", headerPrimaryText: "1 hr ago", headerSecondaryText: "7/14/2018", actionText: "Action", onActionClick: dismiss, onDismiss: dismiss, disableTabIndex: true })));
        expect(wrapper.html()).not.toContain('tabindex');
    });
});
//# sourceMappingURL=NotificationCard.test.js.map