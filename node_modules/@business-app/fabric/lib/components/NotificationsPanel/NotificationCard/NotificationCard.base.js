/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __extends } from "tslib";
import { Icon } from '@fluentui/react/lib/Icon';
import { Label } from '@fluentui/react/lib/Label';
import { Link } from '@fluentui/react/lib/Link';
import { KeyCodes } from '@fluentui/react/lib/Utilities';
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
var getClassNames = classNamesFunction();
var NotificationCardBase = /** @class */ (function (_super) {
    __extends(NotificationCardBase, _super);
    function NotificationCardBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._bodyRef = React.createRef();
        _this._handleKeyDown = function (evt) {
            var _a = _this.props, id = _a.id, onClick = _a.onClick;
            var enterOrSpace = evt.keyCode === KeyCodes.enter || evt.keyCode === KeyCodes.space;
            var targetIsBody = evt.target === _this._bodyRef.current;
            if (onClick && enterOrSpace && targetIsBody) {
                onClick(id);
            }
        };
        _this._renderHeader = function () {
            var _a = _this.props, headerSecondaryText = _a.headerSecondaryText, headerPrimaryText = _a.headerPrimaryText, dismissTooltip = _a.dismissTooltip, onDismiss = _a.onDismiss, headerTooltip = _a.headerTooltip, dismissAriaLabel = _a.dismissAriaLabel;
            var hasHeaderText = headerPrimaryText || headerSecondaryText;
            return (React.createElement("div", { className: _this._classNames.header },
                hasHeaderText && (React.createElement("span", { className: _this._classNames.headerTextContainer, title: headerTooltip },
                    headerPrimaryText && React.createElement("span", null, headerPrimaryText),
                    headerPrimaryText && headerSecondaryText && (React.createElement("span", { className: _this._classNames.headerSeparator },
                        React.createElement(Icon, { iconName: "Separator" }))),
                    headerSecondaryText && React.createElement("span", null, headerSecondaryText))),
                onDismiss && (React.createElement("button", { className: _this._classNames.closeIcon, onClick: _this._onDismiss, title: dismissTooltip, "aria-label": dismissAriaLabel },
                    React.createElement(Icon, { iconName: "ChromeClose" })))));
        };
        _this._renderIcon = function () {
            var onRenderIcon = _this.props.onRenderIcon;
            return (React.createElement("span", { className: _this._classNames.iconContainer },
                onRenderIcon && onRenderIcon(),
                !onRenderIcon && React.createElement(Icon, { iconName: "Info" })));
        };
        _this._onDismiss = function (evt) {
            var _a = _this.props, id = _a.id, onDismiss = _a.onDismiss;
            evt.stopPropagation();
            onDismiss(id);
        };
        _this._onClick = function () {
            var _a = _this.props, id = _a.id, onClick = _a.onClick;
            if (onClick) {
                onClick(id);
            }
        };
        _this._handleActionClick = function (evt) {
            var _a = _this.props, id = _a.id, onActionClick = _a.onActionClick;
            evt.stopPropagation();
            onActionClick(id);
        };
        return _this;
    }
    NotificationCardBase.prototype.render = function () {
        var _a = this.props, isNew = _a.isNew, onClick = _a.onClick, theme = _a.theme, styles = _a.styles, disableTabIndex = _a.disableTabIndex;
        this._classNames = getClassNames(styles, { theme: theme, hasOnClick: !!onClick });
        return (React.createElement("div", { className: this._classNames.root },
            React.createElement("div", { className: this._classNames.container },
                isNew && React.createElement("div", { className: this._classNames.readMarker }),
                React.createElement("div", { className: this._classNames.body, ref: this._bodyRef, tabIndex: disableTabIndex ? undefined : 0, onClick: this._onClick, onKeyDown: this._handleKeyDown, role: 'link' }, this._getCardContent()))));
    };
    NotificationCardBase.prototype._getCardContent = function () {
        var _a = this.props, title = _a.title, body = _a.body, actionText = _a.actionText, onActionClick = _a.onActionClick, onRenderCardBody = _a.onRenderCardBody;
        return onRenderCardBody ? (onRenderCardBody()) : (React.createElement("div", null,
            this._renderHeader(),
            React.createElement("div", { className: this._classNames.messageContainer },
                this._renderIcon(),
                React.createElement("div", { className: this._classNames.message },
                    title && React.createElement(Label, { className: this._classNames.messageTitle }, title),
                    body && React.createElement(Label, { className: this._classNames.messageDescription }, body),
                    actionText && onActionClick && (React.createElement(Link, { className: this._classNames.messageActionText, onClick: this._handleActionClick }, actionText))))));
    };
    return NotificationCardBase;
}(React.Component));
export { NotificationCardBase };
//# sourceMappingURL=NotificationCard.base.js.map