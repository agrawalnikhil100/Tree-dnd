/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __extends } from "tslib";
import { ActionButton, DefaultButton, PrimaryButton } from '@fluentui/react/lib/Button';
import { TextField } from '@fluentui/react/lib/TextField';
import { Icon } from '@fluentui/react/lib/Icon';
import { Toggle } from '@fluentui/react/lib/Toggle';
import { Panel } from '@fluentui/react/lib/Panel';
import * as React from 'react';
import { NotificationsPanel } from '..';
import { NotificationsPanelState } from '../NotificationsPanel.types';
var narrowTextFieldStyles = { fieldGroup: { width: 200 } };
var NotificationsPanelBasicExample = /** @class */ (function (_super) {
    __extends(NotificationsPanelBasicExample, _super);
    function NotificationsPanelBasicExample(props) {
        var _this = _super.call(this, props) || this;
        _this._reloadNotifications = function () {
            _this.setState({ notifications: _this._exampleNotifications.slice() });
        };
        _this._onDismissNotification = function (id) {
            var notifications = _this.state.notifications.filter(function (n) { return n.id !== id; });
            _this.setState({ notifications: notifications });
        };
        _this._handleShowPanelClick = function () {
            _this.state.notifications.length === 0
                ? _this.setState({ open: true, panelState: NotificationsPanelState.Empty })
                : _this.setState({ open: true, panelState: NotificationsPanelState.Loaded });
        };
        _this._handleShowPanelWithLoadingStateClick = function () {
            _this.setState({ open: true, panelState: NotificationsPanelState.Loading });
        };
        _this._handleShowPanelWithErrorClick = function () {
            _this.setState({ open: true, panelState: NotificationsPanelState.Error });
        };
        _this._handleHasNotificationsToggleChange = function (value) {
            _this.setState({ empty: !value });
        };
        _this._onDismissAllNotifications = function () {
            _this.setState({ notifications: [], panelState: NotificationsPanelState.Empty });
        };
        _this._onSettingPanelDismiss = function () {
            _this.setState({ openSettings: false });
        };
        _this._onDismiss = function () {
            _this.setState({ open: false });
        };
        _this._onClickSettings = function () {
            _this.setState({ openSettings: true });
        };
        _this._renderSettingsIcon = function () {
            var settingsIcon = { iconName: 'Settings' };
            return (React.createElement("div", { style: { paddingLeft: 15, paddingBottom: 10 } },
                React.createElement(ActionButton, { iconProps: settingsIcon, onClick: _this._onClickSettings }, "Settings")));
        };
        _this._renderSettingsPanelFooter = function () {
            return (React.createElement("div", { style: { padding: 20, paddingLeft: 140 } },
                React.createElement(DefaultButton, { text: "Cancel", onClick: _this._onSettingPanelDismiss, allowDisabledFocus: true }),
                React.createElement("span", { style: { padding: 5 } }),
                React.createElement(PrimaryButton, { text: "Save", onClick: _this._onSettingPanelDismiss, allowDisabledFocus: true })));
        };
        _this._exampleNotifications = [
            {
                id: '1',
                title: 'An App was shared with you',
                body: 'XYZ has shared the app, Calculator by ABC with you',
                headerPrimaryText: '1 hr ago',
                headerSecondaryText: '7/14/2018',
                headerTooltip: 'this is a tooltip for the header!',
                isNew: true,
                actionText: 'click to see the app',
                dismissTooltip: 'dismiss',
                onActionClick: function () { return alert('notification 1 action link clicked'); },
                onClick: function () { return alert('notification 1 clicked'); },
                onRenderIcon: function () { return React.createElement(Icon, { iconName: "AccessLogo" }); },
                onDismiss: _this._onDismissNotification
            },
            {
                id: '2',
                title: 'Notifications 2',
                body: 'results ready',
                headerPrimaryText: '1 hr ago',
                headerSecondaryText: '7/14/2018',
                isNew: false,
                onClick: function () { return alert('notification 2 clicked'); }
            },
            {
                id: '3',
                isNew: true,
                onClick: function () { return alert('custom card notification clicked'); },
                onRenderCardBody: function () { return React.createElement("div", { style: { padding: '15px' } }, "Hello Microsoft!!!"); }
            },
            {
                id: '4',
                title: 'Notification 4',
                headerSecondaryText: '7/15/2020',
                isNew: false,
                onClick: function () { return alert('notification 4 clicked'); }
            },
            {
                id: '5',
                title: 'Notifications 5',
                isNew: true,
                body: 'results ready',
                onClick: function () { return alert('custom card notification clicked'); },
                onRenderCardBody: function () { return React.createElement("div", { style: { padding: '15px' } }, "Hello Matt!!"); }
            }
        ];
        _this.state = {
            open: true,
            empty: false,
            notifications: _this._exampleNotifications.slice(),
            panelState: NotificationsPanelState.Loaded,
            openSettings: false
        };
        return _this;
    }
    NotificationsPanelBasicExample.prototype.render = function () {
        var _a = this.state, open = _a.open, empty = _a.empty, openSettings = _a.openSettings;
        return (React.createElement("div", null,
            React.createElement(Toggle, { label: "Has notifications", checked: !empty, onChanged: this._handleHasNotificationsToggleChange }),
            React.createElement(DefaultButton, { onClick: this._reloadNotifications },
                " ",
                'Reload Notifications',
                " "),
            React.createElement("br", null),
            React.createElement(DefaultButton, { onClick: this._handleShowPanelClick },
                " ",
                'Show Notifications Panel',
                " "),
            React.createElement("br", null),
            React.createElement(DefaultButton, { onClick: this._handleShowPanelWithErrorClick },
                ' ',
                'Show Panel With Error',
                ' '),
            React.createElement("br", null),
            React.createElement(DefaultButton, { onClick: this._handleShowPanelWithLoadingStateClick },
                ' ',
                'Show panel with loading state',
                ' '),
            React.createElement("div", { className: "ba-NotificationsPanel-BasicExample" },
                React.createElement(NotificationsPanel, { ariaLoadingMessage: "The notifications panel is loading.", panelState: this.state.panelState, errorPrimaryMessage: "Something went wrong. Please try again later", errorSecondaryMessage: "failed to get notifications", emptyStateMessage: "No Notifications", dismissAllText: "Dismiss All", onDismissAll: this._onDismissAllNotifications, isOpen: open, onDismiss: this._onDismiss, headerText: "Notifications", notifications: !empty && this.state.notifications, onRenderFooter: this._renderSettingsIcon, closeButtonAriaLabel: 'Close' })),
            React.createElement("div", { className: "ba-SettingsPanel-BasicExample" },
                React.createElement(Panel, { headerText: "Settings", isOpen: openSettings, closeButtonAriaLabel: "Close", onDismiss: this._onSettingPanelDismiss, onRenderFooter: this._renderSettingsPanelFooter, isFooterAtBottom: true },
                    React.createElement("div", null, "Please customize your settings here. A Sample is provided below"),
                    React.createElement("br", null),
                    React.createElement(Toggle, { label: "Enable toast notifications", defaultChecked: true, onText: "On", offText: "Off" }),
                    React.createElement(Toggle, { label: "Enabled sound alerts", defaultChecked: true, onText: "On", offText: "Off" }),
                    React.createElement(TextField, { label: "Total duration (seconds)", styles: narrowTextFieldStyles })))));
    };
    return NotificationsPanelBasicExample;
}(React.Component));
export { NotificationsPanelBasicExample };
//# sourceMappingURL=NotificationsPanel.Basic.Example.js.map