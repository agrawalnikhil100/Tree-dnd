/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import * as Enzyme from 'enzyme';
import 'jest';
import { List } from '@fluentui/react/lib/List';
import { Spinner } from '@fluentui/react/lib/Spinner';
import * as React from 'react';
import { EmptyState } from '../EmptyState';
import { NotificationsPanelBase } from './NotificationsPanel.base';
import { NotificationsPanelState } from './NotificationsPanel.types';
describe('NotificationsPanel', function () {
    it('renders one notification as expected', function () {
        var notification = {
            id: '1',
            title: 'title',
            body: 'App Checker Results',
            actionText: 'action text',
            headerPrimaryText: '1 hr ago',
            headerSecondaryText: '7/14/2018'
        };
        var wrapper = Enzyme.shallow(React.createElement(NotificationsPanelBase, { onDismissAll: null, emptyStateMessage: 'No Notifications', dismissAllText: 'Dismiss all', notifications: [notification] }));
        var list = wrapper.find(List);
        expect(list.length).toBe(1);
        expect(list.prop('items').length).toBe(1);
        expect(list.prop('items')[0]).toEqual(notification);
    });
    it('Show spinner in loading state', function () {
        var props = {
            notifications: [],
            emptyStateMessage: 'No Notifications',
            dismissAllText: 'Dismiss all',
            onDismissAll: jest.fn(),
            panelState: NotificationsPanelState.Loading,
            isOpen: true
        };
        var wrapper = Enzyme.shallow(React.createElement(NotificationsPanelBase, __assign({}, props)));
        var panel = wrapper.find('Panel');
        expect(panel.length).toBe(1);
        var onRenderBodyWrapper = Enzyme.shallow(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        panel.props().onRenderBody());
        expect(onRenderBodyWrapper.find(Spinner)).toHaveLength(1);
    });
    it('Show emptyState component in error state', function () {
        var props = {
            notifications: [],
            emptyStateMessage: 'No Notifications',
            dismissAllText: 'Dismiss all',
            onDismissAll: jest.fn(),
            panelState: NotificationsPanelState.Error,
            isOpen: true,
            errorPrimaryMessage: 'error1',
            errorSecondaryMessage: 'error2'
        };
        var wrapper = Enzyme.shallow(React.createElement(NotificationsPanelBase, __assign({}, props)));
        var panel = wrapper.find('Panel');
        expect(panel).toHaveLength(1);
        var onRenderBodyWrapper = Enzyme.shallow(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        panel.props().onRenderBody());
        var emptyState = onRenderBodyWrapper.find(EmptyState);
        expect(emptyState.length).toBe(1);
        expect(emptyState.props().primaryMessage).toBe('error1');
        expect(emptyState.props().secondaryMessage).toBe('error2');
    });
});
//# sourceMappingURL=NotificationsPanel.test.js.map