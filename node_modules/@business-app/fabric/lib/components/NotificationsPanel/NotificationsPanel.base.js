/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __rest } from "tslib";
import { Link } from '@fluentui/react/lib/Link';
import { List } from '@fluentui/react/lib/List';
import { Spinner, SpinnerSize } from '@fluentui/react/lib/Spinner';
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { EmptyState } from '../EmptyState';
import { Panel } from '../Panel';
import { NotificationCard } from './NotificationCard/NotificationCard';
import { NotificationsPanelState } from './NotificationsPanel.types';
var getClassNames = classNamesFunction();
export var NotificationsPanelBase = function (props) {
    var componentRef = props.componentRef, notifications = props.notifications, emptyStateMessage = props.emptyStateMessage, panelState = props.panelState, dismissAllText = props.dismissAllText, errorPrimaryMessage = props.errorPrimaryMessage, errorSecondaryMessage = props.errorSecondaryMessage, onDismissAll = props.onDismissAll, dismissTooltip = props.dismissTooltip, rest = __rest(props, ["componentRef", "notifications", "emptyStateMessage", "panelState", "dismissAllText", "errorPrimaryMessage", "errorSecondaryMessage", "onDismissAll", "dismissTooltip"]);
    var _a = React.useState(''), ariaLiveText = _a[0], setAriaLiveText = _a[1];
    var hasNotifications = (notifications === null || notifications === void 0 ? void 0 : notifications.length) > 0;
    var panelReady = panelState === undefined || panelState === NotificationsPanelState.Loaded;
    React.useEffect(function () {
        var _a;
        (_a = props.onMount) === null || _a === void 0 ? void 0 : _a.call(props);
    });
    var _onRenderSubHeader = React.useCallback(function () {
        if (!hasNotifications || !dismissAllText || !onDismissAll) {
            return null;
        }
        return (React.createElement(Link, { onClick: onDismissAll, title: dismissTooltip }, dismissAllText));
    }, [dismissAllText, onDismissAll, notifications]);
    var _renderEmptyStateOrLoadingBody = React.useCallback(function () {
        var classNames = getClassNames(props.styles);
        var component;
        switch (panelState) {
            case NotificationsPanelState.Error:
                component = (React.createElement(EmptyState, { icon: "Ringer", primaryMessage: errorPrimaryMessage, secondaryMessage: errorSecondaryMessage }));
                break;
            case NotificationsPanelState.Empty:
                component = React.createElement(EmptyState, { icon: "Ringer", primaryMessage: emptyStateMessage });
                break;
            case NotificationsPanelState.Loading:
                setAriaLiveText(props.ariaLoadingMessage);
                component = React.createElement(Spinner, { size: SpinnerSize.large });
                break;
            default:
                component = null;
                setAriaLiveText('');
        }
        return React.createElement("div", { className: classNames.centeredContent }, component);
    }, [panelState, emptyStateMessage, errorPrimaryMessage, errorSecondaryMessage]);
    return (React.createElement(React.Fragment, null,
        React.createElement(Panel, __assign({}, rest, { className: "ba-notificationsPanel", emptyStateProps: !hasNotifications &&
                panelReady && {
                icon: 'Ringer',
                primaryMessage: emptyStateMessage
            }, onRenderBody: !panelReady ? _renderEmptyStateOrLoadingBody : undefined, onRenderSubHeader: _onRenderSubHeader }), hasNotifications && React.createElement(List, { items: notifications, onRenderCell: _onRenderCell })),
        React.createElement("div", { "aria-live": "assertive", "aria-atomic": "true", style: { overflow: 'hidden', position: 'absolute', top: -1000, left: -1000, width: 0, height: 0 } }, ariaLiveText)));
};
var _onRenderCell = function (notification) {
    return React.createElement(NotificationCard, __assign({}, notification));
};
//# sourceMappingURL=NotificationsPanel.base.js.map