/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __rest } from "tslib";
import { DefaultButton, PrimaryButton } from '@fluentui/react/lib/Button';
import { Link } from '@fluentui/react/lib/Link';
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { Icon } from '@fluentui/react/lib/Icon';
import { concatStyleSets, getTheme } from '@fluentui/react/lib/Styling';
import { getDefaultButtonStyles, getDefaultLinkStyles } from './Error.styles';
import { getSmallSplashSvg } from './assets/ErrorSplashSmall';
import { getMediumSplashSvg } from './assets/ErrorSplashMedium';
import { getLargeSplashSvg } from './assets/ErrorSplashLarge';
var getClassNames = classNamesFunction();
/**
 * Provides an error splash page with optional details of the cause and
 * next steps to contact self-correct or contact customer service
 * @export
 */
export function ErrorBase(props) {
    var className = props.className, title = props.title, subtitle = props.subtitle, seeDetailsLinkShowLabel = props.seeDetailsLinkShowLabel, seeDetailsLinkHideLabel = props.seeDetailsLinkHideLabel, learnMoreLink = props.learnMoreLink, callToActionLink = props.callToActionLink, errorDetails = props.errorDetails, styles = props.styles, _a = props.theme, theme = _a === void 0 ? getTheme() : _a, rest = __rest(props, ["className", "title", "subtitle", "seeDetailsLinkShowLabel", "seeDetailsLinkHideLabel", "learnMoreLink", "callToActionLink", "errorDetails", "styles", "theme"]);
    var _b = React.useState(false), isContentVisible = _b[0], setIsContentVisible = _b[1];
    var classNames = getClassNames(styles, {
        theme: theme,
        className: className
    });
    var toggleState = React.useCallback(function () { return setIsContentVisible(!isContentVisible); }, [isContentVisible]);
    var headerStyles = React.useCallback(function () { return concatStyleSets(getDefaultButtonStyles(theme), classNames.callToActionButton); }, [theme]);
    var menuIconProps = { iconName: isContentVisible ? 'ChevronUp' : 'ChevronDown' };
    var seeDetailsButtonProps = {
        menuIconProps: menuIconProps,
        ariaExpanded: isContentVisible
    };
    return (React.createElement("div", __assign({ role: "presentation", className: classNames.root }, rest),
        React.createElement("h1", { className: classNames.title }, title),
        (subtitle || learnMoreLink) && (React.createElement("div", { className: classNames.subtitle },
            subtitle,
            learnMoreLink && (React.createElement(Link, { className: classNames.learnMoreLink, href: learnMoreLink.url, target: learnMoreLink.target, styles: getDefaultLinkStyles(theme) }, learnMoreLink.label)))),
        seeDetailsLinkShowLabel && seeDetailsLinkHideLabel && errorDetails && (React.createElement(React.Fragment, null,
            React.createElement(DefaultButton, __assign({ "aria-expanded": isContentVisible, onClick: toggleState, onMenuClick: toggleState }, seeDetailsButtonProps, { text: isContentVisible ? seeDetailsLinkHideLabel : seeDetailsLinkShowLabel, className: classNames.seeDetailsButton })),
            isContentVisible && (React.createElement("div", { className: classNames.seeDetailsDiv },
                renderLabeledField(errorDetails.messageLabel, errorDetails.message),
                renderLabeledField(errorDetails.timeStampLabel, errorDetails.timeStamp),
                renderLabeledField(errorDetails.sessionIdLabel, errorDetails.sessionId),
                renderLabeledField(errorDetails.objectIdLabel, errorDetails.objectId),
                renderLabeledField(errorDetails.tenantIdLabel, errorDetails.tenantId),
                errorDetails.customerSupportLink && (React.createElement(Link, { className: classNames.customerSupportLink, href: errorDetails.customerSupportLink.url, target: errorDetails.customerSupportLink.target, styles: getDefaultLinkStyles(theme) },
                    errorDetails.customerSupportLink.label,
                    " ",
                    React.createElement(Icon, { iconName: "OpenInNewWindow" }))))))),
        callToActionLink && (React.createElement(PrimaryButton, { text: callToActionLink.label, href: callToActionLink.url, target: callToActionLink.target, styles: headerStyles(), className: classNames.callToActionButton })),
        React.createElement("div", { className: classNames.imageSmall }, getSmallSplashSvg()),
        React.createElement("div", { className: classNames.imageMedium }, getMediumSplashSvg()),
        React.createElement("div", { className: classNames.imageLarge }, getLargeSplashSvg()),
        React.createElement("div", { className: classNames.imageFooter })));
}
function renderLabeledField(fieldLabel, fieldText) {
    return (React.createElement(React.Fragment, null,
        fieldLabel && fieldText && (React.createElement("div", null,
            React.createElement("b", null,
                fieldLabel,
                ":"),
            " ",
            fieldText)),
        !fieldLabel && fieldText && React.createElement("div", null, fieldText)));
}
//# sourceMappingURL=Error.base.js.map