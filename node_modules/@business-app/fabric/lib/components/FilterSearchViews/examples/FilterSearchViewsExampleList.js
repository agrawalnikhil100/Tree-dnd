/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import * as React from 'react';
import { Icon } from '@fluentui/react/lib/Icon';
import { Label } from '@fluentui/react/lib/Label';
export var IListRenderMethod;
(function (IListRenderMethod) {
    IListRenderMethod[IListRenderMethod["VerticalList"] = 0] = "VerticalList";
    IListRenderMethod[IListRenderMethod["HorizontalList"] = 1] = "HorizontalList";
    IListRenderMethod[IListRenderMethod["Grid"] = 2] = "Grid";
})(IListRenderMethod || (IListRenderMethod = {}));
/**
 * Renders an item in the list. Handles logic of rendering an item and its children.
 * @param item Item to render
 * @param index Index of item in list
 * @param renderAsGrid Whether to render the leaf items as a grid
 * @param useFloatForGrid Whether to use float for the grid. This is important for when the data source is flat versus
 * nested.
 */
export var renderItem = function (item, index, renderMethod) {
    if (item.children) {
        return (React.createElement("div", { key: item.id },
            React.createElement(Label, { styles: getHeaderStyles(index) }, item.text),
            React.createElement("div", { style: { display: 'flex', flexWrap: 'wrap', alignItems: 'center' } }, item.children.map(function (child) { return renderItem(child, index, renderMethod); }))));
    }
    var itemContainerStyles;
    var iconStyles;
    if (renderMethod === IListRenderMethod.VerticalList) {
        itemContainerStyles = verticalListItemContainerStyles;
        iconStyles = listIconStyles;
    }
    else if (renderMethod === IListRenderMethod.HorizontalList) {
        itemContainerStyles = horizontalListItemContainerStyles;
        iconStyles = listIconStyles;
    }
    else if (renderMethod === IListRenderMethod.Grid) {
        itemContainerStyles = gridContainerStyles;
        iconStyles = gridIconStyles;
    }
    return (React.createElement("div", { key: item.id, style: itemContainerStyles },
        React.createElement(Icon, { iconName: item.iconName, styles: { root: iconStyles } }),
        React.createElement(Label, null, item.text)));
};
var getHeaderStyles = function (index) { return ({
    root: {
        backgroundColor: '#eaeaea',
        paddingLeft: 8,
        marginTop: index > 0 ? 8 : 0
    }
}); };
var baseListItemContainerStyles = {
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    height: 32,
    float: 'initial',
    padding: '0px 8px'
};
var verticalListItemContainerStyles = __assign(__assign({}, baseListItemContainerStyles), { justifyContent: 'initial', width: '100%', height: 32 });
var horizontalListItemContainerStyles = __assign(__assign({}, baseListItemContainerStyles), { justifyContent: 'center', flex: '0 0 10%', height: 72 });
var gridContainerStyles = {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    width: '20%',
    height: 100,
    paddingLeft: 0
};
var listIconStyles = {
    marginBottom: 0,
    marginRight: 8
};
var gridIconStyles = {
    marginBottom: 8,
    marginRight: 0
};
//# sourceMappingURL=FilterSearchViewsExampleList.js.map