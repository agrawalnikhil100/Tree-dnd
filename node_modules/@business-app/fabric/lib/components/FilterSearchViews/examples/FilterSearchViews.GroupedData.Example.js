/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __extends } from "tslib";
import * as React from 'react';
import { FilterSearchViews } from '../index';
import { filters, groupedItems, shouldFilterItem } from './FilterSearchViewsExampleData';
import { IListRenderMethod, renderItem } from './FilterSearchViewsExampleList';
var FilterSearchViewsGroupedDataExample = /** @class */ (function (_super) {
    __extends(FilterSearchViewsGroupedDataExample, _super);
    function FilterSearchViewsGroupedDataExample() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            amountFiltered: 0
        };
        return _this;
    }
    FilterSearchViewsGroupedDataExample.prototype.render = function () {
        var _this = this;
        return (React.createElement(React.Fragment, null,
            React.createElement(FilterSearchViews, { strings: {
                    searchBoxPlaceholder: 'Search',
                    allItemsFilterItemText: 'All'
                }, items: groupedItems, shouldFilterItem: shouldFilterItem, filters: filters, views: [
                    {
                        key: 'list',
                        text: 'List',
                        ariaLabel: 'List view',
                        iconName: 'List',
                        onRenderView: function (filteredItems) {
                            var _a, _b, _c, _d;
                            // Note this is an example code only for announcing the filtered results,
                            // production code may not be this predictable.
                            var allFiltered = (((_b = (_a = filteredItems[0]) === null || _a === void 0 ? void 0 : _a.children) === null || _b === void 0 ? void 0 : _b.length) || 0) + (((_d = (_c = filteredItems[1]) === null || _c === void 0 ? void 0 : _c.children) === null || _d === void 0 ? void 0 : _d.length) || 0);
                            if (_this.state.amountFiltered !== allFiltered) {
                                _this.setState({ amountFiltered: allFiltered });
                            }
                            return _this._renderList(filteredItems, IListRenderMethod.VerticalList);
                        }
                    },
                    {
                        key: 'grid',
                        text: 'Grid',
                        ariaLabel: 'Grid view',
                        iconName: 'LargeGrid',
                        onRenderView: function (filteredItems) {
                            var _a, _b, _c, _d;
                            // Note this is an example code only for announcing the filtered results,
                            // production code may not be this predictable.
                            var allFiltered = (((_b = (_a = filteredItems[0]) === null || _a === void 0 ? void 0 : _a.children) === null || _b === void 0 ? void 0 : _b.length) || 0) + (((_d = (_c = filteredItems[1]) === null || _c === void 0 ? void 0 : _c.children) === null || _d === void 0 ? void 0 : _d.length) || 0);
                            if (_this.state.amountFiltered !== allFiltered) {
                                _this.setState({ amountFiltered: allFiltered });
                            }
                            return _this._renderList(filteredItems, IListRenderMethod.Grid);
                        }
                    }
                ] }),
            React.createElement("div", { "aria-live": "assertive", "aria-atomic": "true", style: { overflow: 'hidden', position: 'absolute', top: -1000, left: -1000, width: 0, height: 0 } }, this.state.amountFiltered + ' items shown')));
    };
    FilterSearchViewsGroupedDataExample.prototype._renderList = function (filteredItems, renderMethod) {
        return React.createElement(React.Fragment, null, filteredItems.map(function (item, index) { return renderItem(item, index, renderMethod); }));
    };
    return FilterSearchViewsGroupedDataExample;
}(React.Component));
export { FilterSearchViewsGroupedDataExample };
//# sourceMappingURL=FilterSearchViews.GroupedData.Example.js.map