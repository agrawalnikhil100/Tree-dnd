/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __extends } from "tslib";
import { Label } from '@fluentui/react/lib/Label';
import { SelectableOptionMenuItemType } from '@fluentui/react/lib/SelectableOption';
import { Stack } from '@fluentui/react/lib/Stack';
import * as React from 'react';
import { FilterableComboBox } from '../FilterableComboBox';
var tags = [
    'Azure',
    'Black',
    'Cerulean',
    'Gray',
    'Green',
    'Lilac',
    'Rose',
    'Ruby',
    'Yellow',
    'オレンジ',
    '青い'
].map(function (name) { return ({
    key: name.toLowerCase(),
    text: name.indexOf('_') === 0 ? name.substr(1) : name,
    itemType: name.indexOf('_') === 0
        ? SelectableOptionMenuItemType.Header
        : name.indexOf('&') === 0
            ? SelectableOptionMenuItemType.Divider
            : SelectableOptionMenuItemType.Normal
}); });
var FilterableComboBoxExample = /** @class */ (function (_super) {
    __extends(FilterableComboBoxExample, _super);
    function FilterableComboBoxExample() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            selectedKey: undefined,
            selectedOption: undefined
        };
        return _this;
    }
    FilterableComboBoxExample.prototype.render = function () {
        var _this = this;
        return (React.createElement(Stack, { maxWidth: 400, gap: 16 },
            React.createElement(FilterableComboBox, { label: 'Choose an option', options: tags, noResultsMessage: function (query) { return (React.createElement(Label, { styles: { root: { padding: '8px 16px' } } }, "No results found matching \"" + query + "\".")); }, calloutProps: { calloutMaxHeight: 400 }, revertToLastValidOptionOnInvalidFilter: true, selectedKey: this.state.selectedKey, useComboBoxAsMenuWidth: true, onChange: function (evt, option) {
                    return option && _this.setState({ selectedKey: option.key, selectedOption: option });
                } }),
            React.createElement("p", null,
                React.createElement(Label, null,
                    "Last selected option: ",
                    this.state.selectedOption && this.state.selectedOption.text))));
    };
    return FilterableComboBoxExample;
}(React.Component));
export { FilterableComboBoxExample };
//# sourceMappingURL=FilterableComboBox.Example.js.map