/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __extends } from "tslib";
import { Label } from '@fluentui/react/lib/Label';
import { SelectableOptionMenuItemType } from '@fluentui/react/lib/SelectableOption';
import { Stack } from '@fluentui/react/lib/Stack';
import * as React from 'react';
import { FilterableComboBox } from '../FilterableComboBox';
var colors = ['Red', 'Green', 'Blue', 'Orange'].map(function (name) { return ({
    key: name.toLowerCase(),
    text: name.indexOf('_') === 0 ? name.substr(1) : name,
    itemType: name.indexOf('_') === 0
        ? SelectableOptionMenuItemType.Header
        : name.indexOf('&') === 0
            ? SelectableOptionMenuItemType.Divider
            : SelectableOptionMenuItemType.Normal
}); });
var foods = [
    'Tacos',
    'Salad',
    'Spaghetti',
    'Ice cream',
    'Pizza',
    'Soup'
].map(function (name) { return ({
    key: name.toLowerCase(),
    text: name.indexOf('_') === 0 ? name.substr(1) : name,
    itemType: name.indexOf('_') === 0
        ? SelectableOptionMenuItemType.Header
        : name.indexOf('&') === 0
            ? SelectableOptionMenuItemType.Divider
            : SelectableOptionMenuItemType.Normal
}); });
var category = ['Foods', 'Colors'].map(function (name) { return ({
    key: name.toLowerCase(),
    text: name.indexOf('_') === 0 ? name.substr(1) : name,
    itemType: name.indexOf('_') === 0
        ? SelectableOptionMenuItemType.Header
        : name.indexOf('&') === 0
            ? SelectableOptionMenuItemType.Divider
            : SelectableOptionMenuItemType.Normal
}); });
var FilterableComboBoxDependentExample = /** @class */ (function (_super) {
    __extends(FilterableComboBoxDependentExample, _super);
    function FilterableComboBoxDependentExample() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            secondOptions: []
        };
        return _this;
    }
    FilterableComboBoxDependentExample.prototype.render = function () {
        var _this = this;
        return (React.createElement(Stack, { maxWidth: 400, gap: 16 },
            React.createElement(FilterableComboBox, { label: 'Choose a category from the options', options: category, noResultsMessage: function (query) { return (React.createElement(Label, { styles: { root: { padding: '8px 16px' } } }, "No results found matching \"" + query + "\".")); }, calloutProps: { calloutMaxHeight: 400 }, useComboBoxAsMenuWidth: true, onChange: function (evt, option) {
                    return option &&
                        _this.setState({
                            secondOptions: option.key === 'foods' ? foods : colors
                        });
                } }),
            React.createElement(FilterableComboBox, { label: 'Choose an option based on the above category', options: this.state.secondOptions, noResultsMessage: function (query) { return (React.createElement(Label, { styles: { root: { padding: '8px 16px' } } }, "No results found matching \"" + query + "\".")); }, calloutProps: { calloutMaxHeight: 400 }, useComboBoxAsMenuWidth: true, disabled: this.state.secondOptions.length < 1 })));
    };
    return FilterableComboBoxDependentExample;
}(React.Component));
export { FilterableComboBoxDependentExample };
//# sourceMappingURL=FilterableComboBox.Dependent.Example.js.map