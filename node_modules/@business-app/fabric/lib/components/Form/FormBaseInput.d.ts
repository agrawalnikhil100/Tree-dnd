/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import * as React from 'react';
import { IFormContext, IFormValidationResult } from './Form';
import { IFormBaseInput, IFormBaseInputProps } from './FormBaseInput.types';
export { IFormBaseInputProps };
import { BaseComponent, ICancelable } from '@fluentui/react/lib/Utilities';
export declare const DEFAULT_DEBOUNCE = 250;
/**
 * The base state for any simple form input
 */
export interface IFormBaseInputState<T> {
    isValid: boolean;
    currentValue?: T;
    currentError?: string;
    prevPropValue?: T;
}
/**
 * Type alias for any simple form input
 */
export declare type GenericFormInput = FormBaseInput<any, IFormBaseInputProps<any>, IFormBaseInputState<any>>;
/**
 * The base class that all simple form inputs should inherit from
 * The T generic should be the type of value this input accepts. For example, a TextBox would probably define T as string
 */
export declare abstract class FormBaseInput<T, P extends IFormBaseInputProps<T>, S extends IFormBaseInputState<T>> extends BaseComponent<P, S> implements IFormBaseInput<T> {
    static contextTypes: React.ValidationMap<IFormContext>;
    /**
     * The debounced version of formContext.submitValue
     */
    protected readonly debouncedSubmitValue: ICancelable<IFormContext['submitValue']> & ((input: GenericFormInput) => void);
    /**
     * Form context passed by the parent form
     */
    private formContext;
    /**
     * Constructor for any Simple Form input
     * @param props The props for this component
     * @param context The context for this component
     * @param leadingDebounce Sets the debounce setting for updates on this input.
     * If leading, the component will update immediately and then debounce.
     * Otherwise, the component will only update after the debounce interval. Defaults to true
     */
    constructor(props: P, context: IFormContext, leadingDebounce?: boolean);
    /**
     * React Lifecycle Method - Because this method uses state when rendering, the state must be
     * updated when the prop's value updates
     * @param nextProps The props that the component is receiving
     * @param prevState The current state of the component
     */
    static getDerivedStateFromProps(nextProps: IFormBaseInputProps<unknown>, prevState: IFormBaseInputState<unknown>): {
        currentValue: unknown;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    /**
     * Validate the input. By default, this function will run through all the validators and ensure they pass
     */
    doValidate(): IFormValidationResult;
    /**
     * Set the error state of this input
     */
    setError(errorMessage?: string): void;
    /**
     * Clear any errors from this input
     */
    clearError(): void;
    /**
     * Set the current value of this input and validate it
     */
    setValue(value: T): void;
    /**
     * Validate incoming props
     * @param props Props to validate
     */
    private static _validateProps;
}
