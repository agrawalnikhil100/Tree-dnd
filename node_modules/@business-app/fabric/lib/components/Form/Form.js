/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __extends } from "tslib";
import * as PropTypes from 'prop-types';
import * as React from 'react';
// Utilities
import { BaseComponent, divProperties, getNativeProps } from '@fluentui/react/lib/Utilities';
/**
 * Use this component to host forms
 */
var Form = /** @class */ (function (_super) {
    __extends(Form, _super);
    function Form(props) {
        var _this = _super.call(this, props) || this;
        /**
         * When the form is submitted. This will validate the form and call the appropriate submit callback
         * @param event The form event
         */
        _this._onSubmit = function (event) {
            event.preventDefault();
            if (_this._pristine) {
                _this._pristine = false;
            }
            if (_this.props.onSubmit) {
                var validationResults = _this._validateForm();
                var formIsValid = _this._isFormValid(validationResults);
                var formValues = _this._getFormValues();
                if (formIsValid) {
                    _this.props.onSubmit(formValues);
                }
                else if (_this.props.onInvalidSubmit) {
                    _this.props.onInvalidSubmit(formValues);
                }
            }
        };
        /**
         * Register an input with the form
         * @param input The input to register
         */
        _this._mountInput = function (input) {
            if (_this._mountedInputs.indexOf(input) === -1) {
                _this._mountedInputs.push(input);
                _this.setState(function (prevState) {
                    prevState.validationResults[input.props.inputKey] = _this._validateComponent(input);
                    return prevState;
                });
            }
        };
        _this._submitValue = function (input) {
            var validationResult = _this._validateComponent(input);
            _this.setState(function (prevState) {
                prevState.validationResults[input.props.inputKey] = validationResult;
                return prevState;
            });
            if (validationResult.isValid) {
                if (_this.props.onUpdated) {
                    _this.props.onUpdated(input.props.inputKey, input.state.currentValue);
                }
            }
        };
        /**
         * Unregister an input with the form
         * @param input The input to unregister
         */
        _this._unmountInput = function (input) {
            var currentIndex = _this._mountedInputs.indexOf(input);
            if (currentIndex > -1) {
                _this._mountedInputs.splice(currentIndex, 1);
                _this.setState(function (prevState) {
                    delete prevState.validationResults[input.props.inputKey];
                    return prevState;
                });
            }
        };
        _this._isFormValid = function (validationResults) {
            if (validationResults === void 0) { validationResults = _this.state.validationResults; }
            for (var key in validationResults) {
                if (!validationResults[key].isValid) {
                    return false;
                }
            }
            return true;
        };
        _this._mountedInputs = [];
        _this._pristine = true;
        _this.state = {
            validationResults: {}
        };
        return _this;
    }
    /**
     * Renders a form component and all child inputs
     */
    Form.prototype.render = function () {
        var nativeProps = getNativeProps(this.props, divProperties);
        return (React.createElement("form", __assign({}, nativeProps, { onSubmit: this._onSubmit }), this.props.children));
    };
    /**
     * Get the context for child components to use
     */
    Form.prototype.getChildContext = function () {
        return {
            isFormValid: this._isFormValid,
            mountInput: this._mountInput,
            unmountInput: this._unmountInput,
            submitValue: this._submitValue
        };
    };
    /**
     * Get all the values from the inputs that have registered with the form
     * Returns a dictionary keyed by the input names
     */
    Form.prototype._getFormValues = function () {
        var formValues = {};
        this._mountedInputs.forEach(function (input) {
            formValues[input.props.inputKey] = input.state.currentValue;
        });
        return formValues;
    };
    /**
     * Validate an individual input and set its error state
     * Returns the validation result
     * @param input The input to validate
     */
    Form.prototype._validateComponent = function (input) {
        var validationResult = input.doValidate();
        if (!validationResult.isValid && (this.props.showErrorsWhenPristine || !this._pristine)) {
            input.setError(validationResult.errorMessage);
        }
        else {
            input.clearError();
        }
        return validationResult;
    };
    /**
     * Validate all the individual inputs and set their error state
     * Returns a list of the validation results
     */
    Form.prototype._validateForm = function () {
        var _this = this;
        var validationResults = {};
        this._mountedInputs.forEach(function (input) {
            validationResults[input.props.inputKey] = _this._validateComponent(input);
        });
        this.setState(function (prevState) {
            prevState.validationResults = validationResults;
            return prevState;
        });
        return validationResults;
    };
    /**
     * This is needed because React 15's context does not work well with typescript
     */
    Form.childContextTypes = {
        isFormValid: PropTypes.func.isRequired,
        mountInput: PropTypes.func.isRequired,
        unmountInput: PropTypes.func.isRequired,
        submitValue: PropTypes.func.isRequired
    };
    return Form;
}(BaseComponent));
export { Form };
//# sourceMappingURL=Form.js.map