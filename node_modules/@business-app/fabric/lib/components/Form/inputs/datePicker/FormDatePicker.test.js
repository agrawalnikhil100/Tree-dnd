/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __extends } from "tslib";
import { getTheme } from '@fluentui/react/lib/Styling';
import * as React from 'react';
import * as ReactTestUtils from 'react-dom/test-utils';
import * as Enzyme from 'enzyme';
import { Form } from '../../Form';
import { FormDatePickerBase } from './FormDatePicker.base';
import { getStyles } from './FormDatePicker.styles';
describe('FormDatePicker Unit Tests', function () {
    var wrapper;
    var styleProps = {
        theme: getTheme(),
        styles: getStyles
    };
    describe('Renders for all combinations of props', function () {
        it('Null name throws error', function () {
            var consoleMock = jest.spyOn(console, 'error');
            consoleMock.mockImplementation(function () { return undefined; });
            var errorFunction = function () {
                ReactTestUtils.renderIntoDocument(React.createElement(Form, { onSubmit: undefined },
                    React.createElement(FormDatePickerBase, __assign({}, styleProps, { inputKey: null, value: undefined }))));
            };
            expect(errorFunction).toThrow();
            expect(consoleMock).toHaveBeenCalledTimes(2);
            expect(consoleMock.mock.calls[0][0]).toMatch('Uncaught [Error: FormBaseInput: name must be defined on all form inputs]');
            consoleMock.mockRestore();
        });
        it('Null props still render', function () {
            wrapper = Enzyme.mount(React.createElement(Form, { onSubmit: undefined },
                React.createElement(FormDatePickerBase, __assign({}, styleProps, { inputKey: "name", value: undefined, validators: undefined }))));
            expect(wrapper.find('ms-DatePicker')).toBeTruthy();
        });
        it('With initial value', function () {
            var result;
            var now = new Date();
            wrapper = Enzyme.mount(React.createElement(Form, { onSubmit: function (value) {
                    result = value;
                } },
                React.createElement(FormDatePickerBase, __assign({}, styleProps, { inputKey: "name", value: now }))));
            expect(wrapper.find('ms-DatePicker')).toBeTruthy();
            var form = wrapper.find('form');
            form.simulate('submit');
            expect(result.name).toEqual(now);
        });
    });
    describe('DatePicker update tests', function () {
        jest.useFakeTimers();
        beforeEach(function () {
            jest.useFakeTimers();
        });
        afterEach(function () {
            jest.clearAllTimers();
        });
        var ExtendsDatePicker = /** @class */ (function (_super) {
            __extends(ExtendsDatePicker, _super);
            function ExtendsDatePicker() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ExtendsDatePicker.prototype.setValue = function (value) {
                _super.prototype.setValue.call(this, value);
            };
            return ExtendsDatePicker;
        }(FormDatePickerBase));
        // Disabled because of intermittent issues with timer logic.
        it.skip('DatePicker is leading and trailing debounced', function (done) {
            var updateStub = jest.fn();
            var formRef = React.createRef();
            ReactTestUtils.renderIntoDocument(React.createElement(Form, { ref: formRef, onUpdated: updateStub },
                React.createElement(ExtendsDatePicker, __assign({}, styleProps, { inputKey: "name", value: new Date() }))));
            var datePicker = ReactTestUtils.findRenderedComponentWithType(formRef.current, ExtendsDatePicker);
            datePicker.setValue(new Date('2015-05-05'));
            expect(updateStub).toHaveBeenCalledTimes(1);
            datePicker.setValue(new Date('2014-05-05'));
            expect(updateStub).toHaveBeenCalledTimes(1);
            jest.runAllTimers();
            expect(updateStub).toHaveBeenCalledTimes(2);
            done();
        });
    });
});
//# sourceMappingURL=FormDatePicker.test.js.map