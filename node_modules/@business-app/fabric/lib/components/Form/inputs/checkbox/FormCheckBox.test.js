/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __extends } from "tslib";
import * as React from 'react';
import * as ReactTestUtils from 'react-dom/test-utils';
import * as Enzyme from 'enzyme';
import { Form } from '../../Form';
import { FormCheckBox } from './FormCheckBox';
describe('FormCheckBox Unit Tests', function () {
    var wrapper;
    beforeEach(function () {
        jest.useFakeTimers();
    });
    afterEach(function () {
        jest.clearAllTimers();
    });
    describe('Renders for all combinations of props', function () {
        it('Null name throws error', function () {
            var consoleMock = jest.spyOn(console, 'error');
            consoleMock.mockImplementation(function () { return undefined; });
            var errorFunction = function () {
                ReactTestUtils.renderIntoDocument(React.createElement(Form, { onSubmit: undefined },
                    React.createElement(FormCheckBox, { inputKey: null, value: undefined })));
            };
            expect(errorFunction).toThrow();
            expect(consoleMock).toHaveBeenCalledTimes(2);
            expect(consoleMock.mock.calls[0][0]).toMatch('Uncaught [Error: FormBaseInput: name must be defined on all form inputs]');
            consoleMock.mockRestore();
        });
        it('Null props still render', function () {
            wrapper = Enzyme.mount(React.createElement(Form, { onSubmit: undefined },
                React.createElement(FormCheckBox, { inputKey: "name", value: undefined, validators: undefined })));
            expect(wrapper.find('ms-Checkbox')).toBeTruthy();
        });
        it('With initial value', function () {
            var result;
            wrapper = Enzyme.mount(React.createElement(Form, { onSubmit: function (value) {
                    result = value;
                } },
                React.createElement(FormCheckBox, { inputKey: "name", value: true })));
            expect(wrapper.find('ms-Checkbox')).toBeTruthy();
            wrapper.simulate('submit');
            expect(result.name).toBeTruthy();
        });
    });
    describe('Checkbox update tests', function () {
        var ExtendsCheckbox = /** @class */ (function (_super) {
            __extends(ExtendsCheckbox, _super);
            function ExtendsCheckbox() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ExtendsCheckbox.prototype.setValue = function (value) {
                _super.prototype.setValue.call(this, value);
            };
            return ExtendsCheckbox;
        }(FormCheckBox));
        // Disabled because of intermittent issues with timer logic.
        it.skip('Checkbox is leading and trailing debounced', function (done) {
            var updateStub = jest.fn();
            var formRef = React.createRef();
            ReactTestUtils.renderIntoDocument(React.createElement(Form, { ref: formRef, onUpdated: updateStub },
                React.createElement(ExtendsCheckbox, { inputKey: "name", value: true })));
            var checkBox = ReactTestUtils.findRenderedComponentWithType(formRef.current, ExtendsCheckbox);
            checkBox.setValue(true);
            expect(updateStub).toHaveBeenCalledTimes(1);
            checkBox.setValue(false);
            expect(updateStub).toHaveBeenCalledTimes(1);
            jest.runAllTimers();
            expect(updateStub).toHaveBeenCalledTimes(2);
            done();
        });
    });
});
//# sourceMappingURL=FormCheckBox.test.js.map