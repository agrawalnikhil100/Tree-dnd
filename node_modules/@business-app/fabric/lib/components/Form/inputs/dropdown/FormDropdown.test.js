/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __extends } from "tslib";
import * as React from 'react';
import * as ReactTestUtils from 'react-dom/test-utils';
import * as Enzyme from 'enzyme';
import { Form } from '../../Form';
import { FormDropdown } from './FormDropdown';
describe('FormDropdown Unit Tests', function () {
    describe('Renders for all combinations of props', function () {
        it('Null name throws error', function () {
            var consoleMock = jest.spyOn(console, 'error');
            consoleMock.mockImplementation(function () { return undefined; });
            var errorFunction = function () {
                ReactTestUtils.renderIntoDocument(React.createElement(Form, { onSubmit: undefined },
                    React.createElement(FormDropdown, { inputKey: null, value: undefined })));
            };
            expect(errorFunction).toThrow();
            expect(consoleMock).toHaveBeenCalledTimes(2);
            expect(consoleMock.mock.calls[0][0]).toMatch('Uncaught [Error: FormBaseInput: name must be defined on all form inputs]');
            consoleMock.mockRestore();
        });
        it('Null props still render', function () {
            var wrapper = Enzyme.shallow(React.createElement(Form, { onSubmit: undefined },
                React.createElement(FormDropdown, { inputKey: "name", value: undefined })));
            expect(wrapper.find('ms-Dropdown')).toBeTruthy();
        });
        it('With initial value', function () {
            var result;
            var formRef = React.createRef();
            ReactTestUtils.renderIntoDocument(React.createElement(Form, { ref: formRef, onSubmit: function (value) {
                    result = value;
                } },
                React.createElement(FormDropdown, { inputKey: "name", dropdownProps: {
                        options: [
                            { key: 1, text: 'Option 1' },
                            { key: 0, text: 'Option 2' },
                            { key: 2, text: 'Option 3' }
                        ]
                    }, value: 0 })));
            var form = ReactTestUtils.findRenderedDOMComponentWithTag(formRef.current, 'form');
            ReactTestUtils.Simulate.submit(form);
            expect(result.name).toEqual(0);
        });
    });
    describe('Dropdown update tests', function () {
        jest.useFakeTimers();
        beforeEach(function () {
            jest.useFakeTimers();
        });
        afterEach(function () {
            jest.clearAllTimers();
        });
        var ExtendsDropdown = /** @class */ (function (_super) {
            __extends(ExtendsDropdown, _super);
            function ExtendsDropdown() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ExtendsDropdown.prototype.setValue = function (value) {
                _super.prototype.setValue.call(this, value);
            };
            return ExtendsDropdown;
        }(FormDropdown));
        it('Dropdown values update on change', function () {
            var options = [
                {
                    key: 0,
                    text: ''
                },
                {
                    key: 1,
                    text: ''
                }
            ];
            var formRef = React.createRef();
            ReactTestUtils.renderIntoDocument(React.createElement(Form, { ref: formRef },
                React.createElement(FormDropdown, { inputKey: "name", value: 0, dropdownProps: {
                        options: options
                    } })));
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var formDropdown = ReactTestUtils.findRenderedComponentWithType(formRef.current, FormDropdown);
            // select first option
            formDropdown._onChange(undefined, options[0]);
            expect(formDropdown.state.currentValue).toEqual(0);
            // select second option
            formDropdown._onChange(undefined, options[1]);
            expect(formDropdown.state.currentValue).toEqual(1);
        });
        it('Multiselect values update on change', function () {
            var options = [
                {
                    key: 0,
                    text: '',
                    selected: false
                },
                {
                    key: 1,
                    text: '',
                    selected: false
                }
            ];
            var formRef = React.createRef();
            ReactTestUtils.renderIntoDocument(React.createElement(Form, { ref: formRef },
                React.createElement(FormDropdown, { inputKey: "name", value: 0, dropdownProps: {
                        options: options,
                        multiSelect: true
                    } })));
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var formDropdown = ReactTestUtils.findRenderedComponentWithType(formRef.current, FormDropdown);
            // mark first option
            options[0].selected = true;
            formDropdown._onChange(undefined, options[0]);
            expect(formDropdown.state.currentValue).toEqual([0]);
            // mark second option
            options[1].selected = true;
            formDropdown._onChange(undefined, options[1]);
            expect(formDropdown.state.currentValue).toEqual([0, 1]);
            // unmark first option
            options[0].selected = false;
            formDropdown._onChange(undefined, options[0]);
            expect(formDropdown.state.currentValue).toEqual([1]);
            // mark first option again
            options[0].selected = true;
            formDropdown._onChange(undefined, options[0]);
            expect(formDropdown.state.currentValue).toEqual([1, 0]);
            // unmark first option again
            options[0].selected = false;
            formDropdown._onChange(undefined, options[0]);
            expect(formDropdown.state.currentValue).toEqual([1]);
        });
        // Disabled because of intermittent issues with timer logic.
        it.skip('Dropdown is leading and trailing debounced', function (done) {
            var updateStub = jest.fn();
            var formRef = React.createRef();
            ReactTestUtils.renderIntoDocument(React.createElement(Form, { ref: formRef, onUpdated: updateStub },
                React.createElement(ExtendsDropdown, { inputKey: "name", value: 0, dropdownProps: {
                        options: [
                            {
                                key: 0,
                                text: ''
                            },
                            {
                                key: 1,
                                text: ''
                            }
                        ]
                    } })));
            var datePicker = ReactTestUtils.findRenderedComponentWithType(formRef.current, ExtendsDropdown);
            datePicker.setValue(0);
            expect(updateStub).toHaveBeenCalledTimes(1);
            datePicker.setValue(1);
            expect(updateStub).toHaveBeenCalledTimes(1);
            jest.runAllTimers();
            expect(updateStub).toHaveBeenCalledTimes(2);
            done();
        });
    });
});
//# sourceMappingURL=FormDropdown.test.js.map