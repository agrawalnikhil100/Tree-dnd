/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __extends } from "tslib";
import * as React from 'react';
// Components
import { Dropdown } from '@fluentui/react/lib/Dropdown';
import { findIndex } from '@fluentui/react/lib/Utilities';
import { FormBaseInput } from '../../FormBaseInput';
/**
 * Dropdown input for Form
 */
var FormDropdown = /** @class */ (function (_super) {
    __extends(FormDropdown, _super);
    function FormDropdown(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._onChange = function (event, option) {
            var _a;
            var dropdownProps = _this.props.dropdownProps;
            (_a = dropdownProps === null || dropdownProps === void 0 ? void 0 : dropdownProps.onChange) === null || _a === void 0 ? void 0 : _a.call(dropdownProps, event, option);
            if (dropdownProps && dropdownProps.multiSelect) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var value = _this.state.currentValue || [];
                var selected = !!option.selected;
                // order of state values and options are not guaranteed to be the same,
                // so find the index using the option key.
                var optionIndex = findIndex(value, function (v) { return v === option.key; });
                if (selected) {
                    value.push(option.key);
                }
                else if (optionIndex >= 0) {
                    value.splice(optionIndex, 1);
                }
                _this.setValue(value);
            }
            else {
                _this.setValue(option.key);
            }
        };
        var dropdownProps = props.dropdownProps;
        var propsValue = _this.props.value;
        var currentValue;
        if (dropdownProps && dropdownProps.multiSelect) {
            // If multiSelect is set to true the currentValue should be an array.
            if (Array.isArray(propsValue)) {
                currentValue = propsValue;
            }
            else if (propsValue) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                currentValue = [propsValue];
            }
            else {
                currentValue = [];
            }
        }
        else {
            currentValue = propsValue;
        }
        _this.state = {
            isValid: true,
            currentValue: currentValue,
            currentError: undefined
        };
        _this._validateDropdownProps(_this.props.dropdownProps);
        return _this;
    }
    /**
     * Render a Fabric Dropdown
     */
    FormDropdown.prototype.render = function () {
        var currentValue = this.state.currentValue;
        return (React.createElement(Dropdown, __assign({ options: [], calloutProps: {
                calloutMaxHeight: 360
            } }, this.props.dropdownProps, { 
            // These props cannot be overridden
            key: this.props.inputKey, onChange: this._onChange }, this.getDropdownSelectedValues(currentValue))));
    };
    // Returns the dropdown selectedKey or selectedKeys based on parameter currentValue
    FormDropdown.prototype.getDropdownSelectedValues = function (currentValue) {
        var selectedVal = null;
        // Office Fabric UI Issue requiring use of SelectedKey and SelectedKeys:
        // https://github.com/microsoft/fluentui/issues/8883#issue-438551056
        if (currentValue && Array.isArray(currentValue)) {
            // If current value is an array it represents a Dropdown with multi-select scenario using 'selectedKeys'
            currentValue.length === 0
                ? (selectedVal = { selectedKeys: null })
                : (selectedVal = { selectedKeys: currentValue });
        }
        else {
            // If current value is not an array it represents a ISelectableDroppableTextProps with a single-select
            // scenario using 'selectedKey'
            selectedVal = { selectedKey: currentValue };
        }
        return selectedVal;
    };
    FormDropdown.prototype._validateDropdownProps = function (props) {
        if (props) {
            if (props.selectedKey !== null && props.selectedKey !== undefined) {
                // eslint-disable-next-line no-console
                console.warn("FormDropdown: 'selectedKey' prop was specified and will be ignored");
            }
            if (props.onChange) {
                // eslint-disable-next-line no-console
                console.warn("FormDropdown: 'onChanged' prop was specified and will be ignored");
            }
        }
    };
    return FormDropdown;
}(FormBaseInput));
export { FormDropdown };
//# sourceMappingURL=FormDropdown.js.map