/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __extends, __rest } from "tslib";
import * as PropTypes from 'prop-types';
import * as React from 'react';
// Components
import { PrimaryButton } from '@fluentui/react/lib/Button';
import { BaseComponent } from '@fluentui/react/lib/Utilities';
/**
 * Submit button for the form which is disabled when the form is invalid
 */
var FormConditionalSubmitButton = /** @class */ (function (_super) {
    __extends(FormConditionalSubmitButton, _super);
    function FormConditionalSubmitButton(props, formContext) {
        var _this = _super.call(this, props, formContext) || this;
        _this.formContext = formContext;
        return _this;
    }
    /**
     * Render a Fabric Button
     */
    FormConditionalSubmitButton.prototype.render = function () {
        var _a = this.props.buttonProps || {}, disabled = _a.disabled, buttonProps = __rest(_a, ["disabled"]);
        return (React.createElement(PrimaryButton, __assign({}, buttonProps, { type: "submit", disabled: disabled || !this.formContext.isFormValid() }), this.props.children));
    };
    FormConditionalSubmitButton.contextTypes = {
        isFormValid: PropTypes.func.isRequired,
        mountInput: PropTypes.func.isRequired,
        unmountInput: PropTypes.func.isRequired,
        submitValue: PropTypes.func.isRequired
    };
    return FormConditionalSubmitButton;
}(BaseComponent));
export { FormConditionalSubmitButton };
//# sourceMappingURL=FormConditionalSubmitButton.js.map