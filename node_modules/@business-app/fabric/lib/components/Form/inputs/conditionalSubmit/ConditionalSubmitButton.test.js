/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __extends } from "tslib";
import * as React from 'react';
import * as ReactTestUtils from 'react-dom/test-utils';
import { Form } from '../../Form';
import * as Validators from '../../validators/Validators';
import { FormTextInput } from '../textInput/FormTextInput';
import { FormConditionalSubmitButton } from './FormConditionalSubmitButton';
describe('FormSubmitButton Unit Tests', function () {
    jest.useFakeTimers();
    beforeEach(function () {
        jest.useFakeTimers();
    });
    afterEach(function () {
        jest.clearAllTimers();
    });
    var ExtendsTextBox = /** @class */ (function (_super) {
        __extends(ExtendsTextBox, _super);
        function ExtendsTextBox() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtendsTextBox.prototype.setValue = function (value) {
            _super.prototype.setValue.call(this, value);
        };
        return ExtendsTextBox;
    }(FormTextInput));
    // Disabled because of intermittent issues with timer logic.
    it.skip('Button is disabled when form is invalid and enabled when form is valid', function (done) {
        var formRef = React.createRef();
        ReactTestUtils.renderIntoDocument(React.createElement(Form, { ref: formRef },
            React.createElement(ExtendsTextBox, { inputKey: "name", validators: [Validators.required('Error')] }),
            React.createElement(FormConditionalSubmitButton, null)));
        var button = ReactTestUtils.findRenderedDOMComponentWithClass(formRef.current, 'ms-Button');
        var textBox = ReactTestUtils.findRenderedComponentWithType(formRef.current, ExtendsTextBox);
        expect(button.getAttribute('disabled')).toEqual('');
        textBox.setValue('Value');
        jest.runAllTimers();
        expect(button.getAttribute('disabled')).toBeFalsy();
        done();
    });
});
//# sourceMappingURL=ConditionalSubmitButton.test.js.map