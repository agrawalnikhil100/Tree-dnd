/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __extends } from "tslib";
/* eslint-disable @typescript-eslint/no-explicit-any */
import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as ReactTestUtils from 'react-dom/test-utils';
// Controls
import * as Enzyme from 'enzyme';
import { TextFieldBase } from '@fluentui/react/lib/TextField';
import { Form } from '../../Form';
import { FormTextInput } from './FormTextInput';
// Utilities
import * as Validators from '../../validators/Validators';
import { FormBaseInput } from '../../FormBaseInput';
describe('FormTextInput Unit Tests', function () {
    describe('Renders for all combinations of props', function () {
        var formProps;
        var formTextInputProps;
        beforeEach(function () {
            formProps = {
                onSubmit: undefined
            };
            formTextInputProps = {
                inputKey: null,
                value: undefined
            };
        });
        it('Null name throws error', function () {
            var consoleMock = jest.spyOn(console, 'error');
            consoleMock.mockImplementation(function () { return undefined; });
            var errorFunction = function () {
                Enzyme.mount(React.createElement(Form, __assign({}, formProps),
                    React.createElement(FormTextInput, __assign({}, formTextInputProps))));
            };
            expect(errorFunction).toThrow();
            expect(consoleMock.mock.calls[0][0]).toMatch('Uncaught [Error: FormBaseInput: name must be defined on all form inputs]');
            consoleMock.mockRestore();
        });
        it('Null props still render', function () {
            formTextInputProps.inputKey = 'name';
            var wrapper = Enzyme.mount(React.createElement(Form, __assign({}, formProps),
                React.createElement(FormTextInput, __assign({}, formTextInputProps))));
            expect(wrapper.find(TextFieldBase).length).toBe(1);
        });
        it('With initial value', function () {
            formTextInputProps.inputKey = 'name';
            formTextInputProps.value = 'Value';
            var wrapper = Enzyme.mount(React.createElement(Form, __assign({}, formProps),
                React.createElement(FormTextInput, __assign({}, formTextInputProps))));
            expect(wrapper.find(TextFieldBase).length).toBe(1);
        });
    });
    describe('Common validations', function () {
        xit('Validators run properly', function () {
            var result;
            var formRef = React.createRef();
            ReactTestUtils.renderIntoDocument(React.createElement(Form, { ref: formRef, onSubmit: function (value) {
                    result = value;
                } },
                React.createElement(FormTextInput, { inputKey: "field", value: "", validators: [Validators.required('Message')] })));
            var form = ReactTestUtils.findRenderedDOMComponentWithTag(formRef.current, 'form');
            ReactTestUtils.Simulate.submit(form);
            // Find the TextField component
            // TODO: this test is not working as intended as even nonsense state names pass.
            //        commented out for now since test isn't executing when named 'xit'
            // const field = ReactTestUtils.findRenderedComponentWithType(renderedForm, TextField);
            // expect(field.state.errorMessage).toBeTruthy();
            expect(result).toBeFalsy();
        });
    });
    describe('Textbox update tests', function () {
        jest.useFakeTimers();
        var ExtendsTextInput = /** @class */ (function (_super) {
            __extends(ExtendsTextInput, _super);
            function ExtendsTextInput() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ExtendsTextInput.prototype.setValue = function (value) {
                _super.prototype.setValue.call(this, value);
            };
            return ExtendsTextInput;
        }(FormTextInput));
        // Disabled because of intermittent issues with timer logic.
        it.skip('TextInput is only trailing debounced', function (done) {
            var updateStub = jest.fn();
            var formRef = React.createRef();
            ReactTestUtils.renderIntoDocument(React.createElement(Form, { ref: formRef, onUpdated: updateStub },
                React.createElement(ExtendsTextInput, { inputKey: "name", value: '' })));
            var datePicker = ReactTestUtils.findRenderedComponentWithType(formRef.current, ExtendsTextInput);
            datePicker.setValue('0');
            expect(updateStub).not.toHaveBeenCalled();
            datePicker.setValue('1');
            expect(updateStub).not.toHaveBeenCalled();
            jest.runAllTimers();
            expect(updateStub).toHaveBeenCalled();
            done();
        });
        it('TextInput state updates from props value change', function () {
            var updatedValue = 'updated';
            var formRef = React.createRef();
            var parent = document.createElement('div');
            ReactDom.render(React.createElement(Form, { ref: formRef },
                React.createElement(FormTextInput, { inputKey: "name", key: "key", value: 'old value' })), parent);
            var textboxElement = ReactTestUtils.findRenderedComponentWithType(formRef.current, FormTextInput);
            var propsUpdateSpy = jest.spyOn(FormBaseInput, 'getDerivedStateFromProps');
            ReactDom.render(React.createElement(Form, null,
                React.createElement(FormTextInput, { inputKey: "name", key: "key", value: updatedValue })), parent);
            expect(textboxElement.state.currentValue).toEqual(updatedValue);
            expect(propsUpdateSpy).toHaveBeenCalledTimes(1);
        });
        it("TextInput state doesn't update with no new props value", function () {
            var oldValue = 'old value';
            var formRef = React.createRef();
            var parent = document.createElement('div');
            ReactDom.render(React.createElement(Form, { ref: formRef },
                React.createElement(FormTextInput, { inputKey: "name", key: "key", value: oldValue })), parent);
            var textboxElement = ReactTestUtils.findRenderedComponentWithType(formRef.current, FormTextInput);
            var setStateSpy = jest.spyOn(textboxElement, 'setState');
            ReactDom.render(React.createElement(Form, null,
                React.createElement(FormTextInput, { inputKey: "name", key: "key", value: oldValue })), parent);
            expect(setStateSpy).toHaveBeenCalledTimes(0);
        });
    });
});
//# sourceMappingURL=FormTextInput.test.js.map