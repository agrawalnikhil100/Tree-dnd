/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import * as React from 'react';
import { getPersonaAccordionPanelStyles } from './PersonaAccordionPanel.styles';
import { classNamesFunction, styled } from '@fluentui/react/lib/Utilities';
import { LinkTemplates, openUrlInNewTab } from './PersonaAccordionPanel.types';
import { Stack } from '@fluentui/react/lib/Stack';
import { Separator } from '@fluentui/react/lib/Separator';
import { DefaultButton } from '@fluentui/react/lib/Button';
import { Persona, PersonaSize } from '@fluentui/react/lib/Persona';
import { Icon } from '@fluentui/react/lib/Icon';
import { DirectionalHint } from '@fluentui/react/lib/ContextualMenu';
var getClassNames = classNamesFunction();
export var PersonaAccordionPanelBase = function (props) {
    var _a = React.useState(props.showActionItemsAlways), showActions = _a[0], setShowActions = _a[1];
    var styles = getClassNames(props.styles, { theme: props.theme });
    var personaClickCallback = props.isCollapsible
        ? function () {
            setShowActions(!showActions);
        }
        : function () { return void 0; };
    return (React.createElement(Stack, { className: styles.PersonaActionsStack, horizontalAlign: "start" },
        React.createElement(PersonaAccordionTitleButton, __assign({ onPersonaClick: personaClickCallback }, props)),
        showActions && (React.createElement(React.Fragment, null,
            React.createElement(Separator, { className: styles.separator }),
            React.createElement(TeamsActionButton, __assign({}, props)),
            React.createElement(EmailActionButton, __assign({}, props))))));
};
export var PersonaAccordionTitleButton = function (props) {
    var _a = React.useState(false), isOpen = _a[0], setIsOpen = _a[1];
    var styles = getClassNames(props.styles, { theme: props.theme });
    return (React.createElement(DefaultButton, { className: styles.personaTitleButton, onClick: function () {
            setIsOpen(!isOpen);
            props.onPersonaClick();
        }, key: 'presentUser' },
        React.createElement(Persona, { imageUrl: props.presentUser.imageUrl, text: props.presentUser.displayName, showSecondaryText: true, secondaryText: props.presentUser.presenceContext, size: PersonaSize.size32 }),
        props.isCollapsible && React.createElement(Icon, { iconName: isOpen ? 'ChevronUp' : 'ChevronDown' })));
};
export var TeamsActionButton = function (props) {
    var styles = getClassNames(props.styles, { theme: props.theme });
    return (React.createElement(DefaultButton, { className: styles.actionButton, key: 'startTeamsChat', menuProps: getTeamsMenuProps(props.signedInUser, props.presentUser, props.strings, styles), menuIconProps: { iconName: 'chevronRight' } },
        React.createElement(Icon, { className: styles.icon, iconName: "TeamsLogo" }),
        React.createElement("span", { className: styles.actionButtonText }, props.strings.startTeamsChat)));
};
export var EmailActionButton = function (props) {
    var onClickCallBack = function () {
        var _a, _b;
        location.href = (_b = 'mailto:' + ((_a = props.presentUser) === null || _a === void 0 ? void 0 : _a.email)) !== null && _b !== void 0 ? _b : '';
    };
    var styles = getClassNames(props.styles, { theme: props.theme });
    return (React.createElement(DefaultButton, { className: styles.actionButton, onClick: onClickCallBack, key: 'email' },
        React.createElement(Icon, { className: styles.icon, iconName: "Mail" }),
        React.createElement("span", { className: styles.actionButtonText }, props.strings.sendEmail)));
};
var getTeamsMenuProps = function (signedInUser, presentUser, strings, styles) {
    // reference: https://www.mail-signatures.com/articles/teams-deep-links-in-email-signatures/
    var teamsInDesktopAppChatLink = LinkTemplates.teamsDesktopAppChatLink(presentUser.email);
    // reference: https://techcommunity.microsoft.com/t5/microsoft-teams/link-deeplink-to-chat-with-a-user/m-p/284213/highlight/true#M20316
    var teamsInBrowserChatLink = LinkTemplates.teamsBrowserChatLink(signedInUser === null || signedInUser === void 0 ? void 0 : signedInUser.tenantId, signedInUser === null || signedInUser === void 0 ? void 0 : signedInUser.userId, presentUser.userId);
    return {
        isSubMenu: true,
        directionalHint: DirectionalHint.rightCenter,
        items: [
            {
                key: 'openInBrowser',
                iconProps: { iconName: 'TeamsLogo', className: styles.teamsIcon },
                text: strings.openInBrowser,
                onClick: function () { return openUrlInNewTab(teamsInBrowserChatLink); },
                className: styles.subMenuActionButton
            },
            {
                key: 'openInDesktop',
                iconProps: { iconName: 'TeamsLogo', className: styles.teamsIcon },
                text: strings.openInDesktop,
                onClick: function () { return openUrlInNewTab(teamsInDesktopAppChatLink); },
                className: styles.subMenuActionButton
            }
        ]
    };
};
/**
 * Panel that pops up with details and (optionally) actions for each user.
 */
export var PersonaAccordionPanel = styled(PersonaAccordionPanelBase, getPersonaAccordionPanelStyles);
//# sourceMappingURL=PersonaAccordionPanel.js.map