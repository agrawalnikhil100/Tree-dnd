/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import * as React from 'react';
import { PersonaAccordionPanel } from './PersonaAccordionPanel';
import { getPresenceStyles } from './Presence.styles';
import { classNamesFunction, styled } from '@fluentui/react/lib/Utilities';
import { Facepile, OverflowButtonType } from '@fluentui/react/lib/Facepile';
import { Persona, PersonaSize } from '@fluentui/react/lib/Persona';
import { Callout, DirectionalHint } from '@fluentui/react/lib/Callout';
import { FocusZone, FocusZoneDirection } from '@fluentui/react/lib/FocusZone';
import { List } from '@fluentui/react/lib/List';
import { TooltipDelay, TooltipHost } from '@fluentui/react/lib/Tooltip';
import { DefaultButton } from '@fluentui/react/lib/Button';
var getClassNames = classNamesFunction();
var DefaultMaxDisplayableUsers = 2;
export var PresenceBase = function (props) {
    var _a;
    var _b = React.useState(false), showCallout = _b[0], setShowCallout = _b[1];
    var _c = React.useState(undefined), overFlowButtonTarget = _c[0], setOverFlowButtonTarget = _c[1];
    var presentPersonas = props.presentUsers.map(function (user) { return ({ data: user }); });
    var maxDisplayableUsers = props.maxDisplayableUsers || DefaultMaxDisplayableUsers;
    var styles = getClassNames(props.styles, {
        theme: props.theme,
        showAccordion: props.showAccordion
    });
    var onRenderPersona = props.showAccordion
        ? onRenderPersonaCoinForWithAccordion(props.strings, props.signedInUser)
        : onRenderPersonaCoinForInlineAuthorPersona();
    var facepileProps = {
        personas: presentPersonas.slice(0, maxDisplayableUsers),
        overflowPersonas: presentPersonas.slice(maxDisplayableUsers),
        personaSize: PersonaSize.size24,
        maxDisplayablePersonas: maxDisplayableUsers,
        // Overriding OnRenderPersonaCoin doesn't work when there is only one item. onRenderPersona is a way around that.
        onRenderPersona: onRenderPersona,
        onRenderPersonaCoin: onRenderPersona,
        overflowButtonProps: (_a = {},
            _a['aria-haspopup'] = true,
            _a.ariaLabel = props.strings.overflowButtonAriaLabel,
            _a),
        ariaLabel: props.strings.ariaLabel,
        overflowButtonType: OverflowButtonType.descriptive
    };
    if (facepileProps.overflowPersonas.length > 0) {
        facepileProps.overflowButtonProps.onClick = function (e) {
            e.stopPropagation();
            setOverFlowButtonTarget(e.currentTarget);
            setShowCallout(!showCallout);
        };
    }
    return (React.createElement(React.Fragment, null,
        React.createElement(Facepile, __assign({}, facepileProps)),
        facepileProps.overflowPersonas.length > 0 && (React.createElement(Callout, { hidden: !showCallout, role: 'dialog', isBeakVisible: true, target: overFlowButtonTarget, onDismiss: function () { return setShowCallout(false); }, directionalHint: DirectionalHint.bottomCenter, setInitialFocus: true },
            React.createElement(FocusZone, { direction: FocusZoneDirection.vertical, className: styles.overFlowListContent },
                React.createElement(List, { items: facepileProps.overflowPersonas, onRenderCell: onRenderPersonaCoinForWithAccordion(props.strings, props.signedInUser, true, props.showAccordion) }))))));
};
var onRenderPersonaCoinForInlineAuthorPersona = function () { return function (props) {
    return React.createElement(PresencePersona, __assign({}, props.data));
}; };
export var PresencePersona = function (props) {
    var personaCommonProps = {
        imageUrl: props.imageUrl,
        text: props.displayName
    };
    var tooltipProps = {
        onRenderContent: function () { return (React.createElement(Persona, __assign({}, personaCommonProps, { size: PersonaSize.size32, showSecondaryText: true, secondaryText: props.presenceContext }))); }
    };
    return (React.createElement(TooltipHost, { key: props.key, tooltipProps: tooltipProps, delay: TooltipDelay.zero, directionalHint: DirectionalHint.bottomCenter },
        React.createElement(Persona, __assign({}, personaCommonProps, { hidePersonaDetails: true, size: PersonaSize.size24, key: props.key }))));
};
var onRenderPersonaCoinForWithAccordion = function (strings, signedInUser, isOverflowItem, isCollapsible) { return function (props) {
    var authorPersonaProps = {
        presentUser: props.data,
        strings: strings,
        signedInUser: signedInUser,
        isOverflowItem: isOverflowItem,
        isCollapsible: isCollapsible
    };
    return React.createElement(PersonaCoinForWithAccordion, __assign({}, authorPersonaProps));
}; };
export var PersonaCoinForWithAccordionBase = function (props) {
    var _a;
    var _b = React.useState(false), showCallout = _b[0], setShowCallout = _b[1];
    var personaRef = React.useRef(null);
    var personaAccordionPanelProps = {
        showActionItemsAlways: !props.isOverflowItem,
        isCollapsible: props.isCollapsible,
        presentUser: props.presentUser,
        signedInUser: props.signedInUser,
        strings: props.strings
    };
    var styles = getClassNames(props.styles, {
        theme: props.theme,
        showAccordion: false,
        isSelected: showCallout
    });
    return props.isOverflowItem ? (React.createElement(PersonaAccordionPanel, __assign({}, personaAccordionPanelProps))) : (React.createElement(React.Fragment, null,
        React.createElement("div", { ref: personaRef, key: props.presentUser.key },
            React.createElement(DefaultButton, { key: props.presentUser.key, "aria-haspopup": showCallout, className: styles.commandBarPersonaButton, onClick: function () { return setShowCallout(!showCallout); }, ariaLabel: props.presentUser.displayName },
                React.createElement(Persona, { imageUrl: props.presentUser.imageUrl, text: props.presentUser.displayName, hidePersonaDetails: true, size: PersonaSize.size24, key: (_a = props.presentUser) === null || _a === void 0 ? void 0 : _a.key }))),
        React.createElement(Callout, { hidden: !showCallout, role: 'dialog', isBeakVisible: true, target: personaRef.current, onDismiss: function () { return setShowCallout(false); }, directionalHint: DirectionalHint.bottomCenter, setInitialFocus: true },
            React.createElement(FocusZone, { direction: FocusZoneDirection.vertical, role: "menu" },
                React.createElement(PersonaAccordionPanel, __assign({}, personaAccordionPanelProps))))));
};
var PersonaCoinForWithAccordion = styled(PersonaCoinForWithAccordionBase, getPresenceStyles);
/**
 * Facepile for showing users present on a resource, with additional context and contact info.
 */
export var Presence = styled(PresenceBase, getPresenceStyles);
//# sourceMappingURL=Presence.js.map