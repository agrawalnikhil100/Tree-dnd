/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import * as Enzyme from 'enzyme';
import 'jest';
import { DefaultButton } from '@fluentui/react/lib/Button';
import { setIconOptions } from '@fluentui/react/lib/Styling';
import { getTheme } from '@fluentui/react/lib/Styling';
import * as React from 'react';
import { Carousel } from '.';
import { getMockContent } from './examples/Carousel.Example.Data';
// Suppress icon warnings.
setIconOptions({
    disableWarnings: true
});
describe('Carousel Tests', function () {
    var props;
    jest.useFakeTimers();
    beforeEach(function () {
        props = {
            theme: getTheme(),
            items: getMockContent(),
            navPreviousButtonAriaLabel: 'Previous',
            navNextButtonAriaLabel: 'Next',
            indicatorButtonsAriaLabel: 'Item',
            playButtonAriaLabel: 'Play',
            pauseButtonAriaLabel: 'Pause'
        };
        jest.useFakeTimers();
    });
    afterEach(function () {
        jest.clearAllTimers();
    });
    it('should render the component', function () {
        var wrapper = Enzyme.mount(React.createElement(Carousel, __assign({}, props)));
        expect(wrapper).toMatchSnapshot();
        wrapper.unmount();
    });
    it('should render the component with the wrapper class', function () {
        var wrapper = Enzyme.shallow(React.createElement(Carousel, __assign({}, props, { className: "test-class" })));
        expect(wrapper.find('.test-class')).toBeDefined();
        wrapper.unmount();
    });
    it('should play cycle', function () {
        var wrapper = Enzyme.mount(React.createElement(Carousel, __assign({}, props, { delay: 100 })));
        var carousel = wrapper.childAt(0);
        var state = function () { return carousel.instance().state; };
        jest.advanceTimersByTime(50);
        expect(state().isAutoplaySuspended).toBeFalsy();
        expect(state().isAutoplayButtonPaused).toBeFalsy();
        expect(state().selectedIndex).toBe(0);
        jest.advanceTimersByTime(100);
        expect(state().selectedIndex).toBe(1);
        jest.advanceTimersByTime(100);
        expect(state().selectedIndex).toBe(2);
        wrapper.setProps({ isAutoPlayDisabled: true });
        jest.advanceTimersByTime(100);
        expect(state().selectedIndex).toBe(2);
        jest.advanceTimersByTime(1000);
        expect(state().selectedIndex).toBe(2);
        wrapper.setProps({ isAutoPlayDisabled: false });
        jest.advanceTimersByTime(100);
        expect(state().selectedIndex).toBe(3);
        jest.advanceTimersByTime(100);
        expect(state().selectedIndex).toBe(0);
        wrapper.unmount();
    });
    it('should show controls and nav', function () {
        var rendered = Enzyme.render(React.createElement(Carousel, __assign({}, props)));
        expect(rendered.find('.ba-Carousel-tooltipControl').length).toBe(2);
        expect(rendered.find('.ba-Carousel-tooltipControl-previous').length).toBe(1);
        expect(rendered.find('.ba-Carousel-tooltipControl-next').length).toBe(1);
        expect(rendered.find('.ba-Carousel-indicatorsWrapper').length).toBe(1);
    });
    it('should hide controls and nav', function () {
        var rendered = Enzyme.render(React.createElement(Carousel, __assign({}, props, { hideNavigation: true, hideIndicators: true })));
        expect(rendered.find('.ba-Carousel-tooltipControl').length).toBe(0);
        expect(rendered.find('.ba-Carousel-tooltipControl-previous').length).toBe(0);
        expect(rendered.find('.ba-Carousel-tooltipControl-next').length).toBe(0);
        expect(rendered.find('.ba-Carousel-indicatorsWrapper').length).toBe(0);
    });
    it('should hide play button', function () {
        var renderedHidden = Enzyme.render(React.createElement(Carousel, __assign({}, props, { hidePlayButton: true })));
        expect(renderedHidden.find('.ba-Carousel-play').length).toBe(0);
        var renderedShown = Enzyme.render(React.createElement(Carousel, __assign({}, props)));
        expect(renderedShown.find('.ba-Carousel-play').length).toBe(1);
    });
    it('test skip button behavior', function () {
        var renderedIndicators = Enzyme.mount(React.createElement(Carousel, __assign({}, props, { disableNavigationLoop: true, isAutoPlayDisabled: true, useControlLabels: true })));
        expect(renderedIndicators.find(DefaultButton).length).toBe(1);
        var skipButtonCount = 0;
        var wrapper = Enzyme.mount(React.createElement(Carousel, __assign({}, props, { skipButton: {
                onSkip: function () {
                    skipButtonCount++;
                },
                skipButtonAriaLabel: 'Skip',
                skipButtonLabel: 'Skip'
            }, disableNavigationLoop: true, isAutoPlayDisabled: true, useControlLabels: true })));
        expect(skipButtonCount).toBe(0);
        var controlButtons = wrapper.find(DefaultButton);
        expect(controlButtons.length).toBe(2);
        controlButtons.at(0).simulate('click');
        expect(skipButtonCount).toBe(1);
    });
    it('test next button behavior', function () {
        var nextButtonCount = 0;
        var wrapper = Enzyme.mount(React.createElement(Carousel, __assign({}, props, { onNext: function () {
                nextButtonCount++;
            }, disableNavigationLoop: true, isAutoPlayDisabled: true, useControlLabels: true })));
        expect(nextButtonCount).toBe(0);
        var controlButtons = wrapper.find(DefaultButton);
        expect(controlButtons.length).toBe(1);
        controlButtons.at(0).simulate('click');
        expect(nextButtonCount).toBe(1);
    });
    it('test previous button behavior', function () {
        var renderedIndicators = Enzyme.mount(React.createElement(Carousel, __assign({}, props, { disableNavigationLoop: true, isAutoPlayDisabled: true, useControlLabels: true })));
        expect(renderedIndicators.find(DefaultButton).length).toBe(1);
        var previousButtonCount = 0;
        var wrapper = Enzyme.mount(React.createElement(Carousel, __assign({}, props, { onPrevious: function () {
                previousButtonCount++;
            }, disableNavigationLoop: true, isAutoPlayDisabled: true, useControlLabels: true })));
        expect(previousButtonCount).toBe(0);
        var controlButtons = wrapper.find(DefaultButton);
        expect(controlButtons.length).toBe(1);
        controlButtons.at(0).simulate('click');
        expect(previousButtonCount).toBe(0);
        controlButtons = wrapper.find(DefaultButton);
        expect(controlButtons.length).toBe(2);
        controlButtons.at(0).simulate('click');
        expect(previousButtonCount).toBe(1);
    });
    it('test done button behavior', function () {
        var dismissButtonCount = 0;
        var wrapper = Enzyme.mount(React.createElement(Carousel, __assign({}, props, { doneButton: {
                onDone: function () {
                    dismissButtonCount++;
                },
                doneButtonAriaLabel: 'Done',
                doneButtonLabel: 'Done'
            }, disableNavigationLoop: true, isAutoPlayDisabled: true, useControlLabels: true })));
        expect(dismissButtonCount).toBe(0);
        var controlButtons = wrapper.find(DefaultButton);
        expect(controlButtons.length).toBe(1);
        controlButtons.at(0).simulate('click');
        controlButtons = wrapper.find(DefaultButton);
        expect(controlButtons.length).toBe(2);
        controlButtons.at(1).simulate('click');
        controlButtons = wrapper.find(DefaultButton);
        expect(controlButtons.length).toBe(2);
        controlButtons.at(1).simulate('click');
        controlButtons = wrapper.find(DefaultButton);
        expect(controlButtons.length).toBe(2);
        controlButtons.at(1).simulate('click');
        expect(dismissButtonCount).toBe(1);
    });
    it('test orderIndicatorsBeforeControls', function () {
        var controlFirstWrapper = Enzyme.mount(React.createElement(Carousel, __assign({}, props)));
        expect(controlFirstWrapper.find('.ba-Carousel-controlsWrapper + .ba-Carousel-indicatorsWrapper').length).toBe(1);
        var indicatorFirstWrapper = Enzyme.mount(React.createElement(Carousel, __assign({}, props, { orderIndicatorsBeforeControls: true })));
        expect(indicatorFirstWrapper.find('.ba-Carousel-indicatorsWrapper + .ba-Carousel-controlsWrapper').length).toBe(1);
    });
    it('test _areItemsEqual', function () {
        var wrapper = Enzyme.mount(React.createElement(Carousel, __assign({}, props, { disableNavigationLoop: true, isAutoPlayDisabled: true, useControlLabels: true, indicatorButtonsAriaLabel: ['1', '2', '3'] })));
        var carousel = wrapper.childAt(0);
        var state = function () { return carousel.instance().state; };
        expect(state().selectedIndex).toBe(0);
        var controlButtons = wrapper.find(DefaultButton);
        expect(controlButtons.length).toBe(1);
        controlButtons.at(0).simulate('click');
        expect(state().selectedIndex).toBe(1);
        wrapper.setProps({ indicatorButtonsAriaLabel: ['1', '2', '3'] });
        expect(state().selectedIndex).toBe(1);
    });
});
//# sourceMappingURL=Carousel.test.js.map