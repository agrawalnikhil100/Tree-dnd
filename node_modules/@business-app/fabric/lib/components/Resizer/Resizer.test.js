/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import * as Enzyme from 'enzyme';
import * as React from 'react';
import { KeyCodes } from '@fluentui/react/lib/Utilities';
import { DefaultButton } from '@fluentui/react/lib/Button';
import { ResizerBase } from './Resizer.base';
import { ResizerLocation } from './Resizer.types';
var sizeChangedCallback = jest.fn();
function getResizerTestProps() {
    return {
        location: ResizerLocation.Right,
        size: 150,
        onSizeChanged: sizeChangedCallback
    };
}
export var ResizableButton = function (props) {
    return (React.createElement("div", { style: { position: 'relative', width: 300, height: 150 } },
        React.createElement(DefaultButton, { style: { width: '100%', height: '100%' }, text: "Hello" }),
        React.createElement(ResizerBase, __assign({}, props))));
};
describe('ResizerBase', function () {
    it('renders resizer gets rendered when the parent element is positioned', function () {
        var containerWrapper = Enzyme.shallow(React.createElement(ResizableButton, __assign({}, getResizerTestProps())));
        expect(containerWrapper.find(ResizerBase).length).toBe(1);
    });
    it('onSizeChanged is called when the size of the prop changes', function () {
        var containerWrapper = Enzyme.mount(React.createElement(ResizableButton, __assign({}, getResizerTestProps())));
        var resizerWrapper = containerWrapper.find(ResizerBase);
        // Disabling console.error
        // eslint-disable-next-line no-console
        var originalError = console.error;
        // eslint-disable-next-line no-console
        console.error = jest.fn();
        resizerWrapper.simulate('mouseDown');
        window.dispatchEvent(new MouseEvent('mousemove'));
        window.dispatchEvent(new MouseEvent('mouseup'));
        expect(sizeChangedCallback).toBeCalledTimes(1);
        // Enable console.error
        // eslint-disable-next-line no-console
        console.error = originalError;
        containerWrapper.unmount();
    });
    it('onSizeChanged is triggered on keypress (left/right)', function () {
        var keyBoardResize = jest.fn();
        var myProps = {
            location: ResizerLocation.Right,
            size: 150,
            onSizeChanged: keyBoardResize
        };
        var containerWrapper = Enzyme.mount(React.createElement(ResizableButton, __assign({}, myProps)));
        var resizerWrapper = containerWrapper.find(ResizerBase);
        resizerWrapper.simulate('keydown', { keyCode: KeyCodes.right });
        resizerWrapper.simulate('keydown', { keyCode: KeyCodes.left });
        expect(keyBoardResize).toBeCalledTimes(2);
        containerWrapper.unmount();
    });
    it('onSizeChanged is triggered on keypress (up/down)', function () {
        var keyBoardResize = jest.fn();
        var myProps = {
            location: ResizerLocation.Bottom,
            size: 150,
            onSizeChanged: keyBoardResize
        };
        var containerWrapper = Enzyme.mount(React.createElement(ResizableButton, __assign({}, myProps)));
        var resizerWrapper = containerWrapper.find(ResizerBase);
        resizerWrapper.simulate('keydown', { keyCode: KeyCodes.down });
        resizerWrapper.simulate('keydown', { keyCode: KeyCodes.up });
        expect(keyBoardResize).toBeCalledTimes(2);
        containerWrapper.unmount();
    });
});
//# sourceMappingURL=Resizer.test.js.map