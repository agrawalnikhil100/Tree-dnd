/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import { IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';
export interface ResizerState {
    /**
     * The current size of the resizable element.
     */
    size: number;
    /**
     * The minimum delta allowed for the relative size of the {@link Resizer}.
     */
    minRelativeDelta: number;
    /**
     * The maximum delta allowed for the relative size of the {@link Resizer}.
     */
    maxRelativeDelta: number;
    /**
     * Determines if the sign should be kept during delta calculations.
     */
    keepDeltaSign: boolean;
    /**
     * Indicates if the {@link Resizer} is currently resizing.
     */
    isResizing: boolean;
    /**
     * Indicates whether the resize direction is horizontal or vertical.
     */
    resizeDirection: ResizeDirection;
    /**
     * The current state of the cursor. During resize, the cursor state is set to indicate a resize operation.
     */
    cursor: string;
    /**
     * The value that indicates the relative position of the {@link Resizer} to its previous value.
     */
    resizeRelativeValue: number;
}
export interface ResizerProps {
    /**
     * The accessible label of the {@link Resizer}.
     */
    ariaLabel?: string;
    /**
     * The current size of the {@link Resizer} and the resizable element.
     */
    size: number;
    /**
     * The minimum size that the {@link Resizer} can resize the resizable element to.
     */
    maxSize?: number;
    /**
     * The maximum size that the {@link Resizer} can resize the resizable element to.
     */
    minSize?: number;
    /**
     * Specifies the location of the {@link Resizer} with respect to the resizable element.
     */
    location: ResizerLocation;
    /**
     * Callback that gets invoked when the element finishes resizing.
     */
    onSizeChanged: (newSize: number) => void;
    /**
     * Size of the {@link Resizer} handle.
     * @default 5
     */
    handleSize?: number;
    /**
     * Specifies if the {@link Resizer} handler attaches inside or outside the edge of the element to be resized.
     * @default ResizerAttachment.Outside
     */
    attachment?: ResizerAttachment;
    /**
     * Theme provided by High-Order Component.
     */
    theme?: ITheme;
    /**
     * Call to provide customized styling that will layer on top of the variant rules.
     */
    styles?: IStyleFunctionOrObject<ResizerStyleProps, ResizerStyles>;
}
/**
 * Contains properties used to compute the styles of the {@link Resizer} component.
 */
export declare type ResizerStyleProps = Pick<ResizerProps, 'theme'>;
/**
 * Contains styles of the {@link Resizer} component.
 */
export interface ResizerStyles {
    /**
     *  Styles for the {@link Resizer} root element.
     */
    root?: IStyle;
}
/**
 * Specifies the location of the {@link Resizer} with respect to the resizable element.
 */
export declare enum ResizerLocation {
    Top = 0,
    Right = 1,
    Bottom = 2,
    Left = 3
}
/**
 * Specifies whether the resize direction is horizontal or vertical.
 */
export declare enum ResizeDirection {
    Vertical = 0,
    Horizontal = 1
}
/**
 * Specifies if the {@link Resizer} handler attaches inside or outside the edge of the element to be resized.
 */
export declare enum ResizerAttachment {
    Inside = 0,
    Outside = 1
}
