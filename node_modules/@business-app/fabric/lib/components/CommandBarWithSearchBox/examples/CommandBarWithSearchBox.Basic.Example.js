/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __extends } from "tslib";
import { Toggle } from '@fluentui/react/lib/Toggle';
import { assign } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { CommandBarWithSearchBox } from '..';
// Example data
import { farItems, items, overflowItems } from '../../../utilities/data/contextualMenuItems';
var CommandBarWithSearchBoxBasicExample = /** @class */ (function (_super) {
    __extends(CommandBarWithSearchBoxBasicExample, _super);
    function CommandBarWithSearchBoxBasicExample(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            isSearchBoxVisible: true,
            areNamesVisible: true,
            areIconsVisible: true
        };
        return _this;
    }
    CommandBarWithSearchBoxBasicExample.prototype.render = function () {
        var _this = this;
        var _a = this.state, searchBoxVisible = _a.isSearchBoxVisible, iconsVisible = _a.areIconsVisible, namesVisible = _a.areNamesVisible;
        var filteredItems = items.map(function (item) {
            return assign({}, item, {
                iconOnly: !namesVisible,
                icon: iconsVisible ? item.icon : ''
            });
        });
        var filteredOverflowItems = overflowItems.map(function (item) {
            return assign({}, item, {
                iconOnly: !namesVisible,
                icon: iconsVisible ? item.icon : ''
            });
        });
        var filteredFarItems = farItems.map(function (item) {
            return assign({}, item, {
                iconOnly: !namesVisible,
                icon: iconsVisible ? item.icon : ''
            });
        });
        var searchBoxProps = {
            placeholder: 'Search with debounce...',
            ariaLabel: 'Search',
            onChange: function (ev, text) { return alert(text); }
        };
        return (React.createElement("div", null,
            React.createElement(Toggle, { label: "Show search box", checked: searchBoxVisible, onChanged: function (isSearchBoxVisible) { return _this.setState({ isSearchBoxVisible: isSearchBoxVisible }); }, onText: "Visible", offText: "Hidden" }),
            React.createElement(Toggle, { label: "Show names", checked: namesVisible, onChanged: function (areNamesVisible) { return _this.setState({ areNamesVisible: areNamesVisible }); }, onText: "Visible", offText: "Hidden" }),
            React.createElement(Toggle, { label: "Show icons", checked: iconsVisible, onChanged: function (areIconsVisible) { return _this.setState({ areIconsVisible: areIconsVisible }); }, onText: "Visible", offText: "Hidden" }),
            React.createElement(CommandBarWithSearchBox, { wrapperClassName: 'test', isSearchBoxVisible: searchBoxVisible, searchBoxProps: searchBoxProps, items: filteredItems, overflowItems: filteredOverflowItems, farItems: filteredFarItems, onChangeDelay: 1000, overflowButtonProps: { ariaLabel: 'Overflow items' } })));
    };
    return CommandBarWithSearchBoxBasicExample;
}(React.Component));
export { CommandBarWithSearchBoxBasicExample };
//# sourceMappingURL=CommandBarWithSearchBox.Basic.Example.js.map