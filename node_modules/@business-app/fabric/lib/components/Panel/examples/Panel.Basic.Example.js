/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __extends } from "tslib";
import { ChoiceGroup } from '@fluentui/react/lib/ChoiceGroup';
import { MessageBarType } from '@fluentui/react/lib/MessageBar';
import { Toggle } from '@fluentui/react/lib/Toggle';
import * as React from 'react';
import { Panel } from '..';
var PanelBasicExample = /** @class */ (function (_super) {
    __extends(PanelBasicExample, _super);
    function PanelBasicExample(props) {
        var _this = _super.call(this, props) || this;
        _this._onDismiss = function () {
            _this.setState({ open: false });
        };
        _this._changeState = function (ev, option) {
            switch (option.key) {
                case 'loading':
                    _this.setState({
                        loadingOverlay: { loadingText: 'Loading...' }
                    });
                    break;
                case 'success':
                    _this.setState({
                        loadingOverlay: null,
                        messageBar: {
                            messageBarProps: { messageBarType: MessageBarType.success },
                            onRenderBody: function () { return React.createElement("span", null, "Success message goes here "); }
                        }
                    });
                    break;
                case 'error':
                    _this.setState({
                        loadingOverlay: null,
                        messageBar: {
                            messageBarProps: { messageBarType: MessageBarType.error },
                            onRenderBody: function () { return React.createElement("span", null, "Error message goes here "); }
                        }
                    });
                    break;
                default:
                    _this.setState({ loadingOverlay: null, messageBar: null });
                    break;
            }
        };
        _this.state = {
            open: false,
            loadingOverlay: null,
            showDismissDialog: false,
            dismissDialog: {
                title: 'Discard changes',
                subtext: 'Are you sure you want to discard changes?',
                confirmButtonText: 'Discard',
                cancelButtonText: 'Cancel'
            },
            dismissOnEscape: false,
            messageBar: null,
            showCustomFooterContent: false
        };
        return _this;
    }
    PanelBasicExample.prototype.render = function () {
        var _this = this;
        var _a = this.state, open = _a.open, loadingOverlay = _a.loadingOverlay, dismissDialog = _a.dismissDialog, showCustomFooterContent = _a.showCustomFooterContent, showDismissDialog = _a.showDismissDialog, dismissOnEscape = _a.dismissOnEscape, messageBar = _a.messageBar;
        return (React.createElement("div", null,
            React.createElement(Toggle, { label: "Make panel changes", checked: showDismissDialog, onChanged: function (hasChanged) { return _this.setState({ showDismissDialog: hasChanged }); }, onText: "Changed", offText: "Unchanged" }),
            React.createElement(Toggle, { label: "Dismiss on escape", checked: dismissOnEscape, onChanged: function (shouldDismissOnEscape) { return _this.setState({ dismissOnEscape: shouldDismissOnEscape }); }, onText: "Yes", offText: "No" }),
            React.createElement(Toggle, { label: "Show custom footer content", checked: showCustomFooterContent, onChanged: function (shouldShowCustomFooterContent) {
                    return _this.setState({ showCustomFooterContent: shouldShowCustomFooterContent });
                }, onText: "Yes", offText: "No" }),
            React.createElement(Toggle, { label: "Show panel", checked: open, onChanged: function (isOpen) { return _this.setState({ open: isOpen }); }, onText: "Visible", offText: "Hidden" }),
            React.createElement(ChoiceGroup, { defaultSelectedKey: "normal", options: [
                    {
                        key: 'normal',
                        text: 'Normal State'
                    },
                    {
                        key: 'loading',
                        text: 'Loading State'
                    },
                    {
                        key: 'success',
                        text: 'Success State'
                    },
                    {
                        key: 'error',
                        text: 'Error State'
                    }
                ], onChange: this._changeState, label: "Select a State", required: false }),
            React.createElement("div", { className: "ba-Panel-BasicExample" },
                React.createElement(Panel, { isOpen: open, onDismiss: this._onDismiss, headerText: "Example panel", footerButtons: [
                        {
                            dismissableOnClick: function () { return null; },
                            text: 'Done',
                            primary: true
                        },
                        {
                            dismissableOnClick: function () { return null; },
                            text: 'Cancel'
                        }
                    ], loadingOverlay: loadingOverlay, showDismissDialog: showDismissDialog, dismissDialog: dismissDialog, dismissOnEscape: dismissOnEscape, messageBar: messageBar, onRenderFooterContent: showCustomFooterContent ? customFooterContentAboveButtons : undefined },
                    React.createElement("span", null, "Content goes here.")))));
    };
    return PanelBasicExample;
}(React.Component));
export { PanelBasicExample };
var customFooterContentAboveButtons = function () {
    return React.createElement("p", null, "You can add some custom footer content too.");
};
//# sourceMappingURL=Panel.Basic.Example.js.map