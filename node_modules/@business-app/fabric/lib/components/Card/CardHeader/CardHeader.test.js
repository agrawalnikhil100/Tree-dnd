/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import 'jest';
import * as Enzyme from 'enzyme';
import * as React from 'react';
import { IconButton } from '@fluentui/react/lib/Button';
import { Label } from '@fluentui/react/lib/Label';
import { CardHeader } from './';
describe('CardHeaderBase', function () {
    it('Basic rendering of the Card Header', function () {
        var wrapper = Enzyme.mount(React.createElement(CardHeader, { title: 'Title' }));
        // One title Label component
        var findLabel = wrapper.find(Label);
        expect(findLabel.length).toBe(1);
        // The contextual menu icon button is not rendered by default
        var contextualMenuIconWrapper = wrapper.find(IconButton);
        expect(contextualMenuIconWrapper.length).toBe(0);
        wrapper.unmount();
    });
    it('Contextual menu gets rendered if ContextualMenuProps are provided', function () {
        var wrapper = Enzyme.mount(React.createElement(CardHeader, { title: 'Title', contextualMenuProps: {
                items: [
                    {
                        key: 'newItem',
                        text: 'New',
                        onClick: function () { return alert('New clicked'); }
                    },
                    {
                        key: 'rename',
                        text: 'Rename',
                        onClick: function () { return alert('Rename clicked'); }
                    }
                ]
            } }));
        var contextualMenuIconWrapper = wrapper.find(IconButton);
        // ContextualMenu should get rendered
        expect(contextualMenuIconWrapper.length).toBe(1);
        // The 'MoreVertical' icon gets rendered as the contextual menu icon
        expect(contextualMenuIconWrapper.props().menuIconProps.iconName).toBe('MoreVertical');
        wrapper.unmount();
    });
    it('The action links component gets rendered when the renderActionLinks prop is passed', function () {
        var ActionLinks = function () {
            return (React.createElement(React.Fragment, null,
                React.createElement(IconButton, { iconProps: { iconName: 'Attach' } }),
                React.createElement(IconButton, { iconProps: { iconName: 'Add' } })));
        };
        var wrapper = Enzyme.mount(React.createElement(CardHeader, { title: 'Title', renderActionLinks: function () { return React.createElement(ActionLinks, null); } }));
        // The action links component gets rendered
        expect(wrapper.find(ActionLinks).length).toBe(1);
        wrapper.unmount();
    });
});
//# sourceMappingURL=CardHeader.test.js.map