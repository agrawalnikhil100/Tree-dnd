/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import * as React from 'react';
import { CommandBarButton, IconButton } from '@fluentui/react/lib/Button';
import { FontIcon } from '@fluentui/react/lib/Icon';
import { Label } from '@fluentui/react/lib/Label';
import { Link } from '@fluentui/react/lib/Link';
import { classNamesFunction, css } from '@fluentui/react/lib/Utilities';
import { ActionItemType } from './CardHeader.types';
var getClassNames = classNamesFunction();
export var CardHeaderBase = function (props) {
    var actionItemProps = props.actionItemProps, contextualMenuAriaLabel = props.contextualMenuAriaLabel, contextualMenuProps = props.contextualMenuProps, renderActionLinks = props.renderActionLinks, styles = props.styles, subTitle = props.subTitle, subTitleIconProps = props.subTitleIconProps, title = props.title, titleIconProps = props.titleIconProps, onRenderTitle = props.onRenderTitle, onRenderSubTitle = props.onRenderSubTitle;
    var classNames = getClassNames(styles, props);
    var actionItems = [];
    actionItemProps === null || actionItemProps === void 0 ? void 0 : actionItemProps.forEach(function (item) {
        switch (item.type) {
            case ActionItemType.Link:
                actionItems.push(React.createElement(Link, __assign({ key: item.props.title, className: css(classNames.actionMenuItem, classNames.actionMenuLink) }, item.props), item.props.title));
                break;
            case ActionItemType.Button:
                actionItems.push(React.createElement(CommandBarButton, __assign({ key: item.props.title, className: css(classNames.actionMenuItem, classNames.actionMenuButton) }, item.props)));
                break;
            case ActionItemType.ContextualMenu:
                actionItems.push(React.createElement(CommandBarButton, __assign({ key: item.props.title, className: css(classNames.actionMenuItem) }, item.props)));
                break;
            default:
                // eslint-disable-next-line no-console
                console.log('You managed to select a component type that is currently ', 'unavailable for the ActionItems.', 'Available ActionItems include Links, Buttons, and/or ContextualMenus');
                break;
        }
    });
    var shouldRenderTitle = title || onRenderTitle;
    var shouldRenderSubTitle = subTitle || onRenderSubTitle;
    var shouldRenderSubContainer = shouldRenderSubTitle || subTitleIconProps;
    return (React.createElement("div", { className: classNames.headerContainer },
        titleIconProps && React.createElement(FontIcon, __assign({ className: classNames.titleIcon }, titleIconProps)),
        (shouldRenderTitle || shouldRenderSubContainer) && (React.createElement("div", { className: classNames.titleContainer },
            shouldRenderTitle && ((onRenderTitle === null || onRenderTitle === void 0 ? void 0 : onRenderTitle()) || React.createElement(Label, { className: classNames.title }, title)),
            shouldRenderSubContainer && (React.createElement("span", { className: classNames.subTitleContainer },
                subTitleIconProps && React.createElement(FontIcon, __assign({ className: classNames.subTitleIcon }, subTitleIconProps)),
                shouldRenderSubTitle &&
                    ((onRenderSubTitle === null || onRenderSubTitle === void 0 ? void 0 : onRenderSubTitle()) || React.createElement(Label, { className: classNames.subTitle }, subTitle)))))),
        React.createElement("div", { className: classNames.actionMenuContainer }, renderActionLinks === null || renderActionLinks === void 0 ? void 0 :
            renderActionLinks(),
            actionItems,
            contextualMenuProps && (React.createElement(IconButton, { className: classNames.actionMenuButton, menuIconProps: { iconName: 'MoreVertical' }, menuProps: contextualMenuProps, ariaLabel: contextualMenuAriaLabel })))));
};
//# sourceMappingURL=CardHeader.base.js.map