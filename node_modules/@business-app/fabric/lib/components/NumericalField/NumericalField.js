/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
/* eslint-disable max-classes-per-file */
import { __assign, __extends } from "tslib";
import { TextField } from '@fluentui/react/lib/TextField';
import { css } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
var stripCommas = /,/g;
var stripEndingPeriod = /\.$/g;
/**
 * An abstract textfield control that performs numerical validation on its contents,
 * resetting back to the last known valid value on invalid input.
 */
var NumericalField = /** @class */ (function (_super) {
    __extends(NumericalField, _super);
    function NumericalField(props) {
        var _this = _super.call(this, props) || this;
        _this.applyInput = function (_, originalValue) {
            // Strips all commas out of input
            var preparedValue = originalValue.replace(stripCommas, '');
            // Trim all bordering whitespace
            preparedValue = preparedValue.trim();
            if (!preparedValue || _this.isValid(preparedValue)) {
                _this.setState({
                    formattedValue: originalValue,
                    stringValue: preparedValue,
                    lastValidValue: preparedValue,
                    prevPropValue: _this.props.value
                });
            }
            else {
                _this.setState({
                    formattedValue: originalValue,
                    stringValue: preparedValue,
                    prevPropValue: _this.props.value
                });
            }
        };
        _this.onBlur = function () {
            var lastValidValue = _this.state.lastValidValue;
            var lastValidNumericalValue = lastValidValue ? Number(lastValidValue) : undefined;
            if (lastValidNumericalValue !== _this.props.value && _this.props.onBlurred) {
                _this.props.onBlurred(lastValidNumericalValue);
            }
            // JS accepts numbers ending with periods
            // but we don't
            var stringValue = lastValidValue.replace(stripEndingPeriod, '');
            // correct the input to the last known correct value
            // or blank if the field was emptied
            _this.setState({
                stringValue: stringValue || '',
                formattedValue: lastValidNumericalValue !== undefined ? NumericalField.formatAsNumericalString(stringValue) : ''
            });
        };
        _this.state = NumericalField.makeStateFromProps(props);
        return _this;
    }
    NumericalField.getDerivedStateFromProps = function (nextProps, prevState) {
        if (nextProps.value !== prevState.prevPropValue && nextProps.value !== Number(prevState.lastValidValue)) {
            return NumericalField.makeStateFromProps(nextProps);
        }
        return null;
    };
    NumericalField.prototype.render = function () {
        var _a = this.props, textFieldProps = _a.textFieldProps, formatValue = _a.formatValue;
        var _b = this.state, stringValue = _b.stringValue, formattedValue = _b.formattedValue;
        return (React.createElement(TextField, __assign({}, textFieldProps, { className: css('ba-NumericalField', textFieldProps && textFieldProps.className), value: formatValue === false ? stringValue : formattedValue, onChange: this.applyInput, onBlur: this.onBlur })));
    };
    NumericalField.defaultFormatter = new Intl.NumberFormat(undefined, {
        maximumFractionDigits: 20
    });
    NumericalField.makeStateFromProps = function (props) {
        return {
            stringValue: props.value !== undefined ? String(props.value) : '',
            formattedValue: props.value !== undefined ? NumericalField.formatAsNumericalString(String(props.value)) : '',
            lastValidValue: props.value !== undefined ? String(props.value) : '',
            prevPropValue: props.value
        };
    };
    NumericalField.formatAsNumericalString = function (value) {
        try {
            var asNumber = Number(value);
            return isNaN(asNumber) ? value : NumericalField.defaultFormatter.format(asNumber);
        }
        catch (err) {
            // an error while formatting should never crash the control
            return value;
        }
    };
    return NumericalField;
}(React.Component));
export { NumericalField };
/** An editable textfield control that only accepts whole integers. */
var IntegerField = /** @class */ (function (_super) {
    __extends(IntegerField, _super);
    function IntegerField() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IntegerField.prototype.isValid = function (stringValue) {
        return isInteger(Number(stringValue));
    };
    return IntegerField;
}(NumericalField));
export { IntegerField };
/** An editable textfield control that only accepts positive integers or zero. */
var NaturalNumberField = /** @class */ (function (_super) {
    __extends(NaturalNumberField, _super);
    function NaturalNumberField() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NaturalNumberField.prototype.isValid = function (stringValue) {
        return isInteger(Number(stringValue)) && Number(stringValue) >= 0;
    };
    return NaturalNumberField;
}(NumericalField));
export { NaturalNumberField };
// This is a shim for `Number.isInteger`, as it is not available in all browsers (IE11)
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isInteger(value) {
    if (typeof value !== 'number') {
        return false;
    }
    if (!isFinite(value) || Math.floor(value) !== value) {
        return false;
    }
    return true;
}
//# sourceMappingURL=NumericalField.js.map