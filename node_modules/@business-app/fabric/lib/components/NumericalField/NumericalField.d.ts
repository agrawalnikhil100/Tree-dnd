/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import * as React from 'react';
import { INumericalFieldProps } from './NumericalField.types';
export interface INumericalFieldState {
    /**
     * The current string form of the contents of the numerical field.
     */
    stringValue: string;
    /**
     * The current formatted string form of the contents of the numerical field.
     */
    formattedValue: string;
    /**
     * The last string value of the text field that could successfully be parsed as numerical.
     */
    lastValidValue: string;
    /**
     * The previously received value passed on props.
     */
    prevPropValue: number;
}
/**
 * An abstract textfield control that performs numerical validation on its contents,
 * resetting back to the last known valid value on invalid input.
 */
export declare abstract class NumericalField<Props extends INumericalFieldProps = INumericalFieldProps> extends React.Component<Props, INumericalFieldState> {
    private static readonly defaultFormatter;
    /**
     * Returns whether a string can be parsed as a valid value for this field.
     * This is meant to decide what type of "numerical" field the implementation supports.
     * @param stringValue The string value of the textfield to validate
     */
    protected abstract isValid(stringValue: string): boolean;
    constructor(props: Props);
    static getDerivedStateFromProps(nextProps: INumericalFieldProps, prevState: INumericalFieldState): INumericalFieldState;
    render(): JSX.Element;
    private static makeStateFromProps;
    private static formatAsNumericalString;
    private applyInput;
    private onBlur;
}
/** An editable textfield control that only accepts whole integers. */
export declare class IntegerField extends NumericalField {
    protected isValid(stringValue: string): boolean;
}
/** An editable textfield control that only accepts positive integers or zero. */
export declare class NaturalNumberField extends NumericalField {
    protected isValid(stringValue: string): boolean;
}
