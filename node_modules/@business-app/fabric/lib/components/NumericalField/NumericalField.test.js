/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import 'jest';
import * as React from 'react';
import * as ReactTestUtils from 'react-dom/test-utils';
import { simulateInput } from '../../utilities/tests';
import { IntegerField, NaturalNumberField } from './NumericalField';
describe('IntegerField', function () {
    var AdaptedIntegerField = function (props) { return (React.createElement(IntegerField, { value: props.value, onBlurred: props.onChanged })); };
    it('should allow integers to be input', function () {
        expect(simulateInput(AdaptedIntegerField, 321, '1234')).toEqual({
            hasBeenChanged: true,
            lastValue: 1234
        });
        expect(simulateInput(AdaptedIntegerField, 321, '-1234')).toEqual({
            hasBeenChanged: true,
            lastValue: -1234
        });
        expect(simulateInput(AdaptedIntegerField, 321, '-12.0')).toEqual({
            hasBeenChanged: true,
            lastValue: -12
        });
        expect(simulateInput(AdaptedIntegerField, 321, '0')).toEqual({
            hasBeenChanged: true,
            lastValue: 0
        });
    });
    it('should never emit onChanged if set to a non-integer value as its first action', function () {
        expect(simulateInput(AdaptedIntegerField, 321, 'hello')).toEqual({
            hasBeenChanged: false
        });
        expect(simulateInput(AdaptedIntegerField, 321, '12.34')).toEqual({
            hasBeenChanged: false
        });
    });
    it('should revert back to the previous value if non-integer input is given', function () {
        expect(simulateInput(AdaptedIntegerField, 321, '1234', 'hello')).toEqual({
            hasBeenChanged: true,
            lastValue: 1234
        });
        expect(simulateInput(AdaptedIntegerField, 321, '1', '12', '12.', '12.3', '12.34')).toEqual({
            hasBeenChanged: true,
            lastValue: 12
        });
    });
    it('should allow for comma-separated values', function () {
        expect(simulateInput(AdaptedIntegerField, 321, '123,456,789')).toEqual({
            hasBeenChanged: true,
            lastValue: 123456789
        });
    });
    it('should preserve 0 input', function () {
        var nfRef = React.createRef();
        ReactTestUtils.renderIntoDocument(React.createElement(NaturalNumberField, { ref: nfRef, value: 0 }));
        var nfElement = ReactTestUtils.findRenderedDOMComponentWithTag(nfRef.current, 'input');
        ReactTestUtils.Simulate.blur(nfElement);
        expect(nfRef.current.state.formattedValue).toEqual('0');
    });
});
describe('NaturalNumberField', function () {
    var AdaptedNaturalNumberField = function (props) { return (React.createElement(NaturalNumberField, { value: props.value, onBlurred: props.onChanged })); };
    it('should allow natural numbers to be input', function () {
        expect(simulateInput(AdaptedNaturalNumberField, 321, '1234')).toEqual({
            hasBeenChanged: true,
            lastValue: 1234
        });
        expect(simulateInput(AdaptedNaturalNumberField, 321, '12.0')).toEqual({
            hasBeenChanged: true,
            lastValue: 12
        });
        expect(simulateInput(AdaptedNaturalNumberField, 321, '0')).toEqual({
            hasBeenChanged: true,
            lastValue: 0
        });
    });
    it('should never emit onChanged if set to a non-natural value as its first action', function () {
        expect(simulateInput(AdaptedNaturalNumberField, 321, 'hello')).toEqual({
            hasBeenChanged: false
        });
        expect(simulateInput(AdaptedNaturalNumberField, 321, '12.34')).toEqual({
            hasBeenChanged: false
        });
        expect(simulateInput(AdaptedNaturalNumberField, 321, '-1234')).toEqual({
            hasBeenChanged: false
        });
    });
    it('should revert back to the previous value if non-natural input is given', function () {
        expect(simulateInput(AdaptedNaturalNumberField, 321, '1234', 'hello')).toEqual({
            hasBeenChanged: true,
            lastValue: 1234
        });
        expect(simulateInput(AdaptedNaturalNumberField, 321, '1', '12', '12.3', '12.34')).toEqual({
            hasBeenChanged: true,
            lastValue: 12
        });
        expect(simulateInput(AdaptedNaturalNumberField, 321, '1', '12', '-12', '-123')).toEqual({
            hasBeenChanged: true,
            lastValue: 12
        });
    });
    it('should allow for comma-separated values', function () {
        expect(simulateInput(AdaptedNaturalNumberField, 321, '123,456,789')).toEqual({
            hasBeenChanged: true,
            lastValue: 123456789
        });
    });
});
//# sourceMappingURL=NumericalField.test.js.map