/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import { mount } from 'enzyme';
import * as React from 'react';
import { DefaultButton } from '@fluentui/react/lib/Button';
import { SearchBox } from '@fluentui/react/lib/SearchBox';
import { TooltipHost } from '@fluentui/react/lib/Tooltip';
import { FilterSearchBox } from './';
var strings = { searchBoxPlaceholder: 'Search', filterButtonTooltipText: 'Tooltip text' };
var filters = [
    { key: 'a', text: 'A' },
    { key: 'b', text: 'B' }
];
function getState(wrapper) {
    var filterSearchChild = wrapper.childAt(0).childAt(0);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return filterSearchChild.instance().state;
}
function verifyState(wrapper, expectedValues) {
    var state = getState(wrapper);
    expect(state.isFilterMenuOpen).toEqual(expectedValues.isFilterMenuOpen);
    expect(state.isHovering).toEqual(expectedValues.isHovering);
    expect(state.isSearchBoxActive).toEqual(expectedValues.isSearchBoxActive);
}
describe('FilterSearchBox', function () {
    it('onSearchTextChange is called when typing in text box', function () {
        var onSearchTextChange = jest.fn();
        var wrapper = mount(React.createElement(FilterSearchBox, { strings: strings, searchText: 'test', onSearchTextChange: onSearchTextChange }));
        // Find the search box
        var input = wrapper.find('input');
        expect(input.length).toBe(1);
        var mockEventObject = { target: { value: 'a' } };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        input.props().onInput(mockEventObject);
        expect(onSearchTextChange).toBeCalledWith(mockEventObject, 'a');
        wrapper.unmount();
    });
    it('active states update as appropriate', function () {
        var wrapper = mount(React.createElement(FilterSearchBox, { strings: strings, searchText: 'test', onSearchTextChange: jest.fn(), filters: filters, selectedFilterKey: filters[0].key, onFilterChange: jest.fn(), styles: {
                root: 'test-root',
                searchBox: 'test-search',
                filterButtonRootInTooltipHost: 'test-filter-btn'
            } }));
        // Verify initial state.
        verifyState(wrapper, {
            isFilterMenuOpen: false,
            isHovering: false,
            isSearchBoxActive: false
        });
        // Find the search box and focus
        var searchBox = wrapper.find(SearchBox);
        expect(searchBox.length).toBe(1);
        searchBox.props().onFocus(null);
        verifyState(wrapper, {
            isFilterMenuOpen: false,
            isHovering: false,
            isSearchBoxActive: true
        });
        searchBox.props().onBlur(null);
        verifyState(wrapper, {
            isFilterMenuOpen: false,
            isHovering: false,
            isSearchBoxActive: false
        });
        // Hover over the container
        var root = wrapper.find('.test-root');
        root.props().onMouseEnter(null);
        verifyState(wrapper, {
            isFilterMenuOpen: false,
            isHovering: true,
            isSearchBoxActive: false
        });
        root.props().onMouseLeave(null);
        verifyState(wrapper, {
            isFilterMenuOpen: false,
            isHovering: false,
            isSearchBoxActive: false
        });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var mockClickEvent = { preventDefault: jest.fn(), stopPropagation: jest.fn(), nativeEvent: {} };
        // Open the context menu
        var filterButton = wrapper.find('.test-filter-btn');
        filterButton.props().onClick(mockClickEvent);
        verifyState(wrapper, {
            isFilterMenuOpen: true,
            isHovering: false,
            isSearchBoxActive: false
        });
        wrapper.unmount();
    });
    it('applies styles to tooltiphost and button as appropriate', function () {
        var testStrings = __assign({}, strings);
        var wrapper = mount(React.createElement(FilterSearchBox, { strings: testStrings, searchText: 'test', onSearchTextChange: jest.fn(), filters: filters, selectedFilterKey: filters[0].key, onFilterChange: jest.fn(), styles: {
                filterButtonRoot: 'filter-button-root',
                filterButtonRootInTooltipHost: 'filter-button-tooltip-root',
                tooltipHost: 'tooltip-host'
            } }));
        expect(wrapper.find('.filter-button-root').length).toBe(0);
        expect(wrapper.find('.filter-button-tooltip-root').length).toBe(1);
        expect(wrapper.find('.tooltip-host').length).toBe(1);
        testStrings.filterButtonTooltipText = null;
        wrapper.setProps({
            strings: testStrings
        });
        expect(wrapper.find('.filter-button-root').length).toBe(1);
        expect(wrapper.find('.filter-button-tooltip-root').length).toBe(0);
        expect(wrapper.find('.tooltip-host').length).toBe(0);
        wrapper.unmount();
    });
    it('applies styles to inputfield as appropriate', function () {
        var wrapper = mount(React.createElement(FilterSearchBox, { strings: strings, searchText: 'test', onSearchTextChange: jest.fn(), filters: filters, selectedFilterKey: filters[0].key, onFilterChange: jest.fn(), styles: {
                searchBoxField: 'search-box-field'
            } }));
        expect(wrapper.find('.search-box-field').length).toBe(1);
        expect(wrapper.find('.search-box-field').name()).toBe('input');
        wrapper.unmount();
    });
    it('testing defaultButton tooltip is not rendered when tooltipText does not exist', function () {
        var stringObject = { searchBoxPlaceholder: 'Search' };
        var wrapper = mount(React.createElement(FilterSearchBox, { strings: stringObject, searchText: 'test', onSearchTextChange: jest.fn(), filters: filters, selectedFilterKey: filters[0].key, styles: {
                filterButtonRoot: 'test-filter-btn'
            } }));
        // Verify tooltip is not rendered
        var tooltip = wrapper.find(TooltipHost);
        expect(tooltip.length).toBe(0);
        var filterButton = wrapper.find(DefaultButton);
        var filterButtonStyles = filterButton.props().styles.root;
        expect(filterButtonStyles[1]).toBeDefined();
        wrapper.unmount();
    });
    it('calls onFilterChange when a filter is clicked', function () {
        var onFilterChange = jest.fn();
        var wrapper = mount(React.createElement(FilterSearchBox, { strings: strings, searchText: 'test', onSearchTextChange: jest.fn(), filters: filters, selectedFilterKey: filters[0].key, onFilterChange: onFilterChange }));
        var filterButton = wrapper.find(DefaultButton);
        expect(filterButton.length).toEqual(1);
        filterButton.prop('menuProps').onItemClick(null, filters[1]);
        expect(onFilterChange).toBeCalledWith(filters[1].key);
        wrapper.unmount();
    });
    it('sets checked appropriately', function () {
        var wrapper = mount(React.createElement(FilterSearchBox, { strings: strings, searchText: 'test', onSearchTextChange: jest.fn(), filters: filters, selectedFilterKey: filters[0].key, onFilterChange: jest.fn() }));
        var filterButton = wrapper.find(DefaultButton);
        expect(filterButton.length).toEqual(1);
        var menuItems = filterButton.prop('menuProps').items;
        expect(menuItems.length).toEqual(filters.length);
        expect(menuItems[0].checked).toBeTruthy();
        expect(menuItems[1].checked).toBeFalsy();
        wrapper.setProps({
            selectedFilterKey: filters[1].key
        });
        filterButton = wrapper.find(DefaultButton);
        menuItems = filterButton.prop('menuProps').items;
        expect(menuItems.length).toEqual(filters.length);
        expect(menuItems[0].checked).toBeFalsy();
        expect(menuItems[1].checked).toBeTruthy();
        wrapper.unmount();
    });
    it('renders filterButtonIconName prop correctly', function () {
        var wrapper = mount(React.createElement(FilterSearchBox, { strings: strings, searchText: 'test', onSearchTextChange: jest.fn(), filters: filters, selectedFilterKey: filters[0].key, onFilterChange: jest.fn() }));
        var filterButton = wrapper.find(DefaultButton);
        expect(filterButton.length).toEqual(1);
        expect(filterButton.prop('text')).toEqual(filters[0].text);
        expect(filterButton.prop('iconProps')).toBeUndefined();
        wrapper.setProps({
            filterButtonIconName: 'Filter'
        });
        filterButton = wrapper.find(DefaultButton);
        expect(filterButton.length).toEqual(1);
        expect(filterButton.prop('text')).toEqual('');
        var iconProps = filterButton.prop('iconProps');
        expect(iconProps).toBeTruthy();
        expect(iconProps.iconName).toEqual('Filter');
        wrapper.unmount();
    });
    it('renders selected filter text correctly', function () {
        var wrapper = mount(React.createElement(FilterSearchBox, { strings: strings, searchText: 'test', onSearchTextChange: jest.fn(), filters: filters, selectedFilterKey: filters[0].key, onFilterChange: jest.fn() }));
        var filterButton = wrapper.find(DefaultButton);
        expect(filterButton.length).toEqual(1);
        expect(filterButton.prop('text')).toEqual(filters[0].text);
        wrapper.setProps({
            selectedFilterKey: filters[1].key
        });
        filterButton = wrapper.find(DefaultButton);
        expect(filterButton.length).toEqual(1);
        expect(filterButton.prop('text')).toEqual(filters[1].text);
    });
    it('consumes strings correctly', function () {
        var wrapper = mount(React.createElement(FilterSearchBox, { strings: {
                searchBoxPlaceholder: 'Search placeholder',
                searchBoxClearButtonTitle: 'Search clear button tooltip',
                filterButtonTooltipText: 'Filter button tooltip'
            }, searchText: '', onSearchTextChange: jest.fn(), filters: filters, selectedFilterKey: filters[0].key, onFilterChange: jest.fn() }));
        var searchbox = wrapper.find(SearchBox);
        expect(searchbox.length).toBe(1);
        expect(searchbox.prop('placeholder')).toBe('Search placeholder');
        expect(searchbox.prop('clearButtonProps').title).toBe('Search clear button tooltip');
        var tooltip = wrapper.find(TooltipHost);
        expect(tooltip.length).toBe(1);
        expect(tooltip.prop('content')).toBe('Filter button tooltip');
        wrapper.unmount();
    });
    it('focuses search box when focus is called on componentRef', function () {
        var ref = React.createRef();
        var wrapper = mount(React.createElement(FilterSearchBox, { strings: strings, searchText: 'test', onSearchTextChange: jest.fn(), filters: filters, selectedFilterKey: filters[0].key, onFilterChange: jest.fn(), componentRef: ref }));
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var instance = wrapper.childAt(0).childAt(0).instance();
        var focusFn = jest.fn();
        instance._searchBoxRef.current.focus = focusFn;
        expect(ref.current).toBeTruthy();
        expect(ref.current.focus).toBeDefined();
        ref.current.focus();
        expect(focusFn).toHaveBeenCalled();
        wrapper.unmount();
    });
    it('dissmisses menu on Button when dismissmenu is called on componentRef', function () {
        var ref = React.createRef();
        var wrapper = mount(React.createElement(FilterSearchBox, { strings: strings, searchText: 'test', onSearchTextChange: jest.fn(), filters: filters, selectedFilterKey: filters[0].key, onFilterChange: jest.fn(), componentRef: ref }));
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var instance = wrapper.childAt(0).childAt(0).instance();
        var dismissFn = jest.fn();
        instance._filterButtonRef.current.dismissMenu = dismissFn;
        expect(ref.current).toBeTruthy();
        expect(ref.current.dismissMenu).toBeDefined();
        ref.current.dismissMenu();
        expect(dismissFn).toHaveBeenCalled();
        wrapper.unmount();
    });
    it('does not render filter selection when less than two filters are provided', function () {
        var wrapper = mount(React.createElement(FilterSearchBox, { strings: strings, searchText: 'test', onSearchTextChange: jest.fn() }));
        var filterButton = wrapper.find(DefaultButton);
        expect(filterButton.length).toEqual(0);
        wrapper.setProps({
            filters: [filters[0]],
            selectedFilterKey: filters[0].key
        });
        filterButton = wrapper.find(DefaultButton);
        expect(filterButton.length).toEqual(0);
        wrapper.setProps({
            filters: filters
        });
        filterButton = wrapper.find(DefaultButton);
        expect(filterButton.length).toEqual(1);
    });
    it('Should pass searchText onto the Fabric SearchBox component', function () {
        var wrapper = mount(React.createElement(FilterSearchBox, { strings: strings, searchText: 'test', onSearchTextChange: jest.fn() }));
        expect(wrapper.find(SearchBox).props().value).toEqual('test');
        wrapper.setProps({ searchText: 'new' });
        expect(wrapper.find(SearchBox).props().value).toEqual('new');
    });
});
//# sourceMappingURL=FilterSearchBox.test.js.map