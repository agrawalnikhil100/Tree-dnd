/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import * as Enzyme from 'enzyme';
import 'jest';
import * as React from 'react';
import { ColorInput } from '.';
describe('Color input', function () {
    var label;
    var tooltipIconProps;
    var colorPickerProps;
    beforeEach(function () {
        label = 'Color Picker';
        colorPickerProps = {
            color: 'red'
        };
        tooltipIconProps = {
            iconProps: {
                iconName: 'Refresh'
            }
        };
    });
    it('should render the component', function () {
        var wrapper = Enzyme.mount(React.createElement(ColorInput, { label: label, colorPickerProps: colorPickerProps }));
        expect(wrapper.find('.ba-ColorInput').exists()).toBeTruthy();
        wrapper.unmount();
    });
    it('should render the color input label', function () {
        var wrapper = Enzyme.mount(React.createElement(ColorInput, { label: label, colorPickerProps: colorPickerProps }));
        expect(wrapper.find('.ba-ColorInput-label').exists()).toBeTruthy();
        wrapper.unmount();
    });
    it('should render the icon if tooltipIconProps provided', function () {
        var wrapper = Enzyme.mount(React.createElement(ColorInput, { label: label, colorPickerProps: colorPickerProps, tooltipIconProps: tooltipIconProps }));
        var container = wrapper.find('.ba-ColorInput-labelContainer');
        var imageButton = container.find('button i[data-icon-name="Refresh"]');
        expect(imageButton.length).toBe(1);
        wrapper.unmount();
    });
    it('should render the default "info" icon if tooltipIconProps not provided', function () {
        var wrapper = Enzyme.mount(React.createElement(ColorInput, { label: label, colorPickerProps: colorPickerProps }));
        var container = wrapper.find('.ba-ColorInput-labelContainer');
        var imageButton = container.find('button i[data-icon-name="Info"]');
        expect(imageButton.length).toBe(1);
        wrapper.unmount();
    });
    it('should render the color box', function () {
        var wrapper = Enzyme.mount(React.createElement(ColorInput, { label: label, colorPickerProps: colorPickerProps }));
        expect(wrapper.find('.ba-ColorInput-colorBox').exists()).toBeTruthy();
        wrapper.unmount();
    });
    it('should render the color input text field with value Red', function () {
        var wrapper = Enzyme.mount(React.createElement(ColorInput, { label: label, colorPickerProps: colorPickerProps }));
        expect(wrapper.find('.ba-ColorInput-container .ba-ColorInput-colorTextField input[value="red"]').exists()).toBeTruthy();
        wrapper.unmount();
    });
    it('should invoke the onBlur of color input text field', function () {
        var mockedOnBlur = jest.fn();
        var wrapper = Enzyme.mount(React.createElement(ColorInput, { label: label, colorPickerProps: colorPickerProps, colorTextFieldProps: {
                onBlur: mockedOnBlur
            } }));
        var inputElement = wrapper.find('.ba-ColorInput-colorTextField input');
        var color = '#a52a2a';
        inputElement.simulate('focus');
        inputElement.simulate('input', { target: { color: color } });
        expect(inputElement).toHaveLength(1);
        inputElement.simulate('blur');
        expect(mockedOnBlur).toHaveBeenCalledTimes(1);
        wrapper.unmount();
    });
    it('should open the color picker when ShowColorPicker prop set to true', function () {
        var wrapper = Enzyme.mount(React.createElement(ColorInput, { label: label, colorPickerProps: colorPickerProps, showColorPicker: true }));
        expect(wrapper.find('.ba-ColorInput-colorPicker').exists()).toBeTruthy();
        wrapper.unmount();
    });
    it('should not open the color picker when ShowColorPicker prop set to false', function () {
        var wrapper = Enzyme.mount(React.createElement(ColorInput, { label: label, colorPickerProps: colorPickerProps, showColorPicker: false }));
        expect(wrapper.find('.ba-ColorInput-colorPicker').exists()).toBeFalsy();
        wrapper.unmount();
    });
    it('should open the color picker on color box click', function () {
        var wrapper = Enzyme.mount(React.createElement(ColorInput, { label: label, colorPickerProps: colorPickerProps }));
        var colorBoxButton = wrapper.find('button.ba-ColorInput-colorBox');
        expect(colorBoxButton).toHaveLength(1);
        colorBoxButton.simulate('click');
        expect(wrapper.find('.ba-ColorInput-colorPicker').exists()).toBeTruthy();
        wrapper.unmount();
    });
});
//# sourceMappingURL=ColorInput.test.js.map