/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __extends } from "tslib";
import { Icon } from '@fluentui/react/lib/Icon';
import { mergeStyles } from '@fluentui/react/lib/Styling';
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import { css } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { StepStatus } from '../StepStatus';
var getClassNames = classNamesFunction();
var WizardProgressBase = /** @class */ (function (_super) {
    __extends(WizardProgressBase, _super);
    function WizardProgressBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isWizardProgressCollapsedOnSmallScreens: true
        };
        _this.onToggleClicked = function () {
            _this.setState({
                isWizardProgressCollapsedOnSmallScreens: !_this.state.isWizardProgressCollapsedOnSmallScreens
            });
        };
        return _this;
    }
    WizardProgressBase.prototype.render = function () {
        var _this = this;
        var _a = this.props, styles = _a.styles, currentIndex = _a.currentIndex, stepStatuses = _a.stepStatuses, theme = _a.theme, className = _a.className, expandButtonLabel = _a.expandButtonLabel, collapseButtonLabel = _a.collapseButtonLabel, onProgressStepClick = _a.onProgressStepClick;
        var classNames = getClassNames(styles, {
            theme: theme,
            className: className
        });
        return (React.createElement("nav", { className: css(classNames.root, this.state.isWizardProgressCollapsedOnSmallScreens && 'is-collapsed') },
            React.createElement("ol", { className: classNames.list }, this.props.stepNames.map(function (stepName, stepIndex) { return (React.createElement("li", { key: stepName, className: classNames.itemWrapper },
                React.createElement("div", { className: _this.getStepClassName(stepIndex, currentIndex, classNames), "aria-label": stepName, "aria-describedby": "WizardProgress-step" + stepIndex + "-description WizardProgress-step" + stepIndex + "-summary-container", 
                    // eslint-disable-next-line react/jsx-no-bind
                    onClick: onProgressStepClick ? onProgressStepClick.bind(_this, stepIndex) : undefined, style: { cursor: onProgressStepClick ? 'pointer' : undefined }, role: onProgressStepClick ? 'button' : undefined, tabIndex: onProgressStepClick ? 0 : undefined },
                    React.createElement(Icon, { iconName: getIconForStepStatus(stepStatuses[stepIndex]), className: _this.getIconClassName(stepIndex, classNames) }),
                    React.createElement("span", { className: classNames.label }, stepName),
                    React.createElement("div", { id: "WizardProgress-step" + stepIndex + "-summary-container" }, _this.props.stepSummaries[stepIndex].map(function (summary, i) { return (React.createElement("div", { key: i, className: classNames.summary }, summary)); }))),
                React.createElement("div", { className: classNames.visuallyHidden, id: "WizardProgress-step" + stepIndex + "-description" }, _this.props.computeAriaDescription(stepIndex)))); })),
            React.createElement("button", { className: classNames.toggle, onClick: this.onToggleClicked, "aria-expanded": !this.state.isWizardProgressCollapsedOnSmallScreens, "aria-label": this.state.isWizardProgressCollapsedOnSmallScreens ? expandButtonLabel : collapseButtonLabel, title: this.state.isWizardProgressCollapsedOnSmallScreens ? expandButtonLabel : collapseButtonLabel },
                React.createElement(Icon, { iconName: "Cancel" }))));
    };
    WizardProgressBase.prototype.getIconClassName = function (stepIndex, classNames) {
        var _a = this.props, stepStatuses = _a.stepStatuses, currentIndex = _a.currentIndex;
        var status = stepStatuses[stepIndex];
        switch (status) {
            case StepStatus.Valid:
                return classNames.validIcon;
            case StepStatus.Warning:
                return classNames.warningIcon;
            case StepStatus.Error:
                return classNames.errorIcon;
            case StepStatus.Empty:
                if (stepIndex === currentIndex) {
                    return classNames.currentEmptyIcon;
                }
                else {
                    return classNames.emptyIcon;
                }
            default:
                break;
        }
        return '';
    };
    WizardProgressBase.prototype.getStepClassName = function (stepIndex, currentIndex, classNames) {
        var className = '';
        if (stepIndex < currentIndex) {
            className = classNames.passedStep;
        }
        else if (stepIndex === currentIndex) {
            className = classNames.currentStep;
        }
        else if (stepIndex > currentIndex) {
            className = classNames.futureStep;
        }
        if (stepIndex === this.props.stepNames.length - 1) {
            className = mergeStyles(className, classNames.lastStep);
        }
        return className;
    };
    return WizardProgressBase;
}(React.Component));
export { WizardProgressBase };
function getIconForStepStatus(stepStatus) {
    switch (stepStatus) {
        case StepStatus.Valid:
            return 'CheckMark';
        case StepStatus.Warning:
            return 'WarningSolid';
        case StepStatus.Error:
            return 'StatusErrorFull';
        case StepStatus.Empty:
            return '';
        default:
            throw new Error('Not implemented');
    }
}
//# sourceMappingURL=WizardProgress.base.js.map