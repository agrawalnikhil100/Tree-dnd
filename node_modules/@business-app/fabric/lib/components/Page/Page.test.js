/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import * as Enzyme from 'enzyme';
import 'jest';
import { Overlay } from '@fluentui/react/lib/Overlay';
import { Spinner, SpinnerSize } from '@fluentui/react/lib/Spinner';
import * as React from 'react';
import { PageBase } from './Page.base';
import { getStyles } from './Page.styles';
describe('Page Header with Env', function () {
    var props = {
        styles: getStyles
    };
    it('should render the component without any subitems', function () {
        var wrapper = Enzyme.mount(React.createElement(PageBase, __assign({}, props)));
        expect(wrapper).toMatchSnapshot();
    });
    it('should render the component with the wrapper class', function () {
        var testProps = __assign(__assign({}, props), { className: 'test-class' });
        var wrapper = Enzyme.shallow(React.createElement(PageBase, __assign({}, testProps)));
        expect(wrapper.find('.test-class').type()).toBe('section');
    });
    it('should optionally render a header', function () {
        var testProps = __assign(__assign({}, props), { renderHeader: function () { return React.createElement("div", { className: "test-class" }); } });
        var withHeader = Enzyme.shallow(React.createElement(PageBase, __assign({}, testProps)));
        expect(withHeader.find('.test-class').exists()).toBe(true);
        var withoutHeader = Enzyme.shallow(React.createElement(PageBase, __assign({}, props)));
        expect(withoutHeader.find('header').exists()).toBe(false);
    });
    it('should optionally render a footer', function () {
        var testProps = __assign(__assign({}, props), { renderFooter: function () { return React.createElement("div", { className: "test-class" }); } });
        var withFooter = Enzyme.shallow(React.createElement(PageBase, __assign({}, testProps)));
        expect(withFooter.find('footer').exists()).toBe(true);
        expect(withFooter.find('footer').find('.test-class').exists()).toBe(true);
        var withoutFooter = Enzyme.shallow(React.createElement(PageBase, __assign({}, props)));
        expect(withoutFooter.find('footer').exists()).toBe(false);
    });
    it('should optionally render a loading overlay', function () {
        var testProps = __assign(__assign({}, props), { showOverlay: true, spinnerProps: { size: SpinnerSize.large } });
        var withFooter = Enzyme.shallow(React.createElement(PageBase, __assign({}, testProps)));
        expect(withFooter.find(Overlay).find(Spinner).length).toBe(1);
    });
    it('should optionally render body contents', function () {
        var testProps = __assign(__assign({}, props), { renderBody: function () { return React.createElement("div", null, "Test"); } });
        var withBody = Enzyme.mount(React.createElement(PageBase, __assign({}, testProps)));
        expect(withBody).toMatchSnapshot();
    });
});
//# sourceMappingURL=Page.test.js.map