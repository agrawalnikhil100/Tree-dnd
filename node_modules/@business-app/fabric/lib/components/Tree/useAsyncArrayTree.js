/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __awaiter, __generator, __rest, __spreadArrays } from "tslib";
import * as React from 'react';
import { useArrayTree } from './useArrayTree';
export function useAsyncArrayTree(topLevelItems, onLoadChildren, loadingSubItemFactory, loadMoreSubItemFactory, errorSubItemFactory) {
    var _this = this;
    if (topLevelItems === void 0) { topLevelItems = []; }
    var _a = useArrayTree(topLevelItems), appendChildrenTo = _a.appendChildrenTo, remove = _a.remove, replace = _a.replace, refresh = _a.refresh, rest = __rest(_a, ["appendChildrenTo", "remove", "replace", "refresh"]);
    var augmentChildren = React.useCallback(function (item, children) {
        return children.map(function (child) {
            var augmentedItem = child;
            augmentedItem.level = item !== null ? item.level + 1 : 0;
            augmentedItem.isFolder = child.isFolder === undefined ? true : child.isFolder;
            augmentedItem.isLoading = false;
            augmentedItem.hasLoaded = false;
            augmentedItem.canLoadMore = false;
            augmentedItem.loadingError = null;
            return augmentedItem;
        });
    }, []);
    var load = React.useCallback(function (item, continuationToken) { return __awaiter(_this, void 0, void 0, function () {
        var loadingSubItem, _a, children, newContinuationToken_1, loadMoreSubItem_1, e_1, errorSubItem_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (item !== null && (item.isLoading || (item.hasLoaded && !item.canLoadMore && !item.loadingError))) {
                        throw new Error('item');
                    }
                    if (item !== null && !item.canLoadMore && continuationToken) {
                        throw new Error('item');
                    }
                    if (item !== null) {
                        item.isLoading = true;
                        item.loadingError = null;
                    }
                    loadingSubItem = loadingSubItemFactory
                        ? loadingSubItemFactory(item)
                        : null;
                    if (loadingSubItem !== null) {
                        appendChildrenTo(item, [loadingSubItem]);
                    }
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, onLoadChildren(item, continuationToken)];
                case 2:
                    _a = _b.sent(), children = _a[0], newContinuationToken_1 = _a[1];
                    if (item !== null) {
                        item.isLoading = false;
                        item.hasLoaded = true;
                        item.canLoadMore = newContinuationToken_1 !== null;
                        item.loadingError = null;
                    }
                    if (loadingSubItem !== null) {
                        remove(loadingSubItem);
                    }
                    // If the item has no children, mark it as a leaf.
                    if (children.length === 0) {
                        item.isFolder = false;
                        refresh();
                        return [2 /*return*/];
                    }
                    loadMoreSubItem_1 = newContinuationToken_1 !== null && loadMoreSubItemFactory !== undefined
                        ? loadMoreSubItemFactory(item, function () {
                            remove(loadMoreSubItem_1);
                            load(item, newContinuationToken_1);
                        })
                        : null;
                    appendChildrenTo(item, __spreadArrays(augmentChildren(item, children), (loadMoreSubItem_1 !== null ? [loadMoreSubItem_1] : [])));
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _b.sent();
                    if (item !== null) {
                        item.isLoading = false;
                        item.hasLoaded = true;
                        item.loadingError = e_1;
                    }
                    errorSubItem_1 = errorSubItemFactory
                        ? errorSubItemFactory(item, function () {
                            remove(errorSubItem_1);
                            load(item, continuationToken);
                        })
                        : null;
                    if (loadingSubItem !== null && errorSubItem_1 !== null) {
                        replace(loadingSubItem, errorSubItem_1);
                    }
                    else if (loadingSubItem !== null) {
                        remove(loadingSubItem);
                    }
                    else if (errorSubItem_1 !== null) {
                        appendChildrenTo(item, [errorSubItem_1]);
                    }
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); }, [onLoadChildren, appendChildrenTo, remove, refresh]);
    var loadMore = React.useCallback(function (item, continuationToken) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (continuationToken === '') {
                throw new Error('continuationToken');
            }
            load(item, continuationToken);
            return [2 /*return*/];
        });
    }); }, [load]);
    return __assign({ load: load,
        loadMore: loadMore,
        remove: remove,
        replace: replace,
        appendChildrenTo: appendChildrenTo,
        refresh: refresh }, rest);
}
//# sourceMappingURL=useAsyncArrayTree.js.map