/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { BaseComponent } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { IContextualMenuItem, IContextualMenuProps } from './ContextualMenu.types';
export interface IContextualMenuState {
    displayItems: IContextualMenuItem[];
    loadingTimeout?: number;
}
export declare class ContextualMenu extends BaseComponent<IContextualMenuProps, IContextualMenuState> {
    private static _activeMenu?;
    /**
     * Set this BaseComponent._skipComponentRefResolution to true, bypassing resolution of componentRef.
     */
    protected _skipComponentRefResolution: boolean;
    private _activeElement?;
    private _targetElement?;
    private _timers?;
    /** Timeout used to track the closeTimeout on mouseLeave. */
    private closeTimeout?;
    private static _getStateFromProps;
    private static _arrangeItems;
    private static _sortItems;
    private static _removeConsecutiveSeparators;
    constructor(props: IContextualMenuProps);
    static getDerivedStateFromProps(nextProps: IContextualMenuProps, prevState: IContextualMenuState): IContextualMenuState;
    render(): JSX.Element;
    componentDidMount(): void;
    componentWillUnmount(): void;
    contains(element: HTMLElement | null): boolean;
    dismiss(reason?: React.MouseEvent | React.KeyboardEvent, dismissAll?: boolean): void;
    private _clearTimeout;
    private _onDismiss;
    private _setTimeout;
}
