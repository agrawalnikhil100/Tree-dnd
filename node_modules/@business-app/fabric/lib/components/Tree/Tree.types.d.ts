/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { IContextualMenuItem, IContextualMenuProps } from '@fluentui/react/lib/ContextualMenu';
import { IIconProps } from '@fluentui/react/lib/Icon';
import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import { IRefObject, IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
export declare enum SelectionType {
    Single = 0,
    Toggle = 1,
    Block = 2
}
export interface ITreeItem {
    label: string;
    key: string;
    level: number;
    setSize?: number;
    indexInParent?: number;
    isFolder?: boolean;
    ariaLabel?: string;
    /**
     *  An aria label to use for the menu button for this item, if it has one.
     */
    moreCommandsAriaLabel?: string;
    disableSelection?: boolean;
    disableFocus?: boolean;
    iconProps?: IIconProps;
}
export interface ITree {
    /**
     * Sets focus to the first tree item.
     */
    focus(): void;
}
/**
 * The props of the Tree component.
 */
export interface ITreeProps<T extends ITreeItem> {
    /**
     * Optional callback to access the Tree interface. Use this instead of ref for accessing
     * the public methods and properties of the component.
     */
    componentRef?: IRefObject<ITree>;
    /**
     * Call to provide customized styling that will layer on top of the variant rules.
     */
    styles?: IStyleFunctionOrObject<ITreeStyleProps, ITreeStyles>;
    /**
     * Theme provided by High-Order Component.
     */
    theme?: ITheme;
    /**
     * Additional css class to apply to the Tree
     * @defaultvalue undefined
     */
    className?: string;
    /**
     * The height of an individual node. This number includes any border the node may have.
     * @defaultvalue 32
     */
    nodeHeight?: number;
    /**
     * The width (unless overridden by custom styles) of the collapse/expand button
     * and of the icon (if iconProps are provided for the item).
     * @defaultvalue 26
     */
    iconWidth?: number;
    /**
     * The items the tree should render.
     */
    items: T[];
    /**
     * The keys of the items to be selected initially.
     * This prop will not be used by the Tree if selectedItemKeys is provided.
     */
    initialSelectedItemKeys?: Set<string>;
    /**
     * The keys of the selected items.
     * Providing this prop will make item selected controlled by the parent.
     * If this prop is not provided, the tree will manage selection state itself automatically.
     * See initialSelectedItemKeys if you just want to provide an initial selection but leave selection uncontrolled.
     */
    selectedItemKeys?: Set<string>;
    /**
     * The keys of the items to be expanded initially.
     * This prop will not be used by the Tree if expandedItemKeys is provided.
     */
    initialExpandedItemKeys?: Set<string>;
    /**
     * The keys of the expanded items.
     * Providing this prop will make item expansion controlled by the parent.
     * If this prop is not provided, the tree will manage expansion state itself automatically.
     * See initialExpandedItemKeys if you just want to provide an initial expansion but leave expansion uncontrolled.
     */
    expandedItemKeys?: Set<string>;
    /**
     * Optional. Override the various Fabric icons the Tree uses.
     */
    icons?: {
        /** The Fabric icon to use for the contextual menu button. */
        more?: string;
        /**
         * The Fabric icon to use for the collapsed arrow.
         * There is no option for the expanded arrow
         * because the collapsed arrow will be animated and rotated.
         */
        collapsedArrow?: string;
    };
    strings: ITreeStrings;
    /**
     * Allows the use of a custom scroll view which can be used to add custom scrollbars.
     */
    scrollView?: React.ComponentType<{
        children?: React.ReactNode;
        className?: string;
    }>;
    /**
     * The callback to call when an item is selected.
     * @param item The information of the item which was just selected.
     * @param type The type of selection this is.
     * @param isSelected Whether the item was selected prior to this interaction.
     * @param isExpanded Whether the item was expanded prior to this interaction.
     * @param index The index of this item in the visible tree nodes (collapsed/hidden nodes not being counted).
     */
    onItemSelected?: (item: T, type: SelectionType, isSelected: boolean, isExpanded: boolean, index: number) => void;
    /**
     * The callback to call when an item is expanded.
     */
    onItemExpand?: (item: T, index: number) => void;
    /**
     * The callback to call when an item is collapsed.
     */
    onItemCollapse?: (item: T, index: number) => void;
    /**
     * The callback to call when an item is double clicked.
     */
    onItemDoubleClicked?: (item: T, isSelected: boolean, isExpanded: boolean, index: number) => void;
    /**
     * The callback to call when an item is interacted with via the keyboard.
     */
    onItemKeyDown?(item: T, isSelected: boolean, isExpanded: boolean, index: number, event: React.KeyboardEvent<HTMLElement>): void;
    /**
     * An optional callback which allows you to independently style specific tree nodes.
     * Will be called for every tree node.
     * @param item The tree node information for the current tree node we are styling.
     * @param isSelected Whether the current node is selected.
     * @param isExpanded Whether the current node is expanded.
     * @param index The index (considering only visible nodes) for the current tree node we are styling.
     */
    getItemStyle?(item: T, isSelected: boolean, isExpanded: boolean, index: number): IStyle;
    /**
     * An optional callback which allows you to render a custom node container.
     * @param item The tree node information for the current tree node we are styling.
     * @param isSelected Whether the current node is selected.
     * @param isExpanded Whether the current node is expanded.
     * @param index The index (considering only visible nodes) for the current tree node.
     * @param defaultItemRender The default render function for the node.
     */
    onRenderItemContainer?(item: T, isSelected: boolean, isExpanded: boolean, index: number, defaultItemRender: () => JSX.Element): JSX.Element;
    /**
     * An optional callback which allows you to render a custom element for the node's label.
     * @param item The tree node information for the current tree node we are styling.
     * @param isSelected Whether the current node is selected.
     * @param isExpanded Whether the current node is expanded.
     * @param index The index (considering only visible nodes) for the current tree node.
     * @param defaultRender The default render function for the label.
     */
    onRenderItemLabel?(item: T, isSelected: boolean, isExpanded: boolean, index: number, defaultRender: () => JSX.Element): JSX.Element;
    /**
     * An optional callback which allows you to render a custom element for the content of the node's label.
     * @param item The tree node information for the current tree node we are styling.
     * @param isSelected Whether the current node is selected.
     * @param isExpanded Whether the current node is expanded.
     * @param index The index (considering only visible nodes) for the current tree node.
     * @param defaultRender The default render function for the content of the label.
     */
    onRenderItemLabelContent?(item: T, isSelected: boolean, isExpanded: boolean, index: number, defaultRender: () => JSX.Element): JSX.Element;
    /**
     * An optional callback which allows you to render a custom contextual menu.
     * @param item The tree node information for the node the menu is opened on.
     * @param isSelected Whether the node the menu is opened on is selected.
     * @param isNodeExpanded Whether the node the menu is opened on is expanded.
     * @param index The index (considering only visible nodes) for the tree node which the menu is open on.
     * @param menuProps These are the default props which would be used when not custom rendering. Feel free to override.
     */
    onRenderContextualMenu?(item: T, isSelected: boolean, isNodeExpanded: boolean, index: number, menuProps: IContextualMenuProps): JSX.Element;
    /**
     * An optional callback which allows you to render a custom expand icon.
     * @param item The tree node information for the node the menu is opened on.
     * @param isSelected Whether the node the menu is opened on is selected.
     * @param isNodeExpanded Whether the node the menu is opened on is expanded.
     * @param index The index (considering only visible nodes) for the tree node which the menu is open on.
     * @param defaultRender The default render function for the icon.
     */
    onRenderExpandIcon?(item: T, isSelected: boolean, isNodeExpanded: boolean, index: number, defaultRender: () => JSX.Element): JSX.Element;
    /**
     * An optional callback to determine whether a particular item can be collapsed (to hide its children).
     */
    getItemIsCollapsible?(item: T): boolean;
    /**
     * An optional callback to determine whether the contextual menu
     * and double click functionality should be disabled for a given item.
     *
     * For removing a contextual menu button from an item entirely, see getItemHasCommands instead.
     *
     * For disabling selection, see disableSelection on the ITreeItem.
     */
    getItemIsDisabled?(item: T): boolean;
    /** An optional callback to determine whether to show the contextual menu button for an item. */
    getItemHasCommands?(item: T): boolean;
    /**
     * An optional callback to get the contextual menu options for an item.
     * The item will have no menu if this callback is not provided.
     */
    getItemCommands?(item: T): IContextualMenuItem[];
}
export declare type ITreeStyleProps = Required<Pick<ITreeProps<ITreeItem>, 'theme' | 'nodeHeight' | 'iconWidth'>> & Pick<ITreeProps<ITreeItem>, 'className'>;
export interface ITreeStyles {
    /**
     * Style for the root element.
     */
    root: IStyle;
    /**
     * Style for the inner root element.
     */
    innerRoot: IStyle;
    /**
     * Style to apply to the underlying Fabric focus zone.
     */
    focusZone: IStyle;
    /**
     * Style to apply to scroll view element (whether custom or not).
     */
    scrollView: IStyle;
    /**
     * Style to apply to the underlying Fabric list.
     */
    list: IStyle;
    /**
     * Style to apply to the item (whether or not it's selected).
     */
    item: IStyle;
    /**
     * Style to apply to the item when it is selectable.
     */
    itemIsSelectable: IStyle;
    /**
     * Style to apply to the item when it is not selectable.
     */
    itemIsNotSelectable: IStyle;
    /**
     * Style to apply to the item when it's selected.
     */
    itemIsSelected: IStyle;
    /**
     * Style to apply to the item when it's not selected.
     */
    itemIsNotSelected: IStyle;
    /**
     * Style to apply to the inner item label that will be rendered
     * by default when onRenderItemLabel isn't provided.
     */
    itemLabel: IStyle;
    /**
     * Style to apply to the collapse/expand button regardless of whether it's enabled.
     */
    expandIconButton: IStyle;
    /**
     * Style to apply to the collapse/expand button whenever it's enabled.
     */
    expandIconButtonEnabled: IStyle;
    /**
     * Style to apply to the collapse/expand button whenever it's disabled.
     */
    expandIconButtonDisabled: IStyle;
    /**
     * Style to apply to the collapse/expand icon whenever it's present (whether expanded or not, etc).
     */
    expandIcon: IStyle;
    /**
     * Style to apply to the collapse/expand icon whenever it's expanded.
     */
    expandIconExpanded: IStyle;
    /**
     * Style to apply to the element that gets rendered when a node doesn't have a collapse/expand icon.
     */
    noExpandIcon: IStyle;
    /**
     * Style to apply to the spacing element that handles indenting the nested tree nodes.
     */
    levelIndentSpacer: IStyle;
    /**
     * Style to apply to the contextual menu button.
     */
    menuButton: IStyle;
    /**
     * Style to apply to the contextual menu button when the row is selected and the menu is closed.
     */
    menuButtonSelectedRowClosedMenu: IStyle;
    /**
     * Style to apply to the contextual menu button when the row is selected and the menu is open.
     */
    menuButtonSelectedRowOpenMenu: IStyle;
    /**
     * Style to apply to the contextual menu button when the row is not selected and the menu is closed.
     */
    menuButtonUnselectedRowClosedMenu: IStyle;
    /**
     * Style to apply to the contextual menu button when the row is not selected and the menu is open.
     */
    menuButtonUnselectedRowOpenMenu: IStyle;
    /**
     * Style to add to the contextual menu button when the button is disabled.
     */
    menuButtonDisabled: IStyle;
    /**
     * Style to add to the item icon container.
     */
    itemIconContainer: IStyle;
    /**
     * Style to add to the item icon container.
     */
    itemIcon: IStyle;
    /**
     * Style to add to element that will be rendered instead of the item icon,
     * if no iconProps are provided for the item.
     */
    noItemIcon: IStyle;
}
export interface ITreeStrings {
    /**
     * The aria-label to apply to the Fabric list component which comprises the tree.
     */
    listAriaLabel: string;
    /**
     * The aria-label to apply to the contextual menu button.
     */
    moreCommandsAriaLabel?: string;
}
