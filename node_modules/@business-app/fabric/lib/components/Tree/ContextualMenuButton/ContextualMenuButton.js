/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __extends } from "tslib";
import { Icon } from '@fluentui/react/lib/Icon';
import { mergeStyles } from '@fluentui/react/lib/Styling';
import { getId } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
var ContextualMenuButton = /** @class */ (function (_super) {
    __extends(ContextualMenuButton, _super);
    function ContextualMenuButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._button = React.createRef();
        _this._contextMenuExpandedId = getId('ba-Tree-ContextMenu-Expanded');
        _this._doubleClickEater = function (ev) {
            ev.stopPropagation();
            ev.preventDefault();
        };
        return _this;
    }
    ContextualMenuButton.prototype.render = function () {
        var _a = this.props, ariaLabel = _a.ariaLabel, className = _a.className, directionalHint = _a.directionalHint, disabled = _a.disabled, iconProps = _a.iconProps, isOpen = _a.isOpen, items = _a.items, menuClosedStyle = _a.menuClosedStyle, menuDisabledStyle = _a.menuDisabledStyle, menuOpenStyle = _a.menuOpenStyle, onClick = _a.onClick, onDismiss = _a.onDismiss, onRenderContextualMenu = _a.onRenderContextualMenu;
        var buttonStyle = mergeStyles(className, isOpen ? menuOpenStyle : menuClosedStyle, disabled ? menuDisabledStyle : undefined);
        return (React.createElement(React.Fragment, null,
            React.createElement("button", { ref: this._button, className: buttonStyle, onClick: onClick, onContextMenu: onClick, onDoubleClick: this._doubleClickEater, disabled: disabled, "aria-haspopup": true, "aria-label": ariaLabel, "aria-expanded": isOpen, "aria-controls": isOpen ? this._contextMenuExpandedId : null, "data-is-focusable": false },
                React.createElement(Icon, __assign({}, iconProps))),
            isOpen &&
                items &&
                this._button.current &&
                onRenderContextualMenu({
                    items: items,
                    onDismiss: onDismiss,
                    shouldFocusOnMount: true,
                    gapSpace: 0,
                    directionalHint: directionalHint,
                    isBeakVisible: false,
                    ariaLabel: ariaLabel,
                    target: this._button.current,
                    id: this._contextMenuExpandedId
                })));
    };
    return ContextualMenuButton;
}(React.Component));
export { ContextualMenuButton };
//# sourceMappingURL=ContextualMenuButton.js.map