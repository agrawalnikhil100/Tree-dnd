/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __rest } from "tslib";
import { Shimmer, ShimmerElementType } from '@fluentui/react/lib/Shimmer';
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { Tree } from './Tree';
import { defaultIconWidth } from './Tree.base';
var getClassNames = classNamesFunction();
export var ShimmeredTree = function (props) {
    var onRenderItemLabelContent = props.onRenderItemLabelContent, shimmerProps = props.shimmerProps, ShimmerAs = props.shimmerAs, styles = props.styles, rest = __rest(props, ["onRenderItemLabelContent", "shimmerProps", "shimmerAs", "styles"]);
    var theme = props.theme, className = props.className, iconWidth = props.iconWidth, nodeHeight = props.nodeHeight;
    var classNames = React.useMemo(function () {
        return getClassNames(styles, {
            nodeHeight: nodeHeight,
            iconWidth: iconWidth,
            className: className,
            theme: theme
        });
    }, [styles, theme, className, iconWidth, nodeHeight]);
    var ShimmerType = Shimmer;
    if (ShimmerAs !== undefined) {
        // eslint-disable-next-line @typescript-eslint/no-shadow
        ShimmerType = function (props) { return React.createElement(ShimmerAs, __assign({}, props, { defaultRender: Shimmer })); };
    }
    var onTreeRenderItemLabelContent = React.useCallback(function (item, isSelected, isExpanded, index, defaultRender) {
        var shimmerRender = function () {
            return (React.createElement(ShimmerType, __assign({ styles: classNames.subComponentStyles.shimmer, shimmerElements: [
                    { type: ShimmerElementType.line, width: iconWidth || defaultIconWidth, height: nodeHeight },
                    { type: ShimmerElementType.gap, width: 4, height: nodeHeight },
                    { type: ShimmerElementType.line, height: nodeHeight }
                ] }, shimmerProps)));
        };
        if (onRenderItemLabelContent !== undefined) {
            return onRenderItemLabelContent(item, isSelected, isExpanded, index, shimmerRender);
        }
        if (item.isShimmered === true) {
            return shimmerRender();
        }
        else {
            return defaultRender();
        }
    }, [shimmerProps, ShimmerType, iconWidth, nodeHeight, classNames, onRenderItemLabelContent]);
    return React.createElement(Tree, __assign({ styles: classNames }, rest, { onRenderItemLabelContent: onTreeRenderItemLabelContent }));
};
//# sourceMappingURL=ShimmeredTree.js.map