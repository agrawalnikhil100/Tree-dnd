/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import { mount } from 'enzyme';
import * as React from 'react';
import { ContextualMenuButton } from '../ContextualMenuButton/ContextualMenuButton';
import { ExpandIcon } from '../ExpandIcon/ExpandIcon';
import { TreeAutomationSelectors } from '../Tree.selectors';
import { TreeNode } from './TreeNode';
function getStateOf(wrapper) {
    var instance = wrapper.instance();
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return instance.state;
}
function getDefaultProps(overrides) {
    return __assign({ itemKey: 'key', label: 'label', ariaLabel: 'aria label', iconProps: { iconName: 'Mail' }, isFolder: false, isSelectionDisabled: false, isDisabled: false, level: 0, setSize: 1, indexInParent: 0, isExpanded: false, isSelected: false, isFocusable: true, isCollapsible: true, hasCommands: true, moreCommandsAriaLabel: 'more commands aria label', moreIcon: 'More', collapsedArrowIcon: 'ChevronRight', 
        // Styles
        itemStyle: '', itemLabelStyle: '', indentSpacerStyle: '', menuButtonStyle: '', menuButtonOpenStyle: '', menuButtonClosedStyle: '', menuButtonDisabledStyle: '', expandIconButtonStyle: '', expandIconStyle: '', noExpandIconStyle: '', itemIconContainerStyle: '', itemIconStyle: '', noItemIconStyle: '', onSelected: function (itemKey, type) {
            /* no-op */
        }, onDoubleClicked: function (itemKey) {
            /* no-op */
        }, onExpandToggled: function (itemKey) {
            /* no-op */
        }, onItemKeyDown: function (itemKey, event) {
            /* no-op */
        }, getCommands: function (itemKey) { return [
            {
                key: 'New',
                text: 'New',
                iconProps: { iconName: 'Add' }
            },
            {
                key: 'Mail',
                text: 'Mail',
                iconProps: { iconName: 'Mail' }
            }
        ]; } }, overrides);
}
describe('TreeNode', function () {
    it('getItemIsDisabled', function () {
        var onDoubleClicked = jest.fn();
        var props = getDefaultProps({
            isDisabled: true,
            onDoubleClicked: onDoubleClicked
        });
        var wrapper = mount(React.createElement(TreeNode, __assign({}, props)));
        // Disabled tests
        expect(wrapper.find(ContextualMenuButton).at(0).props().disabled).toEqual(true);
        wrapper.simulate('contextmenu');
        expect(getStateOf(wrapper).isContextualMenuOpen).toEqual(false);
        wrapper.simulate('doubleclick');
        expect(onDoubleClicked).toHaveBeenCalledTimes(0);
        onDoubleClicked.mockReset();
        // Enable it
        wrapper.setProps({ isDisabled: false });
        // Enabled tests
        expect(wrapper.find(ContextualMenuButton).at(0).props().disabled).toEqual(false);
        wrapper.simulate('contextmenu');
        expect(getStateOf(wrapper).isContextualMenuOpen).toEqual(true);
        wrapper.simulate('doubleclick');
        expect(onDoubleClicked).toHaveBeenCalledTimes(1);
        onDoubleClicked.mockReset();
        wrapper.unmount();
    });
    it('onRenderContextualMenu', function () {
        var mockContextualMenuId = 'contextual-menu-id';
        var contextualMenuSelector = "#" + mockContextualMenuId;
        var props = getDefaultProps({
            onRenderContextualMenu: function () { return React.createElement("div", { id: mockContextualMenuId }); }
        });
        var wrapper = mount(React.createElement(TreeNode, __assign({}, props)));
        expect(wrapper.find(contextualMenuSelector).length).toEqual(0);
        expect(getStateOf(wrapper).isContextualMenuOpen).toEqual(false);
        wrapper.simulate('contextmenu');
        expect(getStateOf(wrapper).isContextualMenuOpen).toEqual(true);
        expect(wrapper.find(contextualMenuSelector).length).toEqual(1);
        wrapper.unmount();
    });
    it('allows overriding the default "expand" icon', function () {
        var mockCustomIconId = 'custom-icon-id';
        var customIconSelector = "#" + mockCustomIconId;
        var props = getDefaultProps({
            onRenderExpandIcon: function () { return React.createElement("div", { id: mockCustomIconId }); }
        });
        var wrapper = mount(React.createElement(TreeNode, __assign({}, props)));
        expect(wrapper.find(customIconSelector).length).toEqual(1);
        wrapper.unmount();
    });
    it("allows overriding the label's content", function () {
        var mockCustomLabelContentId = 'custom-label-content-id';
        var customLabelContentSelector = "#" + mockCustomLabelContentId;
        var props = getDefaultProps({
            itemLabelStyle: 'custom-item-label',
            onRenderItemLabelContent: function () { return React.createElement("div", { id: mockCustomLabelContentId }, "A custom label"); }
        });
        var wrapper = mount(React.createElement(TreeNode, __assign({}, props)));
        expect(wrapper.find(customLabelContentSelector).length).toEqual(1);
        expect(wrapper.find(customLabelContentSelector).at(0).text()).toEqual('A custom label');
        expect(wrapper.find(customLabelContentSelector).at(0).parent().hasClass('custom-item-label')).toBeTruthy();
        wrapper.unmount();
    });
    it('Right click menu should not move to button when dismissed (instead, it should dismiss)', function () {
        var menuOpenSelector = "." + TreeAutomationSelectors.openMenuClassName;
        var props = getDefaultProps();
        var wrapper = mount(React.createElement(TreeNode, __assign({}, props)));
        wrapper.simulate('contextmenu');
        expect(getStateOf(wrapper).isContextualMenuOpen).toEqual(true);
        expect(wrapper.find(menuOpenSelector).length).toEqual(0);
        // Simulate dismissing the menu
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        wrapper.instance()._dismissContextMenu();
        // Menu should close
        expect(getStateOf(wrapper).isContextualMenuOpen).toEqual(false);
        expect(wrapper.find(menuOpenSelector).length).toEqual(0);
        wrapper.unmount();
    });
    it('ContextualMenuButtons should not get rendered when unsupported', function () {
        var props = getDefaultProps();
        var wrapper = mount(React.createElement(TreeNode, __assign({}, props)));
        expect(wrapper.find(ContextualMenuButton).length).toEqual(1);
        wrapper.setProps({ hasCommands: false });
        expect(wrapper.find(ContextualMenuButton).length).toEqual(0);
        wrapper.setProps({ hasCommands: true });
        expect(wrapper.find(ContextualMenuButton).length).toEqual(1);
        wrapper.setProps({ getCommands: undefined });
        expect(wrapper.find(ContextualMenuButton).length).toEqual(0);
        wrapper.unmount();
    });
    it('ExpandIcon should stop propagation', function () {
        var props = getDefaultProps({ isCollapsible: true, isFolder: true });
        var wrapper = mount(React.createElement(TreeNode, __assign({}, props)));
        var stopPropagationCalledCount = 0;
        expect(wrapper.find(ExpandIcon).length).toEqual(1);
        expect(wrapper.find(ExpandIcon).props().disable).toEqual(false);
        // Propagation should be stopped on click when enabled
        wrapper
            .find(ExpandIcon)
            .at(0)
            .simulate('click', {
            stopPropagation: function () {
                stopPropagationCalledCount++;
            }
        });
        expect(stopPropagationCalledCount).toEqual(1);
        stopPropagationCalledCount = 0;
        // Propagation should be stopped on double click when enabled
        wrapper
            .find(ExpandIcon)
            .at(0)
            .simulate('doubleclick', {
            stopPropagation: function () {
                stopPropagationCalledCount++;
            }
        });
        expect(stopPropagationCalledCount).toEqual(1);
        stopPropagationCalledCount = 0;
        // Disable the expand icon
        wrapper.setProps({ isCollapsible: false });
        expect(wrapper.find(ExpandIcon).props().disable).toEqual(true);
        // Propagation should be stopped on click when disabled
        wrapper
            .find(ExpandIcon)
            .at(0)
            .simulate('click', {
            stopPropagation: function () {
                stopPropagationCalledCount++;
            }
        });
        expect(stopPropagationCalledCount).toEqual(1);
        stopPropagationCalledCount = 0;
        // Propagation should be stopped on double click when disabled
        wrapper
            .find(ExpandIcon)
            .at(0)
            .simulate('doubleclick', {
            stopPropagation: function () {
                stopPropagationCalledCount++;
            }
        });
        expect(stopPropagationCalledCount).toEqual(1);
        stopPropagationCalledCount = 0;
        wrapper.unmount();
    });
});
//# sourceMappingURL=TreeNode.test.js.map