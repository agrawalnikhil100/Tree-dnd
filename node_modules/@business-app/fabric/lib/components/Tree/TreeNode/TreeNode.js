/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __extends } from "tslib";
import { ContextualMenu, DirectionalHint } from '@fluentui/react/lib/ContextualMenu';
import { mergeStyles } from '@fluentui/react/lib/Styling';
import { KeyCodes } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { ContextualMenuButton } from '../ContextualMenuButton/ContextualMenuButton';
import { ExpandIcon } from '../ExpandIcon/ExpandIcon';
import { ItemIcon } from '../ItemIcon/ItemIcon';
import { NodeLevelIndentation } from '../NodeLevelIndentation/NodeLevelIndentation';
import { SelectionType } from '../Tree.types';
var contextMenuButtonClass = 'ba-Tree-MenuButton';
var TreeNode = /** @class */ (function (_super) {
    __extends(TreeNode, _super);
    function TreeNode(props) {
        var _this = _super.call(this, props) || this;
        _this._onRenderItemContainer = function () {
            var _a = _this.props, ariaLabel = _a.ariaLabel, iconProps = _a.iconProps, indentSpacerStyle = _a.indentSpacerStyle, indexInParent = _a.indexInParent, isDisabled = _a.isDisabled, isFocusable = _a.isFocusable, isSelected = _a.isSelected, itemIconContainerStyle = _a.itemIconContainerStyle, itemIconStyle = _a.itemIconStyle, itemKey = _a.itemKey, itemStyle = _a.itemStyle, label = _a.label, level = _a.level, menuButtonClosedStyle = _a.menuButtonClosedStyle, menuButtonDisabledStyle = _a.menuButtonDisabledStyle, menuButtonOpenStyle = _a.menuButtonOpenStyle, menuButtonStyle = _a.menuButtonStyle, moreCommandsAriaLabel = _a.moreCommandsAriaLabel, noItemIconStyle = _a.noItemIconStyle, onRenderExpandIcon = _a.onRenderExpandIcon, onRenderItemLabel = _a.onRenderItemLabel, setSize = _a.setSize;
            var _b = _this.state, contextualMenuTargetPoint = _b.contextualMenuTargetPoint, isContextualMenuOpen = _b.isContextualMenuOpen, items = _b.items;
            var useTargetPoint = !!contextualMenuTargetPoint;
            var itemAriaLabel = ariaLabel ? ariaLabel : label || itemKey;
            var contextualMenuButtonAriaLabel = !moreCommandsAriaLabel ? '' : moreCommandsAriaLabel;
            var supportsContextualMenu = _this._supportsContextualMenu;
            return (React.createElement("div", { className: itemStyle, role: 'treeitem', "aria-disabled": isDisabled, "aria-level": level + 1, "aria-expanded": _this._getAriaExpanded(), "aria-selected": isSelected, "aria-label": itemAriaLabel, "aria-setsize": setSize === undefined ? undefined : setSize, "aria-posinset": indexInParent === undefined ? undefined : indexInParent + 1 /* PosInSet is 1-indexed */, "data-allow-keyboard-shortcut": true, "data-disable-click-on-enter": true, "data-is-focusable": isFocusable, onKeyDown: _this._handleNodeKeyDown, onDoubleClick: !isDisabled ? _this._onNodeDoubleClicked : undefined, onClick: _this._onNodeSelected, onContextMenu: _this._onContextMenu },
                React.createElement(NodeLevelIndentation, { level: level, className: indentSpacerStyle }),
                onRenderExpandIcon
                    ? onRenderExpandIcon(itemKey, _this._onRenderExpandIcon)
                    : _this._onRenderExpandIcon(),
                React.createElement(ItemIcon, { iconProps: iconProps, label: itemAriaLabel, itemIconContainerStyle: itemIconContainerStyle, itemIconStyle: itemIconStyle, noItemIconStyle: noItemIconStyle }),
                onRenderItemLabel ? onRenderItemLabel(itemKey, _this._onRenderItemLabel) : _this._onRenderItemLabel(),
                supportsContextualMenu && (React.createElement(ContextualMenuButton, { disabled: isDisabled, items: items, isOpen: isContextualMenuOpen && !useTargetPoint, onClick: _this._onMenuButtonClick, onDismiss: _this._dismissContextMenu, directionalHint: DirectionalHint.bottomLeftEdge, iconProps: {
                        iconName: 'More',
                        ariaLabel: contextualMenuButtonAriaLabel
                    }, ariaLabel: contextualMenuButtonAriaLabel, menuClosedStyle: mergeStyles(menuButtonStyle, menuButtonClosedStyle), menuOpenStyle: mergeStyles(menuButtonStyle, menuButtonOpenStyle), menuDisabledStyle: menuButtonDisabledStyle, onRenderContextualMenu: _this._onRenderContextualMenu, ref: _this.contextMenuRef })),
                supportsContextualMenu &&
                    isContextualMenuOpen &&
                    useTargetPoint &&
                    _this._onRenderContextualMenu({
                        items: items,
                        onDismiss: _this._dismissContextMenu,
                        shouldFocusOnMount: true,
                        gapSpace: 5,
                        directionalHint: DirectionalHint.bottomLeftEdge,
                        isBeakVisible: false,
                        ariaLabel: itemAriaLabel,
                        target: contextualMenuTargetPoint
                    })));
        };
        _this._onRenderItemLabelContent = function () {
            var label = _this.props.label;
            return React.createElement(React.Fragment, null, label);
        };
        _this._onRenderItemLabel = function () {
            var _a = _this.props, itemKey = _a.itemKey, label = _a.label, itemLabelStyle = _a.itemLabelStyle, onRenderItemLabelContent = _a.onRenderItemLabelContent;
            return (React.createElement("div", { title: label, className: itemLabelStyle, "aria-readonly": true }, onRenderItemLabelContent ? onRenderItemLabelContent(itemKey, _this._onRenderItemLabelContent) : label));
        };
        _this._onRenderExpandIcon = function () {
            var _a = _this.props, isFolder = _a.isFolder, isCollapsible = _a.isCollapsible, collapsedArrowIcon = _a.collapsedArrowIcon, expandIconButtonStyle = _a.expandIconButtonStyle, expandIconStyle = _a.expandIconStyle, noExpandIconStyle = _a.noExpandIconStyle;
            return (React.createElement(ExpandIcon, { isFolder: isFolder, disable: !isCollapsible, iconName: collapsedArrowIcon, iconClassName: expandIconStyle, buttonClassName: expandIconButtonStyle, noExpandClassName: noExpandIconStyle, onClick: _this._onExpandIconClicked }));
        };
        _this._onRenderContextualMenu = function (menuProps) {
            var _a = _this.props, itemKey = _a.itemKey, onRenderContextualMenu = _a.onRenderContextualMenu;
            return onRenderContextualMenu ? (onRenderContextualMenu(itemKey, menuProps)) : (React.createElement(ContextualMenu, __assign({}, menuProps)));
        };
        _this._getAriaExpanded = function () {
            var _a = _this.props, isFolder = _a.isFolder, isExpanded = _a.isExpanded;
            return isFolder ? !!isExpanded : undefined;
        };
        _this._getCommands = function () {
            var _a = _this.props, itemKey = _a.itemKey, getCommands = _a.getCommands;
            return getCommands(itemKey);
        };
        _this._handleNodeKeyDown = function (event) {
            var _a = _this.props, itemKey = _a.itemKey, isFolder = _a.isFolder, onExpandToggled = _a.onExpandToggled, onItemKeyDown = _a.onItemKeyDown, isExpanded = _a.isExpanded, isSelected = _a.isSelected;
            var contextMenuFocused = document.activeElement.classList.contains(contextMenuButtonClass);
            if (!contextMenuFocused && onItemKeyDown) {
                onItemKeyDown(itemKey, event);
            }
            if (event.keyCode === KeyCodes.f10 && event.shiftKey) {
                _this._showContextMenu();
                event.stopPropagation();
                event.preventDefault();
            }
            else if (event.keyCode === KeyCodes.left) {
                if (isFolder && isExpanded) {
                    onExpandToggled(itemKey);
                    event.stopPropagation();
                    event.preventDefault();
                }
            }
            else if (event.keyCode === KeyCodes.right) {
                if (isFolder && !isExpanded) {
                    onExpandToggled(itemKey);
                    event.stopPropagation();
                    event.preventDefault();
                }
            }
            else if (event.keyCode === KeyCodes.enter || event.keyCode === KeyCodes.space) {
                event.stopPropagation();
                event.preventDefault();
                if (contextMenuFocused) {
                    _this._showContextMenu();
                }
                else {
                    _this._onNodeSelected(event);
                }
            }
            else if (event.keyCode === KeyCodes.tab && isSelected) {
                // Without this there is no way to access the context menu via normal use of the keyboard.
                // You would still be able to with f10 + shiftKey, but, from feed back from the accessibility
                // team that is not sufficient.
                if (!contextMenuFocused) {
                    event.stopPropagation();
                    event.preventDefault();
                    _this.contextMenuRef.current._button.current.focus();
                }
            }
        };
        _this._onExpandIconClicked = function (event) {
            _this.props.onExpandToggled(_this.props.itemKey);
        };
        _this._onNodeDoubleClicked = function (event) {
            if (!event.ctrlKey && !event.shiftKey) {
                var itemKey = _this.props.itemKey;
                _this.props.onDoubleClicked(itemKey);
            }
        };
        _this._onNodeSelected = function (event) {
            var itemKey = _this.props.itemKey;
            _this.props.onSelected(itemKey, event.ctrlKey ? SelectionType.Toggle : event.shiftKey ? SelectionType.Block : SelectionType.Single);
        };
        _this._onContextMenu = function (ev) {
            // Prevent propagation of the event, since we're handling it here.
            ev.stopPropagation();
            ev.preventDefault();
            _this._toggleShowMenu({ x: ev.clientX, y: ev.clientY });
        };
        _this._onMenuButtonClick = function (ev) {
            // Prevent propagation of the event, since we're handling it here.
            ev.stopPropagation();
            ev.preventDefault();
            _this._toggleShowMenu();
        };
        _this._toggleShowMenu = function (point) {
            if (!_this.state.isContextualMenuOpen) {
                // Trigger the normal left-click behavior
                _this._showContextMenu(point);
            }
            else {
                // Trigger the normal dismiss behavior
                _this._dismissContextMenu();
            }
        };
        _this._showContextMenu = function (point) {
            if (_this.props.isDisabled && _this._supportsContextualMenu) {
                return;
            }
            _this.setState({
                items: _this._getCommands(),
                isContextualMenuOpen: true,
                contextualMenuTargetPoint: point,
                menuOpenedForItemKey: _this.props.itemKey
            });
        };
        _this._dismissContextMenu = function () {
            if (!_this.state.isContextualMenuOpen) {
                return;
            }
            _this.setState({
                items: [],
                isContextualMenuOpen: false,
                contextualMenuTargetPoint: undefined,
                menuOpenedForItemKey: undefined
            });
        };
        _this.contextMenuRef = React.createRef();
        _this.state = TreeNode._getStateFromProps(props, {
            contextualMenuTargetPoint: undefined,
            isContextualMenuOpen: false,
            menuOpenedForItemKey: undefined,
            items: []
        });
        return _this;
    }
    TreeNode._getStateFromProps = function (nextProps, prevState) {
        // If the menu is open and the item changed, close the menu.
        if (prevState.isContextualMenuOpen && nextProps.itemKey !== prevState.menuOpenedForItemKey) {
            return {
                contextualMenuTargetPoint: undefined,
                isContextualMenuOpen: false,
                menuOpenedForItemKey: undefined,
                items: []
            };
        }
        return prevState;
    };
    Object.defineProperty(TreeNode.prototype, "_supportsContextualMenu", {
        get: function () {
            var _a = this.props, hasCommands = _a.hasCommands, getCommands = _a.getCommands;
            return hasCommands && !!getCommands;
        },
        enumerable: false,
        configurable: true
    });
    TreeNode.getDerivedStateFromProps = function (nextProps, prevState) {
        if (!prevState) {
            return null;
        }
        return TreeNode._getStateFromProps(nextProps, prevState);
    };
    TreeNode.prototype.render = function () {
        var _a = this.props, itemKey = _a.itemKey, onRenderItemContainer = _a.onRenderItemContainer;
        if (onRenderItemContainer) {
            return onRenderItemContainer(itemKey, this._onRenderItemContainer);
        }
        return this._onRenderItemContainer();
    };
    return TreeNode;
}(React.Component));
export { TreeNode };
//# sourceMappingURL=TreeNode.js.map