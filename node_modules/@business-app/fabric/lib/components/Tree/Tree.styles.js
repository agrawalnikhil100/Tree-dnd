/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import { getFocusStyle } from '@fluentui/react/lib/Styling';
import { TreeAutomationSelectors } from './Tree.selectors';
var buttonHighContrastFocus = {
    left: -2,
    top: -2,
    bottom: -2,
    right: -2,
    border: 'none',
    outlineColor: 'ButtonText'
};
export var getStyles = function (props) {
    var _a, _b, _c;
    var className = props.className, theme = props.theme, nodeHeight = props.nodeHeight, iconWidth = props.iconWidth;
    var palette = theme.palette;
    var sharedIconContainerStyle = {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100%',
        width: iconWidth,
        flex: '0 0 auto'
    };
    var sharedIconStyle = {
        flex: '0 0 auto',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        width: '1em',
        height: '1em',
        padding: 0,
        margin: 0
    };
    var blankIconBlockStyle = {
        width: iconWidth,
        flex: '0 0 auto'
    };
    // Menu button should be a little smaller than the node to account for borders.
    var menuButtonSize = nodeHeight - 2;
    var backgroundColor = palette.neutralLighter;
    var hoveredRowColor = palette.neutralQuaternaryAlt;
    var selectedRowColor = palette.neutralQuaternary;
    return {
        root: [
            className,
            TreeAutomationSelectors.treeRootClassName,
            {
                display: 'flex',
                boxSizing: 'border-box',
                height: '100%',
                width: '100%',
                backgroundColor: backgroundColor
            }
        ],
        innerRoot: {
            display: 'block',
            position: 'relative',
            flex: '1 1 auto',
            boxSizing: 'border-box'
        },
        focusZone: {},
        scrollView: {
            display: 'flex',
            overflow: 'auto',
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0
        },
        list: {
            display: 'flex',
            flex: '0 0 auto',
            minWidth: '100%',
            minHeight: '100%',
            selectors: (_a = {},
                _a['& .ms-List-surface'] = {
                    width: '100%',
                    height: '100%'
                },
                _a)
        },
        item: [
            getFocusStyle(theme, -1, 'relative', buttonHighContrastFocus),
            TreeAutomationSelectors.treeNodeClassName,
            {
                display: 'flex',
                flex: '1 1 auto',
                flexDirection: 'row',
                alignItems: 'center',
                whiteSpace: 'nowrap',
                height: nodeHeight,
                position: 'relative',
                outline: 'none',
                border: '1px solid transparent',
                boxSizing: 'border-box'
            }
        ],
        itemIsSelectable: {
            cursor: 'pointer'
        },
        itemIsNotSelectable: {
            selectors: {
                ':hover': {
                    backgroundColor: 'initial'
                }
            }
        },
        itemIsSelected: {
            backgroundColor: selectedRowColor,
            selectors: (_b = {},
                _b["& ." + TreeAutomationSelectors.menuButtonClassName] = {
                    visibility: 'visible'
                },
                _b)
        },
        itemIsNotSelected: {
            selectors: (_c = {
                    ':hover': {
                        backgroundColor: hoveredRowColor
                    }
                },
                _c[":hover& ." + TreeAutomationSelectors.menuButtonClassName] = {
                    visibility: 'visible'
                },
                _c["& ." + TreeAutomationSelectors.openMenuClassName] = {
                    visibility: 'visible'
                },
                _c)
        },
        itemLabel: {
            flex: '1 1 auto',
            whiteSpace: 'nowrap',
            maxWidth: '100%',
            marginLeft: '5px',
            outline: 'none',
            marginRight: 12
        },
        expandIconButton: [
            TreeAutomationSelectors.collapseExpandClassName,
            __assign(__assign({}, sharedIconContainerStyle), { color: palette.black })
        ],
        expandIconButtonEnabled: {
            cursor: 'pointer'
        },
        expandIconButtonDisabled: {
            opacity: 0.4
        },
        expandIcon: __assign(__assign({}, sharedIconStyle), { fontSize: 12, transition: '0.2s transform', transformOrigin: 'center' }),
        expandIconExpanded: {
            transform: 'rotate(90deg)'
        },
        noExpandIcon: __assign({}, blankIconBlockStyle),
        levelIndentSpacer: __assign({}, blankIconBlockStyle),
        menuButton: [
            TreeAutomationSelectors.menuButtonClassName,
            {
                flex: '0 0 auto',
                // Menu button should be hidden by default.
                // We will show it in the following cases, though: a row is hovered, a row is selected, or the menu is open.
                visibility: 'hidden',
                position: 'sticky',
                right: 0,
                width: menuButtonSize,
                height: menuButtonSize,
                fontSize: 16,
                border: 'none',
                cursor: 'pointer',
                selectors: {
                    ':hover': {
                        color: palette.themePrimary
                    }
                }
            }
        ],
        menuButtonSelectedRowClosedMenu: {
            backgroundColor: selectedRowColor,
            selectors: {
                ':hover': {
                    backgroundColor: hoveredRowColor
                }
            }
        },
        menuButtonSelectedRowOpenMenu: [
            TreeAutomationSelectors.openMenuClassName,
            {
                color: palette.themePrimary,
                backgroundColor: hoveredRowColor
            }
        ],
        menuButtonUnselectedRowClosedMenu: {
            backgroundColor: hoveredRowColor,
            selectors: {
                ':hover': {
                    backgroundColor: selectedRowColor
                }
            }
        },
        menuButtonUnselectedRowOpenMenu: [
            TreeAutomationSelectors.openMenuClassName,
            {
                color: palette.themePrimary,
                backgroundColor: selectedRowColor
            }
        ],
        menuButtonDisabled: {
            color: palette.neutralSecondaryAlt,
            backgroundColor: 'transparent',
            selectors: {
                ':hover': {
                    color: palette.neutralSecondaryAlt,
                    backgroundColor: 'transparent'
                }
            }
        },
        itemIconContainer: __assign({}, sharedIconContainerStyle),
        itemIcon: __assign(__assign({}, sharedIconStyle), { fontSize: 16 }),
        noItemIcon: {
            flex: '0 0 auto',
            // By default, don't take up any space with the no icon element (some trees may not even have icons).
            width: 0
        }
    };
};
//# sourceMappingURL=Tree.styles.js.map