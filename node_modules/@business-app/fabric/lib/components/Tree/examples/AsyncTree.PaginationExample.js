/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __awaiter, __generator } from "tslib";
import { Toggle } from '@fluentui/react/lib/Toggle';
import { mergeStyleSets } from '@fluentui/react/lib/Styling';
import * as React from 'react';
import { AsyncTree } from '../AsyncTree';
var wait = function (ms) { return new Promise(function (r, j) { return setTimeout(r, ms); }); };
var strings = {
    listAriaLabel: 'list',
    moreCommandsAriaLabel: 'more commands'
};
export var AsyncTreePaginationExample = function () {
    var throwErrorsRef = React.useRef(false);
    var onResolveItems = React.useCallback(function (item, continuationToken) { return __awaiter(void 0, void 0, void 0, function () {
        var startIndex, endIndex, items, i, i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, wait(1500)];
                case 1:
                    _a.sent();
                    if (throwErrorsRef.current) {
                        throw new Error('this is an error');
                    }
                    startIndex = continuationToken ? parseInt(continuationToken, 10) : 0;
                    endIndex = startIndex + 5;
                    items = [];
                    if (item === null) {
                        for (i = startIndex; i < endIndex; i++) {
                            items.push({
                                key: i.toString(),
                                label: i.toString()
                            });
                        }
                    }
                    else {
                        for (i = startIndex; i < endIndex; i++) {
                            items.push({
                                key: item.key + '/' + i.toString(),
                                label: item.label + '/' + i.toString(),
                                isFolder: i % 2 === 0
                            });
                        }
                    }
                    return [2 /*return*/, [items, endIndex.toString()]];
            }
        });
    }); }, []);
    var onToggleChange = React.useCallback(function (ev, checked) {
        throwErrorsRef.current = checked;
    }, []);
    return (React.createElement(React.Fragment, null,
        React.createElement("div", null,
            React.createElement(Toggle, { label: 'Throw errors', defaultChecked: throwErrorsRef.current, onChange: onToggleChange })),
        React.createElement("div", { className: exampleStyles.exampleContainer },
            React.createElement(AsyncTree, { onResolveItems: onResolveItems, strings: strings }))));
};
var exampleStyles = mergeStyleSets({
    exampleContainer: {
        // 'display: flex' is important for the Tree to layout correctly.
        display: 'flex',
        // Just an example to prove that row direction also works for the Tree.
        flexDirection: 'row',
        width: 320,
        height: 200,
        userSelect: 'none'
    }
});
//# sourceMappingURL=AsyncTree.PaginationExample.js.map