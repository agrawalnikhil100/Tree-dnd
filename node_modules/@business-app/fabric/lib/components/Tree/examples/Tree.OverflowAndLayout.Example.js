/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __extends } from "tslib";
import { DefaultButton } from '@fluentui/react/lib/Button';
import { Announced } from '@fluentui/react/lib/Announced';
import { Dropdown } from '@fluentui/react/lib/Dropdown';
import { mergeStyleSets } from '@fluentui/react/lib/Styling';
import { TextField } from '@fluentui/react/lib/TextField';
import { Toggle } from '@fluentui/react/lib/Toggle';
import * as React from 'react';
import { Tree } from '../Tree';
import { cloneSet, getFolderKeys, produceItemsWithIcons } from './Tree.Example.Data';
export var CommandSetting;
(function (CommandSetting) {
    CommandSetting[CommandSetting["None"] = 0] = "None";
    CommandSetting[CommandSetting["Some"] = 1] = "Some";
    CommandSetting[CommandSetting["All"] = 2] = "All";
})(CommandSetting || (CommandSetting = {}));
var TreeOverflowAndLayoutExample = /** @class */ (function (_super) {
    __extends(TreeOverflowAndLayoutExample, _super);
    function TreeOverflowAndLayoutExample(props) {
        var _this = _super.call(this, props) || this;
        _this._onClickExpandAll = function () {
            _this.setState(function (prev) {
                return {
                    expandedItemKeys: getFolderKeys(prev.items)
                };
            });
            _this.setState({ announcedMessage: 'All items expanded' });
        };
        _this._onClickCollapseAll = function () {
            _this.setState({ expandedItemKeys: new Set(), announcedMessage: 'All items collapsed' });
        };
        _this._onItemExpand = function (item, index) {
            _this.setState(function (prev) {
                var set = cloneSet(prev.expandedItemKeys);
                set.add(item.key);
                return { expandedItemKeys: set };
            });
        };
        _this._onItemCollapsed = function (item, index) {
            _this.setState(function (prev) {
                var set = cloneSet(prev.expandedItemKeys);
                set.delete(item.key);
                return { expandedItemKeys: set };
            });
        };
        _this._getItemHasCommands = function (item) {
            var commands = _this.state.commands;
            if (commands === CommandSetting.None) {
                return false;
            }
            else if (commands === CommandSetting.All) {
                return true;
            }
            else {
                return item.label.toLowerCase().indexOf('a') !== -1;
            }
        };
        _this._getCommands = function () {
            var selection = _this.state.selection;
            var keys = ['newItem', 'share', 'mobile'];
            var items = [
                {
                    key: keys[0],
                    text: 'News',
                    canCheck: true,
                    isChecked: selection[keys[0]],
                    onClick: _this._onToggleSelect,
                    icon: 'Add'
                },
                {
                    key: keys[1],
                    text: 'Share',
                    canCheck: true,
                    isChecked: selection[keys[1]],
                    onClick: _this._onToggleSelect,
                    icon: 'Mail'
                },
                {
                    key: keys[2],
                    text: 'Mobile',
                    canCheck: true,
                    isChecked: selection[keys[2]],
                    onClick: _this._onToggleSelect,
                    icon: 'Calendar'
                }
            ];
            return items;
        };
        _this._onToggleSelect = function (ev, item) {
            var selection = _this.state.selection;
            if (ev.preventDefault) {
                ev.preventDefault();
            }
            selection[item.key] = !selection[item.key];
            _this.setState({
                selection: selection
            });
        };
        _this.state = {
            commands: CommandSetting.All,
            containerWidth: '280px',
            containerHeight: '260px',
            longText: true,
            items: produceItemsWithIcons,
            longItems: produceItemsWithIcons.map(function (item) { return (__assign(__assign({}, item), { label: item.label.indexOf('Cucumber') >= 0
                    ? 'CucumbersCucumbersCucumbersCucumbersCucumbers CucumbersCucumbersCucumbersCucumbersCucumbers'
                    : item.label })); }),
            expandedItemKeys: new Set(),
            selection: {},
            announcedMessage: ''
        };
        return _this;
    }
    TreeOverflowAndLayoutExample.prototype.render = function () {
        var _this = this;
        var _a = this.state, containerWidth = _a.containerWidth, containerHeight = _a.containerHeight, items = _a.items, longItems = _a.longItems, expandedItemKeys = _a.expandedItemKeys, longText = _a.longText;
        return (React.createElement("div", { className: exampleStyles.root },
            React.createElement("div", { className: exampleStyles.optionRow },
                React.createElement(TextField, { className: exampleStyles.option, onChange: function (ev, value) { return _this.setState({ containerWidth: value }); }, label: 'Container Width (eg 100% or 280px)', defaultValue: containerWidth }),
                React.createElement(TextField, { className: exampleStyles.option, onChange: function (ev, value) { return _this.setState({ containerHeight: value }); }, label: 'Container Height (eg 100% or 320px)', defaultValue: containerHeight })),
            React.createElement("div", { className: exampleStyles.optionRow },
                React.createElement(Dropdown, { label: 'Contextual menu buttons on rows', defaultSelectedKey: CommandSetting.All, className: exampleStyles.option, options: [
                        {
                            key: CommandSetting.None,
                            text: 'None'
                        },
                        {
                            key: CommandSetting.Some,
                            text: 'Some'
                        },
                        {
                            key: CommandSetting.All,
                            text: 'All'
                        }
                    ], onChange: function (ev, option) { return _this.setState({ commands: option.key }); } }),
                React.createElement(Toggle, { className: exampleStyles.option, onChange: function (ev, checked) { return _this.setState({ longText: checked }); }, defaultChecked: longText, onText: 'On', offText: 'Off', label: 'Long text' })),
            React.createElement("div", { style: { width: containerWidth, height: containerHeight, border: '1px solid gray' }, className: exampleStyles.treeContainer },
                React.createElement("div", { className: exampleStyles.optionRow },
                    React.createElement(DefaultButton, { onClick: this._onClickExpandAll }, 'Expand all'),
                    React.createElement(DefaultButton, { onClick: this._onClickCollapseAll }, 'Collapse all')),
                React.createElement(Tree, { items: longText ? longItems : items, expandedItemKeys: expandedItemKeys, strings: {
                        listAriaLabel: 'test',
                        moreCommandsAriaLabel: 'More Command'
                    }, onItemExpand: this._onItemExpand, onItemCollapse: this._onItemCollapsed, getItemCommands: this._getCommands, getItemHasCommands: this._getItemHasCommands })),
            React.createElement(Announced, { message: this.state.announcedMessage })));
    };
    return TreeOverflowAndLayoutExample;
}(React.Component));
export { TreeOverflowAndLayoutExample };
var exampleStyles = mergeStyleSets({
    root: {
        userSelect: 'none'
    },
    option: {
        marginRight: 32
    },
    optionRow: {
        display: 'flex',
        flexDirection: 'row'
    },
    treeContainer: {
        display: 'flex',
        flexDirection: 'column'
    }
});
//# sourceMappingURL=Tree.OverflowAndLayout.Example.js.map