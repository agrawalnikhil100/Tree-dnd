/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __extends } from "tslib";
import { DefaultButton } from '@fluentui/react/lib/Button';
import { DirectionalHint } from '@fluentui/react/lib/ContextualMenu';
import { FocusZone, FocusZoneDirection } from '@fluentui/react/lib/FocusZone';
import { ScrollablePane } from '@fluentui/react/lib/ScrollablePane';
import { concatStyleSets, getTheme } from '@fluentui/react/lib/Styling';
import { BaseComponent, KeyCodes } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { getSidebarClassNames } from './Sidebar.classNames';
import { getButtonColoredStyles, getCollapsedButtonStyles, getSidebarStyles } from './Sidebar.styles';
import { SidebarAccordion } from './SidebarAccordion';
import { SidebarButton } from './SidebarButton';
import { getSidebarChildrenStyles } from './SidebarButton.styles';
var Sidebar = /** @class */ (function (_super) {
    __extends(Sidebar, _super);
    function Sidebar(props) {
        var _this = _super.call(this, props) || this;
        _this.toggleCollapsed = function () {
            _this.setState(function (prevState) {
                return { isCollapsed: !prevState.isCollapsed };
            });
            if (_this.props.onCollapseChanged) {
                _this.props.onCollapseChanged();
            }
        };
        _this.updateSidebarContentHeight = function () {
            var parentId = _this.props.id ? _this.props.id : '';
            var sidebar = document.getElementsByClassName("ba-Sidebar-" + parentId)[0];
            var sidebarFooter = document.getElementsByClassName("ba-SidebarFooter-" + parentId)[0];
            var sidebarContent = document.getElementsByClassName("ba-SidebarContent-" + parentId)[0];
            if (sidebarContent && sidebar && sidebarFooter) {
                sidebarContent.setAttribute('style', 'height: ' + (sidebar.offsetHeight - sidebarFooter.offsetHeight + 'px'));
            }
        };
        _this._renderSidebarButtonMenuItem = function (item, dismissMenu) {
            var iconStyles = item.iconProps && item.iconProps.iconName
                ? null
                : {
                    icon: {
                        width: '0',
                        marginRight: '0'
                    }
                };
            return _this._renderSidebarButton(__assign(__assign({}, item), { styles: concatStyleSets(item.styles, { root: { backgroundColor: _this._theme.palette.white } }, iconStyles) }), true, dismissMenu);
        };
        _this.state = {
            isCollapsed: props.collapsible && props.defaultIsCollapsed
        };
        return _this;
    }
    /*
     * ComponentDidMount is used in the sidebar to adjust the height of the sidebar content
     * to allow the content scrollbar to be correctly sized.
     */
    Sidebar.prototype.componentDidMount = function () {
        this.updateSidebarContentHeight();
    };
    Sidebar.prototype.render = function () {
        var _this = this;
        var _a = this.props, theme = _a.theme, styles = _a.styles, buttonStyles = _a.buttonStyles, collapseButtonStyles = _a.collapseButtonStyles, className = _a.className, collapsible = _a.collapsible, collapseButtonAriaLabel = _a.collapseButtonAriaLabel, footerItems = _a.footerItems, id = _a.id, items = _a.items, renderCustomHeader = _a.renderCustomHeader;
        this._theme = theme || getTheme();
        this._buttonStyles = getButtonColoredStyles(theme, buttonStyles);
        this._classNames = getSidebarClassNames(getSidebarStyles(theme, styles), className, this.state.isCollapsed, id);
        var ButtonAs = this._getButtonAs();
        return (React.createElement("div", { className: this._classNames.root, "aria-expanded": !this.state.isCollapsed },
            React.createElement(ScrollablePane, { className: this._classNames.content, styles: {
                    contentContainer: {
                        overflowX: 'hidden'
                    }
                } },
                collapsible && (React.createElement(ButtonAs, { key: 'baSidebarCollapsibleButton', iconProps: { iconName: 'GlobalNavButton' }, onClick: this.toggleCollapsed, ariaLabel: collapseButtonAriaLabel, theme: this._theme, "aria-expanded": !this.state.isCollapsed, styles: concatStyleSets(this._buttonStyles, collapseButtonStyles, {
                        root: { width: 'auto' },
                        icon: { margin: 'auto' }
                    }), onRenderIcon: this.props.onRenderCollapseButtonIcon, "data-telemetry-id": this.props.telemetryId })),
                React.createElement(FocusZone, { direction: FocusZoneDirection.vertical },
                    renderCustomHeader && React.createElement(React.Fragment, null, renderCustomHeader(this.state.isCollapsed)),
                    React.createElement("nav", { role: "menu" }, items && items.map(function (item) { return _this._renderItemInSidebar(item); })))),
            footerItems && (React.createElement(FocusZone, { direction: FocusZoneDirection.vertical, className: this._classNames.footer, key: "baSidebarFooter" + id },
                React.createElement("nav", { role: "menu" }, footerItems.map(function (item) { return _this._renderItemInSidebar(item); }))))));
    };
    Sidebar.prototype.setCollapsed = function (newValue) {
        if (this.state.isCollapsed === newValue) {
            return;
        }
        this.setState({ isCollapsed: newValue });
        if (this.props.onCollapseChanged) {
            this.props.onCollapseChanged();
        }
    };
    Sidebar.prototype.getCollapsed = function () {
        return this.state.isCollapsed;
    };
    Sidebar.prototype._renderItemInSidebar = function (item) {
        if (!item) {
            return null;
        }
        if (item.onRender) {
            return item.onRender(item, null);
        }
        if (item.items && item.items.length > 0) {
            return this._renderSidebarItemWithChildren(item);
        }
        return this._renderSidebarButton(item);
    };
    Sidebar.prototype._renderSidebarButton = function (item, overrideCollapse, dismissMenu) {
        if (overrideCollapse === void 0) { overrideCollapse = false; }
        if (!item) {
            return null;
        }
        var ButtonAs = this._getButtonAs(item);
        var active = item.active, disabled = item.disabled, href = item.href, iconProps = item.iconProps, styles = item.styles, subMenuIconProps = item.subMenuIconProps, target = item.target, title = item.title, name = item.name, telemetryId = item.telemetryId;
        return (React.createElement("div", { key: item.key },
            React.createElement(ButtonAs, { "aria-current": active ? 'page' : undefined, ariaLabel: name, checked: active, className: this._getClassNames('ba-SidebarButton', item), disabled: disabled, href: href, iconProps: iconProps ? iconProps : { iconName: '' }, menuIconProps: this.state.isCollapsed ? null : subMenuIconProps, onClick: this._onItemClick(item, dismissMenu), role: 'menuitem', styles: concatStyleSets(this._buttonStyles, styles), target: target, text: this.state.isCollapsed && !overrideCollapse ? null : item.name, theme: this._theme, title: title ? title : name, "data-telemetry-id": telemetryId, id: item.id })));
    };
    Sidebar.prototype._renderSidebarItemWithChildren = function (item) {
        if (!item || !item.items) {
            return null;
        }
        var numActiveChildren = item.items.filter(function (child) {
            return child.active;
        }).length;
        if (!this.state.isCollapsed && item.items) {
            return this._renderSidebarAccordion(item, numActiveChildren);
        }
        return this._renderSidebarButtonWithMenu(item, numActiveChildren);
    };
    Sidebar.prototype._renderSidebarAccordion = function (item, numActiveChildren) {
        var _this = this;
        if (!item || !item.items) {
            return null;
        }
        return (React.createElement("div", { className: this._getClassNames('ba-SidebarAccordion', item), key: item.key },
            React.createElement(SidebarAccordion, { checked: numActiveChildren > 0 ? true : false, text: item.name, iconProps: item.iconProps, menuIconProps: item.subMenuIconProps, role: 'menuitem', ariaLabel: item.name, title: item.tooltip || item.title, styles: item.styles, theme: this._theme, "aria-current": numActiveChildren > 0 ? true : false, buttonAs: DefaultButton, onRenderContent: function () { return _this._renderAccordionItems(item.items); }, onOpen: this.updateSidebarContentHeight, onClose: this.updateSidebarContentHeight, "data-telemetry-id": item.telemetryId })));
    };
    Sidebar.prototype._renderAccordionItems = function (items) {
        var _this = this;
        if (!items) {
            return null;
        }
        var children = items.map(function (item) {
            var iconStyles = item.iconProps && item.iconProps.iconName
                ? null
                : {
                    icon: {
                        width: '0',
                        margin: '0'
                    }
                };
            var style = item.styles;
            item.styles = concatStyleSets(getSidebarChildrenStyles(_this._theme, item.styles), iconStyles);
            var button = _this._renderSidebarButton(item);
            item.styles = style;
            return button;
        });
        return React.createElement("div", { role: "menu" }, children);
    };
    Sidebar.prototype._renderSidebarButtonWithMenu = function (item, numActiveChildren) {
        var _this = this;
        if (!item || !item.items) {
            return null;
        }
        var children = item.items.map(function (child) {
            child.onRender = _this._renderSidebarButtonMenuItem;
            return child;
        });
        if (item.name) {
            children.unshift({
                key: item.name + '-header',
                name: item.name,
                iconProps: { iconName: '' },
                className: 'ba-SidebarContextualMenuButton-header ',
                disabled: true,
                styles: concatStyleSets(this._buttonStyles, {
                    rootDisabled: {
                        backgroundColor: this._theme.palette.white
                    },
                    labelDisabled: {
                        color: this._theme.palette.neutralPrimary
                    }
                }),
                onRender: this._renderSidebarButtonMenuItem
            });
        }
        var ButtonAs = this._getButtonAs(item);
        return (React.createElement("div", { key: item.key },
            React.createElement(ButtonAs, { key: item.key, text: this.state.isCollapsed ? '' : item.name, iconProps: item.iconProps, menuIconProps: this.state.isCollapsed ? { iconName: '' } : item.subMenuIconProps, menuProps: {
                    items: children,
                    directionalHint: DirectionalHint.rightTopEdge,
                    ariaLabel: item.name,
                    calloutProps: {
                        styles: {
                            root: {
                                borderWidth: '0'
                            }
                        }
                    }
                }, menuTriggerKeyCode: KeyCodes.right, className: this._getClassNames('ba-SidebarContextualMenuButton', item), role: "menuitem", ariaLabel: item.name, title: item.title ? item.title : item.name, styles: concatStyleSets(this._buttonStyles, item.styles, getCollapsedButtonStyles(this._theme)), theme: this._theme, checked: numActiveChildren > 0 ? true : false, "aria-current": numActiveChildren > 0 ? true : false, disabled: item.disabled, onClick: this._onItemClick(item) })));
    };
    Sidebar.prototype._onItemClick = function (item, dismissMenu) {
        var _this = this;
        if (!item) {
            return null;
        }
        return function (ev) {
            if (item.active && !_this.props.redirectIfActive) {
                return;
            }
            if (item.onClick) {
                item.onClick(ev, item);
            }
            // Handle `defaultPrevented` the same way as in Fluent UI:
            // https://github.com/microsoft/fluentui/blob/aa142e7c4b64e62db238e727a86b5f2a774a229a/packages/office-ui-fabric-react/src/components/Button/BaseButton.tsx#L539
            if (dismissMenu && !ev.defaultPrevented) {
                dismissMenu();
            }
        };
    };
    Sidebar.prototype._getButtonAs = function (item) {
        if (item && item.buttonAs) {
            return item.buttonAs;
        }
        else if (this.props.defaultButton) {
            return this.props.defaultButton;
        }
        return SidebarButton;
    };
    Sidebar.prototype._getClassNames = function (defaultClass, item) {
        var className = defaultClass + ' ';
        className += item.className ? item.className : '';
        return className;
    };
    return Sidebar;
}(BaseComponent));
export { Sidebar };
//# sourceMappingURL=Sidebar.js.map