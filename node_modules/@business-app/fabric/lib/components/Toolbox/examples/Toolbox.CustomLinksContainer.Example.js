/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign, __extends } from "tslib";
import { PrimaryButton } from '@fluentui/react/lib/Button';
import { FocusZone } from '@fluentui/react/lib/FocusZone';
import { getTheme, mergeStyles } from '@fluentui/react/lib/Styling';
import * as React from 'react';
import { Toolbox } from '../Toolbox';
import { ToolboxItem } from '../ToolboxItem';
var ToolboxCustomLinksContainerExample = /** @class */ (function (_super) {
    __extends(ToolboxCustomLinksContainerExample, _super);
    function ToolboxCustomLinksContainerExample(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            userChosenSetting: ''
        };
        return _this;
    }
    ToolboxCustomLinksContainerExample.prototype.render = function () {
        var toolboxItemRootStyle = mergeStyles({
            width: '100%',
            padding: 16
        });
        var buttonStyle = mergeStyles({
            marginRight: 16
        });
        return (React.createElement(React.Fragment, null,
            React.createElement(Toolbox, { strings: {
                    expandTooltip: 'Expand',
                    collapseTooltip: 'Collapse',
                    closeTooltip: 'Close'
                }, styles: {
                    root: {
                        height: 320
                    }
                }, toolboxLinksContainerAs: CustomToolboxLinksContainer },
                React.createElement(ToolboxItem, { headerText: 'Print', itemKey: 'item1', itemIcon: 'Print' },
                    React.createElement("div", { className: toolboxItemRootStyle },
                        React.createElement(PrimaryButton, { className: buttonStyle }, 'Print something'))),
                React.createElement(ToolboxItem, { headerText: 'Eraser', itemKey: 'item2', itemIcon: 'EraseTool' },
                    React.createElement("div", { className: toolboxItemRootStyle },
                        React.createElement(PrimaryButton, { className: buttonStyle }, 'Erase all bugs'))),
                React.createElement(ToolboxItem, { headerText: 'Print', itemKey: 'item3', itemIcon: 'Print' },
                    React.createElement("div", { className: toolboxItemRootStyle },
                        React.createElement(PrimaryButton, { className: buttonStyle }, 'Print something'))),
                React.createElement(ToolboxItem, { headerText: 'Eraser', itemKey: 'item4', itemIcon: 'EraseTool' },
                    React.createElement("div", { className: toolboxItemRootStyle },
                        React.createElement(PrimaryButton, { className: buttonStyle }, 'Erase all bugs'))),
                React.createElement(ToolboxItem, { headerText: 'Print', itemKey: 'item5', itemIcon: 'Print' },
                    React.createElement("div", { className: toolboxItemRootStyle },
                        React.createElement(PrimaryButton, { className: buttonStyle }, 'Print something'))),
                React.createElement(ToolboxItem, { headerText: 'Eraser', itemKey: 'item6', itemIcon: 'EraseTool' },
                    React.createElement("div", { className: toolboxItemRootStyle },
                        React.createElement(PrimaryButton, { className: buttonStyle }, 'Erase all bugs'))),
                React.createElement(ToolboxItem, { headerText: 'Print', itemKey: 'item7', itemIcon: 'Print' },
                    React.createElement("div", { className: toolboxItemRootStyle },
                        React.createElement(PrimaryButton, { className: buttonStyle }, 'Print something'))),
                React.createElement(ToolboxItem, { headerText: 'Eraser', itemKey: 'item8', itemIcon: 'EraseTool' },
                    React.createElement("div", { className: toolboxItemRootStyle },
                        React.createElement(PrimaryButton, { className: buttonStyle }, 'Erase all bugs'))))));
    };
    return ToolboxCustomLinksContainerExample;
}(React.Component));
export { ToolboxCustomLinksContainerExample };
var CustomToolboxLinksContainer = function (props) {
    var _a;
    var theme = getTheme();
    var containerStyles = mergeStyles({
        border: "8px " + theme.palette.themePrimary + " solid",
        overflowY: 'scroll'
    });
    var InnerComponent = (_a = props.defaultRender) !== null && _a !== void 0 ? _a : FocusZone;
    return (React.createElement("div", { className: containerStyles },
        React.createElement(InnerComponent, __assign({}, props))));
};
//# sourceMappingURL=Toolbox.CustomLinksContainer.Example.js.map