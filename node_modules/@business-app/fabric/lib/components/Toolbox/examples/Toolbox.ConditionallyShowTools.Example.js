/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __extends } from "tslib";
import { mergeStyles } from '@fluentui/react/lib/Styling';
import { Toggle } from '@fluentui/react/lib/Toggle';
import * as React from 'react';
import { Toolbox } from '../Toolbox';
import { ToolboxItem } from '../ToolboxItem';
var ToolboxConditionallyShowToolsExample = /** @class */ (function (_super) {
    __extends(ToolboxConditionallyShowToolsExample, _super);
    function ToolboxConditionallyShowToolsExample(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            showSecondItem: false,
            showThirdItem: false,
            disableSecondItem: false
        };
        return _this;
    }
    ToolboxConditionallyShowToolsExample.prototype.render = function () {
        var _this = this;
        var _a = this.state, showSecondItem = _a.showSecondItem, showThirdItem = _a.showThirdItem, disableSecondItem = _a.disableSecondItem;
        var toolboxItemRootStyle = mergeStyles({
            width: '100%',
            padding: 16
        });
        return (React.createElement(React.Fragment, null,
            React.createElement(Toggle, { onChange: function (ev, checked) { return _this.setState({ showSecondItem: checked }); }, defaultChecked: showSecondItem, onText: 'true', offText: 'false', label: 'Show second tool' }),
            React.createElement(Toggle, { onChange: function (ev, checked) { return _this.setState({ showThirdItem: checked }); }, defaultChecked: showThirdItem, onText: 'true', offText: 'false', label: 'Show third tool' }),
            React.createElement(Toggle, { onChange: function (ev, checked) { return _this.setState({ disableSecondItem: checked }); }, defaultChecked: showThirdItem, onText: 'true', offText: 'false', label: 'Disable second tool' }),
            React.createElement(Toolbox, { strings: {
                    expandTooltip: 'Expand',
                    collapseTooltip: 'Collapse',
                    closeTooltip: 'Close'
                }, styles: {
                    root: {
                        height: 320
                    }
                } },
                React.createElement(ToolboxItem, { headerText: 'header1', itemIcon: 'Play', itemKey: "key1" },
                    React.createElement("div", { className: toolboxItemRootStyle }, 'Item 1')),
                showSecondItem && (React.createElement(ToolboxItem, { headerText: 'header2', itemIcon: 'MediaAdd', itemKey: "key2", disabled: disableSecondItem },
                    React.createElement("div", { className: toolboxItemRootStyle }, 'Item 2'))),
                showThirdItem && (React.createElement(ToolboxItem, { headerText: 'header3', itemIcon: 'Settings', itemKey: "key3" },
                    React.createElement("div", { className: toolboxItemRootStyle }, 'Item 3'))))));
    };
    return ToolboxConditionallyShowToolsExample;
}(React.Component));
export { ToolboxConditionallyShowToolsExample };
//# sourceMappingURL=Toolbox.ConditionallyShowTools.Example.js.map