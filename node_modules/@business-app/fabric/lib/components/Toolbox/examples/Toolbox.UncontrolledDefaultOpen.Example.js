/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __extends } from "tslib";
import { PrimaryButton } from '@fluentui/react/lib/Button';
import { ChoiceGroup } from '@fluentui/react/lib/ChoiceGroup';
import { mergeStyles } from '@fluentui/react/lib/Styling';
import * as React from 'react';
import { Toolbox } from '../Toolbox';
import { ToolboxItem } from '../ToolboxItem';
var ToolboxUncontrolledDefaultOpenExample = /** @class */ (function (_super) {
    __extends(ToolboxUncontrolledDefaultOpenExample, _super);
    function ToolboxUncontrolledDefaultOpenExample(props) {
        var _this = _super.call(this, props) || this;
        _this._onSettingChangedCallback = function (event, option) {
            _this.setState({ userChosenSetting: option.key });
        };
        _this.state = {
            userChosenSetting: ''
        };
        return _this;
    }
    ToolboxUncontrolledDefaultOpenExample.prototype.render = function () {
        var toolboxItemRootStyle = mergeStyles({
            width: '100%',
            padding: 16
        });
        var buttonStyle = mergeStyles({
            marginRight: 16
        });
        return (React.createElement(React.Fragment, null,
            React.createElement(Toolbox, { initialSelectedKey: 'item1', strings: {
                    expandTooltip: 'Expand',
                    collapseTooltip: 'Collapse',
                    closeTooltip: 'Close'
                }, styles: {
                    root: {
                        height: 320
                    }
                } },
                React.createElement(ToolboxItem, { headerText: 'Print', itemKey: 'item1', itemIcon: 'Print' },
                    React.createElement("div", { className: toolboxItemRootStyle },
                        React.createElement(PrimaryButton, { className: buttonStyle }, 'Print something'))),
                React.createElement(ToolboxItem, { headerText: 'Eraser', itemKey: 'item2', itemIcon: 'EraseTool' },
                    React.createElement("div", { className: toolboxItemRootStyle },
                        React.createElement(PrimaryButton, { className: buttonStyle }, 'Erase all bugs'))),
                React.createElement(ToolboxItem, { headerText: 'Settings', itemKey: 'item3', itemIcon: 'Settings' },
                    React.createElement("div", { className: toolboxItemRootStyle },
                        React.createElement(ChoiceGroup, { selectedKey: this.state.userChosenSetting, onChange: this._onSettingChangedCallback, label: 'Choose your setting', options: [
                                {
                                    key: 'item1',
                                    text: 'Setting 1'
                                },
                                {
                                    key: 'item2',
                                    text: 'Setting 2'
                                }
                            ] }))))));
    };
    return ToolboxUncontrolledDefaultOpenExample;
}(React.Component));
export { ToolboxUncontrolledDefaultOpenExample };
//# sourceMappingURL=Toolbox.UncontrolledDefaultOpen.Example.js.map