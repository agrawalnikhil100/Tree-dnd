/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { IButton } from '@fluentui/react/lib/Button';
import { BaseComponent } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { IToolboxProps } from './Toolbox.types';
import { IToolboxItemProps } from './ToolboxItem.types';
/**
 *  Usage:
 *
 *   <Toolbox>
 *     <ToolboxItem headerText="Foo">
 *       <Label>Toolbox> #1</Label>
 *     </ToolboxItem>
 *     <ToolboxItem headerText="Bar">
 *       <Label>Toolbox> #2</Label>
 *     </ToolboxItem>
 *     <ToolboxItem headerText="Bas">
 *       <Label>Toolbox> #3</Label>
 *     </ToolboxItem>
 *   </Toolbox>
 */
export interface IToolboxState {
    links: IToolboxItemProps[];
    linksAreExpanded: boolean;
    drawerIsExpanded: boolean;
    selectedKey: string | null;
    width: number;
    keyToIndexMapping: {
        [key: string]: number;
    };
    keyToTabIds: {
        [key: string]: string;
    };
    keyToRef: {
        [key: string]: React.RefObject<IButton>;
    };
    pivotId: string;
}
export declare class ToolboxBase extends BaseComponent<IToolboxProps, IToolboxState> {
    private _focusZone;
    private _classNames;
    static _getStateFromProps(nextProps: IToolboxProps, prevState: IToolboxState): IToolboxState;
    /**
     * Gets the set of ToolboxLinks as array of ToolboxItemProps
     * The set of Links is determined by child components of type ToolboxItem
     */
    private static _getToolboxLinks;
    /**
     * Generates the Id for the tab button.
     */
    private static _getTabId;
    /**
     * whether the key exists in the pivot items.
     */
    private static _isKeyValid;
    constructor(props: IToolboxProps);
    static getDerivedStateFromProps(nextProps: IToolboxProps, prevState: IToolboxState): IToolboxState;
    render(): JSX.Element;
    /**
     * Sets focus to the first pivot tab.
     */
    focus(): void;
    /**
     * Renders the set of links to route between drawers
     */
    private _renderToolboxLinks;
    private _toolboxLinksContainer;
    private _renderToolboxLink;
    private _renderLinkContent;
    private _renderSelectionIndicator;
    private _onCollapseButtonClick;
    private _onCollapseButtonKeyPress;
    private _toggleCollapsed;
    private _onToggleExpandLinks;
    /**
     * Renders the current Toolbox Item
     */
    private _renderToolboxDrawer;
    /**
     * Handles the onClick event on ToolboxLinks
     */
    private _onLinkClick;
    /**
     * Handle the onKeyPress event on the ToolboxLinks
     */
    private _onKeyPress;
    /**
     * Updates the state with the new selected index
     */
    private _updateSelectedItem;
    private _dismissDrawer;
    /** Focus the tab button for the currently selected link. */
    private _focusCurrentLink;
    private _clearSelectedItem;
    private _getClassNames;
}
