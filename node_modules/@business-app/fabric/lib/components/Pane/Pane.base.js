/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { __assign } from "tslib";
import { IconButton } from '@fluentui/react/lib/Button';
import { classNamesFunction, divProperties, getId, getNativeProps } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
var getClassNames = classNamesFunction();
function getPaneClassNames(props) {
    return getClassNames(props.styles, props);
}
var _onRenderDefaultHeader = function (props, defaultRender, headerTextId) {
    var headerText = props.headerText, headerTextProps = props.headerTextProps;
    var classNames = getPaneClassNames(props);
    if (headerText) {
        return (React.createElement("div", { className: classNames.header },
            React.createElement("div", __assign({ className: classNames.headerText, id: headerTextId, role: "heading", "aria-level": 2 }, headerTextProps), headerText)));
    }
    return null;
};
var _onRenderDefaultBody = function (props) {
    var classNames = getPaneClassNames(props);
    return React.createElement("div", { className: classNames.content }, props.children);
};
var onRenderNavigation = function (classNames, onClick, hasCloseButton, closeButtonAriaLabel) {
    if (hasCloseButton) {
        return (React.createElement(IconButton, { className: classNames.closeButton, onClick: onClick, ariaLabel: closeButtonAriaLabel, title: closeButtonAriaLabel, iconProps: { iconName: 'Cancel' } }));
    }
    return null;
};
export var PaneBase = function (props) {
    var headerText = props.headerText, isOpen = props.isOpen, _a = props.onRenderHeader, onRenderHeader = _a === void 0 ? _onRenderDefaultHeader : _a, _b = props.onRenderBody, onRenderBody = _b === void 0 ? _onRenderDefaultBody : _b, onDismiss = props.onDismiss, hasCloseButton = props.hasCloseButton, closeButtonAriaLabel = props.closeButtonAriaLabel;
    if (!isOpen) {
        return null;
    }
    var id = getId('Pane');
    var headerTextId = headerText && id + '-headerText';
    var nativeProps = getNativeProps(props, divProperties);
    var classNames = getPaneClassNames(props);
    var header = onRenderHeader(props, _onRenderDefaultHeader, headerTextId);
    return (React.createElement("div", __assign({ "aria-hidden": !isOpen }, nativeProps, { className: classNames.root }),
        React.createElement("div", { "data-is-visible": true }, onRenderNavigation(classNames, onDismiss, hasCloseButton, closeButtonAriaLabel)),
        React.createElement("div", { className: classNames.contentInner },
            header,
            React.createElement("div", { className: classNames.scrollableContent, "data-is-scrollable": true }, onRenderBody(props, _onRenderDefaultBody)))));
};
//# sourceMappingURL=Pane.base.js.map