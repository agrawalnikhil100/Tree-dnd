"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NavigationControllerBase = void 0;
var tslib_1 = require("tslib");
var Button_1 = require("@fluentui/react/lib/Button");
var Styling_1 = require("@fluentui/react/lib/Styling");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var React = require("react");
var NavigationControllerView_1 = require("./NavigationControllerView");
var getClassNames = Utilities_1.classNamesFunction();
var NavigationControllerBase = /** @class */ (function (_super) {
    tslib_1.__extends(NavigationControllerBase, _super);
    function NavigationControllerBase(props) {
        var _this = _super.call(this, props) || this;
        _this.goTo = function (view) {
            // throw away history beyond current active view
            var history = _this.state.history.slice(0, _this.state.activeViewIndex + 1);
            // push the new view
            history.push(view);
            // make it the active view
            var activeViewIndex = history.length - 1;
            _this.setState({
                history: history,
                activeViewIndex: activeViewIndex
            });
        };
        _this.getActiveViewKey = function () {
            return _this.state.history[_this.state.activeViewIndex];
        };
        _this.getHistory = function () {
            return _this.state.history;
        };
        _this.back = function () {
            if (_this.canGoBack()) {
                var activeViewIndex = _this.state.activeViewIndex - 1;
                _this.setState({
                    activeViewIndex: activeViewIndex
                });
                return _this.state.history[activeViewIndex];
            }
            return '';
        };
        _this.forward = function () {
            if (_this.canGoBack()) {
                var activeViewIndex = _this.state.activeViewIndex + 1;
                _this.setState({
                    activeViewIndex: activeViewIndex
                });
                return _this.state.history[activeViewIndex];
            }
            return '';
        };
        _this.canGoBack = function () {
            return !!(_this.state.history.length && _this.state.activeViewIndex && _this.state.activeViewIndex > 0);
        };
        _this.canGoForward = function () {
            if (_this.state.history.length &&
                _this.state.activeViewIndex &&
                _this.state.activeViewIndex < _this.state.history.length - 1) {
                return true;
            }
            return false;
        };
        _this.reset = function (activeViewKey) {
            _this.setState({
                history: [activeViewKey],
                activeViewIndex: 0
            });
        };
        _this.state = {
            history: [props.initialActiveViewKey],
            activeViewIndex: 0
        };
        return _this;
    }
    NavigationControllerBase.prototype.render = function () {
        this._classNames = this._getClassNames(this.props);
        var currentViewProps = this._getViewProps(this.state.history[this.state.activeViewIndex]);
        if (currentViewProps) {
            return (React.createElement("div", { className: this._classNames.root },
                this._renderHeader(currentViewProps),
                this._renderView(currentViewProps),
                this._renderFooter(currentViewProps)));
        }
        else {
            throw new Error('Invalid view key');
        }
    };
    NavigationControllerBase.prototype._renderHeader = function (viewProps) {
        var headerElement;
        if (this.props.onRenderHeader) {
            headerElement = this.props.onRenderHeader(this.props, viewProps, this);
        }
        else {
            headerElement = (React.createElement(React.Fragment, null,
                this.props.showBackButton && this.canGoBack() ? (React.createElement("span", { className: this._classNames.headerBackButton },
                    React.createElement(Button_1.IconButton, { ariaLabel: this.props.backButtonAriaLabel, iconProps: {
                            iconName: 'Back',
                            styles: {
                                root: {
                                    fontWeight: Styling_1.FontWeights.semibold
                                }
                            }
                        }, onClick: this.back }))) : (React.createElement(React.Fragment, null)),
                React.createElement("h2", { className: this._classNames.headerText, title: viewProps.headerText }, viewProps.headerText)));
        }
        return React.createElement("div", { className: this._classNames.headerContainer }, headerElement);
    };
    NavigationControllerBase.prototype._renderFooter = function (viewProps) {
        if (this.props.onRenderFooter) {
            return (React.createElement("div", { className: this._classNames.footerContainer }, this.props.onRenderFooter(this.props, viewProps, this)));
        }
        if (viewProps.footerButtons) {
            var footerButtons = viewProps.footerButtons.map(function (props, i) {
                var buttonProps = tslib_1.__assign(tslib_1.__assign({ key: i }, props), { styles: tslib_1.__assign({ root: {
                            height: '32px',
                            minWidth: '84px',
                            marginRight: '8px',
                            borderRadius: '2px'
                        } }, props.styles) });
                return props.primary ? React.createElement(Button_1.PrimaryButton, tslib_1.__assign({}, buttonProps)) : React.createElement(Button_1.DefaultButton, tslib_1.__assign({}, buttonProps));
            });
            return React.createElement("div", { className: this._classNames.footerContainer }, footerButtons);
        }
        return React.createElement(React.Fragment, null);
    };
    NavigationControllerBase.prototype._renderView = function (viewProps) {
        return (React.createElement("div", { className: this._classNames.bodyContainer },
            React.createElement(NavigationControllerView_1.NavigationControllerView, tslib_1.__assign({}, viewProps))));
    };
    NavigationControllerBase.prototype._getViewProps = function (viewKey) {
        var view = Utilities_1.find(this.props.children(this), function (child) { return isNavigationControllerView(child) && child.props.viewKey === viewKey; });
        if (view) {
            return view.props;
        }
        else {
            return null;
        }
    };
    NavigationControllerBase.prototype._getClassNames = function (props) {
        var theme = props.theme;
        return getClassNames(props.styles, {
            theme: theme
        });
    };
    NavigationControllerBase = tslib_1.__decorate([
        Utilities_1.customizable('NavigationController', ['theme', 'styles'])
    ], NavigationControllerBase);
    return NavigationControllerBase;
}(Utilities_1.BaseComponent));
exports.NavigationControllerBase = NavigationControllerBase;
var NavigationControllerViewType = React.createElement(NavigationControllerView_1.NavigationControllerView).type;
/**
 * Determines if the provided item is a NavigationControllerView
 */
function isNavigationControllerView(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
item) {
    return !!item && typeof item === 'object' && item.type === NavigationControllerViewType;
}
//# sourceMappingURL=NavigationController.base.js.map