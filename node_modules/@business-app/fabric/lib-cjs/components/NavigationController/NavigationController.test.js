"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enzyme_1 = require("enzyme");
var Button_1 = require("@fluentui/react/lib/Button");
var React = require("react");
var _1 = require(".");
var NavigationController_base_1 = require("./NavigationController.base");
function getState(wrapper) {
    return wrapper.childAt(0).state();
}
var testStepKeys = {
    step1: 'step1',
    step2: 'step2',
    step3: 'step3'
};
var viewContentClassName = 'view-content';
var testSteps = function (NavigationControllerContext) { return [
    React.createElement(_1.NavigationControllerView, { key: testStepKeys.step1, viewKey: testStepKeys.step1, headerText: "Step 1", footerButtons: [
            {
                primary: true,
                onClick: function () { return NavigationControllerContext.goTo(testStepKeys.step2); },
                text: 'Next'
            }
        ] },
        React.createElement("div", { className: viewContentClassName }, "First Step")),
    React.createElement(_1.NavigationControllerView, { key: testStepKeys.step2, viewKey: testStepKeys.step2, headerText: "Step 2", footerButtons: [
            {
                primary: false,
                onClick: function () { return NavigationControllerContext.back(); },
                text: 'Previous'
            },
            {
                primary: true,
                onClick: function () { return NavigationControllerContext.goTo(testStepKeys.step3); },
                text: 'Next'
            }
        ] },
        React.createElement("div", { className: viewContentClassName }, "Second Step")),
    React.createElement(_1.NavigationControllerView, { key: testStepKeys.step3, viewKey: testStepKeys.step3, headerText: "Step 3" },
        React.createElement("div", { className: viewContentClassName }, "Third Step"))
]; };
describe('NavigationController', function () {
    var wrapper;
    afterEach(function () { return wrapper && wrapper.unmount(); });
    it('renders the initial view and sets the state correctly', function () {
        var props = {
            initialActiveViewKey: testStepKeys.step1,
            showBackButton: true
        };
        wrapper = enzyme_1.mount(React.createElement(NavigationController_base_1.NavigationControllerBase, tslib_1.__assign({}, props), testSteps));
        var views = wrapper.find("." + viewContentClassName);
        expect(views.length).toBe(1);
        expect(views.text()).toBe('First Step');
        var state = getState(wrapper);
        expect(state.activeViewIndex).toBe(0);
        expect(state.history).toEqual([testStepKeys.step1]);
    });
    it('is renders the right view based on state', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var props, views;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    props = {
                        initialActiveViewKey: testStepKeys.step1,
                        showBackButton: true
                    };
                    wrapper = enzyme_1.mount(React.createElement(NavigationController_base_1.NavigationControllerBase, tslib_1.__assign({}, props), testSteps));
                    views = wrapper.find("." + viewContentClassName);
                    expect(views.length).toBe(1);
                    expect(views.text()).toBe('First Step');
                    return [4 /*yield*/, wrapper.childAt(0).setState({
                            activeViewIndex: 1,
                            history: [testStepKeys.step1, testStepKeys.step2]
                        })];
                case 1:
                    _a.sent();
                    views = wrapper.find("." + viewContentClassName);
                    expect(views.length).toBe(1);
                    expect(views.text()).toBe('Second Step');
                    return [2 /*return*/];
            }
        });
    }); });
    it('is renders the header back button if possible to go back', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var props, buttons;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    props = {
                        initialActiveViewKey: testStepKeys.step1,
                        showBackButton: true
                    };
                    wrapper = enzyme_1.mount(React.createElement(NavigationController_base_1.NavigationControllerBase, tslib_1.__assign({}, props), testSteps));
                    buttons = wrapper.find(Button_1.IconButton).map(function (node) {
                        return node;
                    });
                    expect(buttons.length).toBe(0);
                    return [4 /*yield*/, wrapper.childAt(0).setState({
                            activeViewIndex: 1,
                            history: [testStepKeys.step1, testStepKeys.step2]
                        })];
                case 1:
                    _a.sent();
                    buttons = wrapper.find(Button_1.IconButton).map(function (node) {
                        return node;
                    });
                    expect(buttons.length).toBe(1);
                    expect(buttons[0].props().iconProps.iconName).toEqual('Back');
                    return [2 /*return*/];
            }
        });
    }); });
    it('is renders the footer buttons', function () {
        var props = {
            initialActiveViewKey: testStepKeys.step2,
            showBackButton: true
        };
        wrapper = enzyme_1.mount(React.createElement(NavigationController_base_1.NavigationControllerBase, tslib_1.__assign({}, props), testSteps));
        var buttons = wrapper.find(Button_1.DefaultButton).map(function (node) {
            return node.text();
        });
        expect(buttons.length).toBe(2);
        expect(buttons).toEqual(['Previous', 'Next']);
    });
});
//# sourceMappingURL=NavigationController.test.js.map