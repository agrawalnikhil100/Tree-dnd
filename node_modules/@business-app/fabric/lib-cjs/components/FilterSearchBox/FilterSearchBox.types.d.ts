/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
/// <reference types="react" />
import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import { IRefObject, IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';
export interface IFilterSearchBox {
    /**
     * Sets focus to the search box
     */
    focus(): void;
    /**
     * Dismiss the menu from the filter button
     */
    dismissMenu(): void;
}
export interface IFilterItem {
    /**
     * Unique key for the item.
     */
    readonly key: string;
    /**
     * Display text for the item.
     */
    readonly text: string;
}
export interface IFilterSearchBoxProps {
    /**
     * Optional callback to access the FilterSearchBox interface. Use this instead of ref for accessing
     * the public methods and properties of the component.
     */
    readonly componentRef?: IRefObject<IFilterSearchBox>;
    /**
     * Call to provide customized styling that will layer on top of the variant rules.
     */
    readonly styles?: IStyleFunctionOrObject<IFilterSearchBoxStyleProps, IFilterSearchBoxStyles>;
    /**
     * Theme provided by High-Order Component.
     */
    readonly theme?: ITheme;
    /**
     * The various localized strings the component requires.
     */
    readonly strings: {
        /**
         * Placeholder for SearchBox
         */
        readonly searchBoxPlaceholder: string;
        /**
         * Optional string that will be passed to SearchBox clear button title text
         */
        readonly searchBoxClearButtonTitle?: string;
        /**
         * Optional string that will appear in a TooltipHost when the user hovers over the FilterSearchBox filter button.
         */
        readonly filterButtonTooltipText?: string;
    };
    /**
     * The current search text
     */
    readonly searchText: string;
    /**
     * Called whenever SearchBox value changed
     */
    readonly onSearchTextChange: (event?: React.ChangeEvent<HTMLInputElement>, text?: string) => void;
    /**
     * List of filters to choose between.
     */
    readonly filters?: IFilterItem[];
    /**
     * Currently selected filter key
     */
    readonly selectedFilterKey?: string;
    /**
     * Called when a filter item is selected
     */
    readonly onFilterChange?: (filterKey: string) => void;
    /**
     * If provided, the filter button will show this icon rather than the text of the selected filter.
     */
    readonly filterButtonIconName?: string;
    /**
     * Forces the callout of the filter button to match the width of the entire component
     */
    readonly filterCalloutMatchComponentWidth?: boolean;
}
export declare type IFilterSearchBoxStyleProps = Required<Pick<IFilterSearchBoxProps, 'theme'>>;
export interface IFilterSearchBoxStyles {
    /**
     * Styles for the root element.
     */
    readonly root?: IStyle;
    /**
     * Styles for the root element when the component is active.
     */
    readonly active?: IStyle;
    /**
     * Styles for the SearchBox
     */
    readonly searchBox?: IStyle;
    /**
     * Styles for the SearchBox Field
     */
    readonly searchBoxField?: IStyle;
    /**
     * Styles for the separator line
     */
    readonly separator?: IStyle;
    /**
     * Styles for the TooltipHost when `strings.filterButtonTooltipText` is provided
     */
    readonly tooltipHost?: IStyle;
    /**
     * Styles for the FilterButton root when `strings.filterButtonTooltipText` is not provided.
     * This style will be applied instead of `filterButtonRootInTooltipHost` when `strings.filterButtonTooltipText` is not provided
     */
    readonly filterButtonRoot?: IStyle;
    /**
     * Styles for the FilterButton root `strings.filterButtonTooltipText` is provided and the button is inside TooltipHost.
     * This style will be applied instead of `filterButtonRoot` when `strings.filterButtonTooltipText` is provided
     */
    readonly filterButtonRootInTooltipHost?: IStyle;
    /**
     * Styles for the FilterButton label
     */
    readonly filterButtonLabel?: IStyle;
    /**
     * Styles for the FilterButton label when there
     * is no label text
     */
    readonly filterButtonNoLabel?: IStyle;
    /**
     * Styles for the FilterButton text container
     */
    readonly filterButtonTextContainer?: IStyle;
}
