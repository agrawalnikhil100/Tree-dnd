"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WizardBasicExample = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var StepStatus_1 = require("../StepStatus");
var WizardTipsAndHelp_1 = require("../TipsAndHelp/WizardTipsAndHelp");
var TipsAndHelpCard_1 = require("../TipsAndHelpCard/TipsAndHelpCard");
var Wizard_1 = require("../Wizard");
var steps = [
    {
        name: 'Step 1',
        summary: ['Summary 1'],
        ariaDescription: 'Summary 1'
    },
    {
        name: 'Step 2',
        summary: ['Summary 2'],
        ariaDescription: 'Summary 2'
    },
    {
        name: 'Step 3',
        hasWarning: true,
        summary: ['Summary 3'],
        ariaDescription: 'Summary 3'
    },
    {
        name: 'Step 4',
        hasError: true,
        summary: ['Summary 4'],
        ariaDescription: 'Summary 4'
    },
    {
        name: 'Step 5',
        summary: ['Summary 5'],
        ariaDescription: 'Summary 5'
    }
];
var WizardBasicExample = /** @class */ (function (_super) {
    tslib_1.__extends(WizardBasicExample, _super);
    function WizardBasicExample() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            currentIndex: 0
        };
        _this.getStatuses = function () {
            return steps.map(function (s, index) {
                if (index >= _this.state.currentIndex) {
                    return StepStatus_1.StepStatus.Empty;
                }
                if (s.hasError) {
                    return StepStatus_1.StepStatus.Error;
                }
                if (s.hasWarning) {
                    return StepStatus_1.StepStatus.Warning;
                }
                return StepStatus_1.StepStatus.Valid;
            });
        };
        return _this;
    }
    WizardBasicExample.prototype.render = function () {
        var _this = this;
        return (React.createElement(Wizard_1.Wizard, { className: "my-wizard-example", progressProps: {
                currentIndex: this.state.currentIndex,
                stepNames: steps.map(function (s) { return s.name; }),
                stepStatuses: this.getStatuses(),
                stepSummaries: steps.map(function (s) { return s.summary; }),
                computeAriaDescription: function (index) { return steps[index].ariaDescription; },
                // this callback is optional in IWizardProgressProps, in an instance maybe use wizardStore.goToNthStep
                onProgressStepClick: this.setIndex,
                styles: {
                    root: {
                        flex: '0 0 auto',
                        width: '19vw',
                        minWidth: '183px',
                        maxWidth: '280px'
                    }
                },
                expandButtonLabel: 'Expand timeline',
                collapseButtonLabel: 'Collapse timeline'
            }, footerProps: {
                backButtonText: 'Back',
                canGoToNextStep: this.state.currentIndex < steps.length - 1,
                canGoToPreviousStep: this.state.currentIndex > 0,
                continueButtonText: 'Next',
                summaryText: 'Summary text',
                shouldDisplayBackButton: true,
                goToPreviousStep: function () {
                    _this.setState({
                        currentIndex: _this.state.currentIndex - 1
                    });
                },
                goToNextStep: function () {
                    _this.setState({
                        currentIndex: _this.state.currentIndex + 1
                    });
                }
            }, onRenderHeaderItems: function () { return 'Title'; }, onRenderHeaderFarItems: function () { return React.createElement("button", null, "Save"); }, onRenderStep: function () { return React.createElement("span", null,
                "This is step ",
                _this.state.currentIndex + 1); }, onRenderRightPane: function () { return (React.createElement(WizardTipsAndHelp_1.WizardTipsAndHelp, { title: "Tips", closeButtonText: "Close", styles: {
                    root: {
                        flex: '0 0 auto',
                        width: '21vw',
                        minWidth: '180px',
                        maxWidth: '272px'
                    }
                } },
                React.createElement(TipsAndHelpCard_1.TipsAndHelpCard, { card: {
                        title: 'Get help or send feedback',
                        content: 'Get the answers you need, or tell us about your experiences.',
                        action: {
                            iconName: 'Feedback',
                            name: 'Get help',
                            onClick: function () {
                                // eslint-disable-next-line no-console
                                console.log('help');
                            }
                        }
                    } }))); }, styles: {
                root: {
                    minHeight: '500px'
                }
            } }));
    };
    WizardBasicExample.prototype.setIndex = function (index) {
        this.setState({ currentIndex: index });
    };
    return WizardBasicExample;
}(React.Component));
exports.WizardBasicExample = WizardBasicExample;
//# sourceMappingURL=Wizard.Basic.Example.js.map