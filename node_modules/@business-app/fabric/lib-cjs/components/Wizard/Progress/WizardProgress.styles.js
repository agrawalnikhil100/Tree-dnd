"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStyles = void 0;
var tslib_1 = require("tslib");
var Styling_1 = require("@fluentui/react/lib/Styling");
var getStyles = function (props) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    var palette = props.theme.palette;
    var smallScreenSelector = '@media (max-width: 767px)';
    var step = {
        position: 'relative',
        display: 'flex',
        flexDirection: 'column',
        boxSizing: 'border-box',
        width: '100%',
        minHeight: 60,
        margin: 0,
        padding: '0 24px 8px 52px',
        border: 'none',
        background: 'none',
        fontFamily: 'inherit',
        fontSize: Styling_1.FontSizes.medium,
        textAlign: 'left',
        selectors: {
            '::after': {
                content: '""',
                position: 'absolute',
                top: 22,
                bottom: 2,
                left: 31,
                display: 'block',
                borderRight: "2px solid " + palette.neutralLight,
                selectors: (_a = {},
                    _a[Styling_1.HighContrastSelector] = {
                        borderRightWidth: 1
                    },
                    _a)
            },
            '.is-collapsed &': {
                selectors: (_b = {},
                    _b[smallScreenSelector] = {
                        flexDirection: 'row',
                        alignItems: 'flex-start',
                        padding: '0 0 12px 0',
                        minHeight: 'unset',
                        selectors: {
                            '::after': {
                                position: 'static',
                                flexGrow: 1,
                                minWidth: 24,
                                margin: '0.7em 0 0 0',
                                borderBottom: "2px solid " + palette.neutralLight
                            }
                        }
                    },
                    _b)
            }
        }
    };
    var icon = {
        position: 'absolute',
        left: 24,
        top: 2,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        selectors: {
            '.is-collapsed &': {
                selectors: (_c = {},
                    _c[smallScreenSelector] = {
                        position: 'static',
                        flex: '0 0 16px',
                        margin: '2px 8px 0 8px'
                    },
                    _c)
            }
        }
    };
    var validOrEmptyIcon = {
        border: "2px solid " + palette.neutralLight,
        boxSizing: 'border-box',
        borderRadius: '50%',
        width: 16,
        height: 16,
        overflow: 'hidden',
        background: 'transparent',
        fontSize: Styling_1.FontSizes.mini,
        textIndent: '20px' /* force hiding the icon in High Contrast (a transparent color is not sufficient) */
    };
    return {
        root: [
            'ba-wizard-progress',
            props.className,
            {
                position: 'relative',
                boxSizing: 'border-box',
                flex: '0 0 auto',
                width: '19vw',
                minWidth: 183,
                maxWidth: 280,
                padding: '32px 0 0 0',
                background: palette.white,
                borderRight: "1px solid " + palette.neutralLight,
                overflowY: 'auto',
                selectors: (_d = {},
                    _d[smallScreenSelector] = {
                        width: '100%',
                        maxWidth: 'none',
                        borderRight: 'none',
                        borderBottom: "1px solid " + palette.neutralLight,
                        padding: '16px 0 0 0'
                    },
                    _d['&.is-collapsed'] = {
                        selectors: (_e = {},
                            _e[smallScreenSelector] = {
                                padding: '12px 0 4px 0'
                            },
                            _e)
                    },
                    _d)
            }
        ],
        list: {
            listStyle: 'none',
            margin: 0,
            padding: 0,
            selectors: (_f = {},
                _f[smallScreenSelector] = {
                    marginRight: 50 /* margin for the collapse button */
                },
                _f['.is-collapsed &'] = {
                    selectors: (_g = {},
                        _g[smallScreenSelector] = {
                            display: 'flex',
                            justifyContent: 'center',
                            marginRight: 0
                        },
                        _g)
                },
                _f)
        },
        itemWrapper: {
            margin: 0,
            padding: 0,
            selectors: {
                '.is-collapsed &:not(:last-child)': {
                    selectors: (_h = {},
                        _h[smallScreenSelector] = {
                            width: 64
                        },
                        _h)
                }
            }
        },
        passedStep: tslib_1.__assign({}, step),
        currentStep: [
            'ba-wizard-progress-current',
            tslib_1.__assign(tslib_1.__assign({}, step), { fontWeight: Styling_1.FontWeights.semibold })
        ],
        futureStep: tslib_1.__assign(tslib_1.__assign({}, step), { color: palette.neutralSecondary }),
        lastStep: {
            selectors: {
                '::after': {
                    display: 'none'
                }
            }
        },
        label: {
            selectors: {
                '.is-collapsed &': {
                    selectors: (_j = {},
                        _j[smallScreenSelector] = {
                            display: 'none'
                        },
                        _j)
                }
            }
        },
        summary: {
            display: 'flex',
            fontSize: Styling_1.FontSizes.small,
            fontWeight: Styling_1.FontWeights.regular,
            color: palette.themePrimary,
            selectors: {
                ':first-of-type': {
                    marginTop: 2
                },
                '.is-collapsed &': {
                    selectors: (_k = {},
                        _k[smallScreenSelector] = {
                            display: 'none'
                        },
                        _k)
                }
            }
        },
        validIcon: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, icon), validOrEmptyIcon), { backgroundColor: palette.themePrimary, borderWidth: 0, color: palette.white, textIndent: '0', selectors: tslib_1.__assign(tslib_1.__assign({}, icon.selectors), (_l = {}, _l[Styling_1.HighContrastSelector] = {
                borderColor: 'WindowText',
                backgroundColor: 'Window',
                borderWidth: 1
            }, _l)) }),
        warningIcon: tslib_1.__assign(tslib_1.__assign({}, icon), { top: 0, fontSize: Styling_1.FontSizes.mediumPlus, color: palette.yellow }),
        errorIcon: tslib_1.__assign(tslib_1.__assign({}, icon), { top: 0, fontSize: Styling_1.FontSizes.mediumPlus, color: palette.redDark }),
        emptyIcon: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, icon), validOrEmptyIcon), { selectors: tslib_1.__assign(tslib_1.__assign({}, icon.selectors), (_m = {}, _m[Styling_1.HighContrastSelector] = {
                borderColor: 'GrayText',
                borderWidth: 1
            }, _m)) }),
        currentEmptyIcon: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, icon), validOrEmptyIcon), { backgroundColor: palette.themeTertiary, borderWidth: 0, selectors: tslib_1.__assign(tslib_1.__assign({}, icon.selectors), (_o = {}, _o[Styling_1.HighContrastSelector] = {
                borderColor: 'GrayText',
                borderWidth: 1,
                backgroundColor: 'Highlight'
            }, _o)) }),
        toggle: {
            display: 'none',
            boxSizing: 'border-box',
            position: 'absolute',
            right: 12,
            top: 12,
            margin: 0,
            padding: 4,
            border: 'none',
            background: 'transparent',
            cursor: 'pointer',
            selectors: (_p = {},
                _p[smallScreenSelector] = {
                    display: 'block'
                },
                _p.i = {
                    fontSize: Styling_1.FontSizes.mediumPlus,
                    color: palette.neutralPrimary
                },
                _p['.is-collapsed &'] = {
                    top: 0,
                    bottom: 0,
                    left: 0,
                    width: '100%',
                    selectors: {
                        i: {
                            display: 'none'
                        }
                    }
                },
                _p)
        },
        visuallyHidden: [Styling_1.hiddenContentStyle]
    };
};
exports.getStyles = getStyles;
//# sourceMappingURL=WizardProgress.styles.js.map