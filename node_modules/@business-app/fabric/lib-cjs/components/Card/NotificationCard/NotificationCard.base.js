"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationCardBase = void 0;
var tslib_1 = require("tslib");
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
var React = require("react");
var Icon_1 = require("@fluentui/react/lib/Icon");
var Text_1 = require("@fluentui/react/lib/Text");
var Link_1 = require("@fluentui/react/lib/Link");
var Button_1 = require("@fluentui/react/lib/Button");
var ProgressIndicator_1 = require("@fluentui/react/lib/ProgressIndicator");
var Spinner_1 = require("@fluentui/react/lib/Spinner");
var Persona_1 = require("@fluentui/react/lib/Persona");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var Card_1 = require("./../Card");
var getClassNames = Utilities_1.classNamesFunction();
var NotificationCardBase = function (props) {
    var className = props.className, theme = props.theme, styles = props.styles, isNew = props.isNew, notificationType = props.notificationType, message = props.message, timestamp = props.timestamp, heading = props.heading, subHeading = props.subHeading, actionLinks = props.actionLinks, hasCloseButton = props.hasCloseButton, hasSnoozeButton = props.hasSnoozeButton, iconProps = props.iconProps, persona = props.persona, spinner = props.spinner, progressStatus = props.progressStatus, percentComplete = props.percentComplete;
    var classNames = getClassNames(styles, {
        theme: theme,
        className: className,
        isNew: isNew,
        notificationType: notificationType
    });
    var cardRef = React.createRef();
    var onSnooze = React.useCallback(function () { var _a; return (_a = props.onSnooze) === null || _a === void 0 ? void 0 : _a.call(props); }, [props.onSnooze]);
    var onDismiss = React.useCallback(function () { var _a; return (_a = props.onDismiss) === null || _a === void 0 ? void 0 : _a.call(props); }, [props.onDismiss]);
    var onMouseEnter = React.useCallback(function (event) { var _a; return (_a = props.onMouseEnter) === null || _a === void 0 ? void 0 : _a.call(props, event); }, [props.onMouseEnter]);
    var onMouseLeave = React.useCallback(function (event) { var _a; return (_a = props.onMouseLeave) === null || _a === void 0 ? void 0 : _a.call(props, event); }, [props.onMouseLeave]);
    return (React.createElement(Card_1.Card, { ref: cardRef, className: classNames.root, width: 308, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave },
        React.createElement("div", { className: classNames.imageWrapper },
            (iconProps || notificationType === 'Meeting' || (notificationType === 'Progress' && !spinner)) && (React.createElement(Icon_1.Icon, tslib_1.__assign({ className: classNames.icon, iconName: (notificationType === 'Meeting' && 'Event') ||
                    (notificationType === 'Progress' && 'CloudUpload') }, iconProps))),
            spinner && React.createElement(Spinner_1.Spinner, { className: classNames.icon, size: Spinner_1.SpinnerSize.medium }),
            persona && React.createElement(Persona_1.Persona, tslib_1.__assign({ className: classNames.persona, size: Persona_1.PersonaSize.size32 }, persona))),
        React.createElement("div", { className: classNames.timeDismissWrapper },
            timestamp && React.createElement("div", { className: classNames.timestamp }, timestamp),
            hasCloseButton && (React.createElement(Button_1.IconButton, { className: classNames.closeButton, title: 'Close', ariaLabel: 'Close', iconProps: { iconName: 'ChromeClose' }, onClick: onDismiss, styles: {
                    icon: {
                        fontSize: theme.fonts.small.fontSize
                    }
                } })),
            hasSnoozeButton && (React.createElement(Button_1.IconButton, { className: classNames.closeButton, title: 'Snooze', ariaLabel: 'Snooze', iconProps: { iconName: 'AlarmClock' }, onClick: onSnooze }))),
        React.createElement("div", { className: classNames.contentWrapper },
            React.createElement("div", { className: classNames.cardHeadingWrapper },
                React.createElement("label", { className: classNames.cardHeading },
                    notificationType === 'Peer' && React.createElement(Icon_1.Icon, { className: classNames.peerIcon, iconName: "Accounts" }),
                    heading),
                subHeading && React.createElement("span", { className: classNames.cardSubHeading }, subHeading)),
            message && !spinner && (React.createElement(Text_1.Text, { className: classNames.messageWrapper, variant: 'medium' }, message)),
            notificationType === 'Progress' && !spinner && (React.createElement(ProgressIndicator_1.ProgressIndicator, { percentComplete: percentComplete })),
            progressStatus && !spinner && React.createElement("span", { className: classNames.cardSubHeading }, progressStatus),
            notificationType === 'Progress' && spinner && (React.createElement(Text_1.Text, { className: classNames.messageWrapper, variant: 'medium' }, message)), actionLinks === null || actionLinks === void 0 ? void 0 :
            actionLinks.map(function (_a) {
                var link = _a.link, text = _a.text;
                return (React.createElement(Link_1.Link, { key: text, className: classNames.actionButtons, href: link }, text));
            }))));
};
exports.NotificationCardBase = NotificationCardBase;
//# sourceMappingURL=NotificationCard.base.js.map