"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enzyme_1 = require("enzyme");
var React = require("react");
var Helpers_1 = require("./Helpers");
var HighlightedText_1 = require("./HighlightedText");
describe('HighlightedText', function () {
    var mockLabels = {
        beginHighlightedText: 'Begin highlighted text',
        endHighlightedText: 'End highlighted text'
    };
    describe('toStrings', function () {
        var wrapper;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var instance;
        var toStrings;
        beforeAll(function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                wrapper = enzyme_1.mount(React.createElement(HighlightedText_1.HighlightedText, { text: 'Hello world', highlights: [], labels: mockLabels }));
                instance = wrapper.childAt(0).instance();
                toStrings = instance.toStrings;
                return [2 /*return*/];
            });
        }); });
        afterAll(function () {
            wrapper.unmount();
        });
        function getHighlight(startIndex, length) {
            return {
                startIndex: startIndex,
                length: length
            };
        }
        function highlighted(str) {
            return {
                str: str,
                isHighlighted: true
            };
        }
        function unhighlighted(str) {
            return {
                str: str,
                isHighlighted: false
            };
        }
        it('highlights nothing if no highlights', function () {
            expect(toStrings('Hello world', [])).toEqual([unhighlighted('Hello world')]);
        });
        it('highlights appropriately with non-overlapping, in-bounds, positive-length highlights', function () {
            expect(toStrings('Hello world', [getHighlight(0, 5)])).toEqual([
                highlighted('Hello'),
                unhighlighted(' world')
            ]);
            expect(toStrings('Hello world', [getHighlight(0, 5), getHighlight(7, 2)])).toEqual([
                highlighted('Hello'),
                unhighlighted(' w'),
                highlighted('or'),
                unhighlighted('ld')
            ]);
        });
        it('handles out-of-bounds highlights', function () {
            expect(toStrings('Hello world', [getHighlight(-1, 2)])).toEqual([
                highlighted('H'),
                unhighlighted('ello world')
            ]);
        });
        it('highlights overlapping highlights', function () {
            expect(toStrings('Hello world', [getHighlight(0, 2), getHighlight(1, 4)])).toEqual([
                highlighted('Hello'),
                unhighlighted(' world')
            ]);
        });
        it('highlights backwards with negative indices', function () {
            expect(toStrings('Hello world', [getHighlight(5, -5)])).toEqual([
                highlighted('Hello'),
                unhighlighted(' world')
            ]);
            expect(toStrings('Hello world', [getHighlight(2, 1), getHighlight(4, -3)])).toEqual([
                unhighlighted('H'),
                highlighted('ell'),
                unhighlighted('o world')
            ]);
        });
        it('highlights multi-byte and RTL', function () {
            var text = 'Hello ðŸ¤  world';
            var actual = toStrings(text, Helpers_1.calculateWordHighlights(text, ['ðŸ¤ ']));
            var expected = [unhighlighted('Hello '), highlighted('ðŸ¤ '), unhighlighted(' world')];
            expect(actual).toEqual(expected);
            var text2 = 'the name of this state in arabic is \u202BÙ…ØµØ±\u202C, yes?';
            var actual2 = toStrings(text2, Helpers_1.calculateWordHighlights(text2, ['\u202BÙ…ØµØ±\u202C']));
            var expected2 = [
                unhighlighted('the name of this state in arabic is '),
                highlighted('\u202BÙ…ØµØ±\u202C'),
                unhighlighted(', yes?')
            ];
            expect(actual2).toEqual(expected2);
        });
    });
});
//# sourceMappingURL=HighlightedText.test.js.map