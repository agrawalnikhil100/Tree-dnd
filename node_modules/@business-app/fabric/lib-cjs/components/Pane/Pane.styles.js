"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStyles = void 0;
var tslib_1 = require("tslib");
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
var Styling_1 = require("@fluentui/react/lib/Styling");
var Pane_types_1 = require("./Pane.types");
var GlobalClassNames = {
    root: 'ba-Pane',
    main: 'ba-Pane-main',
    contentInner: 'ba-Pane-contentInner',
    scrollableContent: 'ba-Pane-scrollableContent',
    navigation: 'ba-Pane-navigation',
    commands: 'ba-Pane-commands',
    closeButton: 'ba-Pane-closeButton ba-PaneAction-close',
    header: 'ba-Pane-header',
    headerText: 'ba-Pane-headerText',
    content: 'ba-Pane-content',
    isOpen: 'is-open',
    hasCloseButton: 'ba-Pane--hasCloseButton'
};
var paneWidth = {
    full: '100%',
    sm: 340,
    md: 592,
    lg: 976
};
var paneMargin = {
    auto: 'auto',
    none: 0
};
var sharedPaddingStyles = {
    paddingLeft: '16px',
    paddingRight: '16px'
};
var smallPanelSelectors = {
    width: paneWidth.sm,
    minWidth: paneWidth.sm
};
var mediumPanelSelectors = {
    width: paneWidth.md,
    minWidth: paneWidth.md
};
var largePanelSelectors = {
    width: paneWidth.lg,
    minWidth: paneWidth.lg
};
var getPaneBreakpoints = function (type) {
    var selectors;
    switch (type) {
        case Pane_types_1.PaneSize.small:
            selectors = tslib_1.__assign({}, smallPanelSelectors);
            break;
        case Pane_types_1.PaneSize.medium:
            selectors = tslib_1.__assign({}, mediumPanelSelectors);
            break;
        case Pane_types_1.PaneSize.large:
            selectors = tslib_1.__assign({}, largePanelSelectors);
            break;
        default:
            break;
    }
    return selectors;
};
var getStyles = function (props) {
    var _a, _b, _c;
    var className = props.className, hasCloseButton = props.hasCloseButton, headerClassName = props.headerClassName, isOpen = props.isOpen, theme = props.theme, _d = props.type, type = _d === void 0 ? Pane_types_1.PaneSize.small : _d;
    var palette = theme.palette, effects = theme.effects, fonts = theme.fonts;
    var classNames = Styling_1.getGlobalClassNames(GlobalClassNames, theme);
    return {
        root: [
            classNames.root,
            theme.fonts.medium,
            isOpen && classNames.isOpen,
            hasCloseButton && classNames.hasCloseButton,
            tslib_1.__assign(tslib_1.__assign({ pointerEvents: 'auto', position: 'relative', display: 'flex', flexDirection: 'column', overflowX: 'hidden', overflowY: 'auto', top: 0, left: 'auto', right: 0, bottom: 0 }, getPaneBreakpoints(type)), { height: '100%', backgroundColor: 'rgb(255, 255, 255)', borderLeft: "1px solid " + palette.neutralLight, borderRight: "1px solid " + palette.neutralLight, boxShadow: 'none', WebkitOverflowScrolling: 'touch', selectors: (_a = {},
                    _a[Styling_1.HighContrastSelector] = {
                        borderLeft: "3px solid " + palette.neutralLight,
                        borderRight: "3px solid " + palette.neutralLight
                    },
                    _a) }),
            isOpen && Styling_1.AnimationClassNames.slideRightIn40,
            isOpen && Styling_1.AnimationClassNames.slideLeftIn40,
            !isOpen && Styling_1.AnimationClassNames.slideLeftOut40,
            !isOpen && Styling_1.AnimationClassNames.slideRightOut40,
            className
        ],
        closeButton: [
            classNames.closeButton,
            {
                position: 'absolute',
                top: '0px',
                left: 'auto',
                right: '0px',
                marginTop: '14px',
                marginRight: '14px',
                marginBottom: '14px',
                marginLeft: '14px',
                flexShrink: '0',
                color: theme.palette.neutralSecondary,
                fontSize: Styling_1.IconFontSizes.large,
                selectors: (_b = {},
                    _b["@media (min-width: " + Styling_1.ScreenWidthMinXLarge + "px)"] = {
                        marginTop: '14px'
                    },
                    _b[':hover'] = { color: theme.palette.neutralPrimary },
                    _b)
            }
        ],
        contentInner: [
            classNames.contentInner,
            {
                display: 'flex',
                flexDirection: 'column',
                flexGrow: 1,
                overflowY: 'hidden'
            }
        ],
        header: [
            classNames.header,
            sharedPaddingStyles,
            {
                margin: '14px 0',
                flexShrink: 0,
                selectors: (_c = {},
                    _c["@media (min-width: " + Styling_1.ScreenWidthMinXLarge + "px)"] = {
                        marginTop: '14px'
                    },
                    _c)
            }
        ],
        headerText: [
            classNames.headerText,
            fonts.xLarge,
            {
                color: palette.neutralPrimary,
                lineHeight: '27px',
                margin: 0,
                overflowWrap: 'break-word',
                wordWrap: 'break-word',
                wordBreak: 'break-word',
                hyphens: 'auto'
            },
            headerClassName
        ],
        scrollableContent: [
            classNames.scrollableContent,
            sharedPaddingStyles,
            {
                overflowY: 'auto'
            }
        ],
        content: [
            classNames.content,
            sharedPaddingStyles,
            {
                marginBottom: 0,
                paddingBottom: 20
            }
        ]
    };
};
exports.getStyles = getStyles;
//# sourceMappingURL=Pane.styles.js.map