/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import { IRenderFunction, IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
export declare enum PaneSize {
    small = 0,
    medium = 1,
    large = 2
}
export interface IPaneProps {
    /**
     * Whether the pane is displayed.
     * If true, will cause pane to stay open even if dismissed.
     * If false, will cause pane to stay hidden.
     * If undefined, will allow the pane to control its own visility through open/dismiss methods.
     * @defaultvalue undefined
     */
    isOpen?: boolean;
    /**
     * Has the close button visible.
     * @defaultvalue true
     */
    hasCloseButton?: boolean;
    /**
     * Header text for the Pane.
     * @defaultvalue ""
     */
    headerText?: string;
    /**
     * The props for header text container.
     */
    headerTextProps?: React.HTMLAttributes<HTMLDivElement>;
    /**
     * A callback function for when the pane is closed, before the animation completes.
     * If the pane should NOT be dismissed based on some keyboard event, then simply call ev.preventDefault() on it
     */
    onDismiss?: (ev?: React.SyntheticEvent<HTMLElement>) => void;
    /**
     * Additional css class to apply to the Pane
     * @defaultvalue undefined
     */
    className?: string;
    /**
     * Type of the pane.
     * @defaultvalue PaneType.small
     */
    type?: PaneSize;
    /**
     * Optional custom renderer for header region. Replaces current title
     */
    onRenderHeader?: IPaneHeaderRenderer;
    /**
     * Optional custom renderer for body region. Replaces any children passed into the component.
     */
    onRenderBody?: IRenderFunction<IPaneProps>;
    /**
     * Aria label on close button
     */
    closeButtonAriaLabel?: string;
    /**
     * Theme provided by the Higher Order Component
     */
    theme?: ITheme;
    /**
     * Style function to be passed in to override the themed or default styles
     */
    styles?: IStyleFunctionOrObject<IPaneStyleProps, IPaneStyles>;
}
/**
 * Renderer function which takes an additional parameter, the ID to use for the element containing
 * the pane's title. This allows the `aria-labelledby` for the pane popup to work correctly.
 * Note that if `headerTextId` is provided, it **must** be used on an element, or screen readers
 * will be confused by the reference to a nonexistent ID.
 * {@docCategory Pane}
 */
export interface IPaneHeaderRenderer extends IRenderFunction<IPaneProps> {
    /**
     * @param props - Props given to the pane
     * @param defaultRender - Default header renderer. If using this renderer in code that does not
     * assign `headerTextId` to an element elsewhere, it **must** be passed to this function.
     * @param headerTextId - If provided, this **must** be used as the ID of an element containing the
     * pane's title, because the pane popup uses this ID as its aria-labelledby.
     */
    (props?: IPaneProps, defaultRender?: IPaneHeaderRenderer, headerTextId?: string | undefined): JSX.Element | null;
}
export interface IPaneStyles {
    /**
     * Style for the root element.
     */
    root: IStyle;
    /**
     * Style for the Body and Footer container element.
     */
    contentInner: IStyle;
    /**
     * Style for the scrollable content area container element.
     */
    scrollableContent: IStyle;
    /**
     * Style for the close button IconButton element.
     */
    closeButton: IStyle;
    /**
     * Style for the header container div element.
     */
    header: IStyle;
    /**
     * Style for the header inner p element.
     */
    headerText: IStyle;
    /**
     * Style for the body div element.
     */
    content: IStyle;
}
export interface IPaneStyleProps {
    /**
     * Theme provided by High-Order Component.
     */
    theme?: ITheme;
    /**
     * Accept custom classNames
     */
    className?: string;
    /**
     * Is pane open
     */
    isOpen?: boolean;
    /**
     * pane has close button
     */
    hasCloseButton?: boolean;
    /**
     * Optional parameter to provider the class name for header text
     */
    headerClassName?: string;
    /**
     * Is pane hidden on dismiss
     */
    isHiddenOnDismiss?: boolean;
    /**
     * Type of the pane.
     * @defaultvalue PaneType.small
     */
    type?: PaneSize;
}
