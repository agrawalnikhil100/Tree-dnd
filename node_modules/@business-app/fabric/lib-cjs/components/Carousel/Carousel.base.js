"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CarouselBase = void 0;
var tslib_1 = require("tslib");
var Button_1 = require("@fluentui/react/lib/Button");
var FocusZone_1 = require("@fluentui/react/lib/FocusZone");
var Styling_1 = require("@fluentui/react/lib/Styling");
var Tooltip_1 = require("@fluentui/react/lib/Tooltip");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var React = require("react");
var Carousel_constants_1 = require("./Carousel.constants");
var getClassNames = Utilities_1.classNamesFunction();
/**
 * Provides a common carousel format
 *
 * @export
 * @class Carousel
 * @extends {React.Component<ICarouselProps>}
 */
var CarouselBase = /** @class */ (function (_super) {
    tslib_1.__extends(CarouselBase, _super);
    function CarouselBase(props) {
        var _this = _super.call(this, props) || this;
        _this.goToNextSlide = function () {
            var _a = _this.props, items = _a.items, onNext = _a.onNext;
            var selectedIndex = _this.state.selectedIndex;
            _this.goToSlideIndex((selectedIndex + 1) % items.length);
            onNext === null || onNext === void 0 ? void 0 : onNext(selectedIndex);
        };
        _this.goToPreviousSlide = function () {
            var _a = _this.props, items = _a.items, onPrevious = _a.onPrevious;
            var selectedIndex = _this.state.selectedIndex;
            _this.goToSlideIndex((items.length + (selectedIndex - 1)) % items.length);
            onPrevious === null || onPrevious === void 0 ? void 0 : onPrevious(selectedIndex);
        };
        _this._canShowSkip = function () {
            var skipButton = _this.props.skipButton;
            return (skipButton === null || skipButton === void 0 ? void 0 : skipButton.onSkip) !== undefined && _this.state.selectedIndex === 0;
        };
        _this._canShowDismiss = function () {
            var _a = _this.props, items = _a.items, doneButton = _a.doneButton;
            return (doneButton === null || doneButton === void 0 ? void 0 : doneButton.onDone) !== undefined && _this.state.selectedIndex === items.length - 1;
        };
        _this._togglePlayPause = function () {
            _this.setState(function (state) { return ({
                isAutoplaySuspended: !state.isAutoplayButtonPaused,
                isAutoplayButtonPaused: !state.isAutoplayButtonPaused
            }); });
        };
        _this._suspend = function () {
            _this.setState({ isAutoplaySuspended: true });
        };
        _this._unSuspend = function () {
            _this.setState({ isAutoplaySuspended: false });
        };
        _this._areItemsEqual = function (prevItems, items) {
            if (prevItems.length !== items.length) {
                return false;
            }
            for (var i = 0; i < items.length; i++) {
                if (items[i] !== prevItems[i]) {
                    return false;
                }
            }
            return true;
        };
        var isAutoPlayDisabled = props.isAutoPlayDisabled;
        _this.state = {
            selectedIndex: 0,
            isAutoplaySuspended: isAutoPlayDisabled,
            isAutoplayButtonPaused: isAutoPlayDisabled,
            tooltipIndicatorsProps: _this._getTooltipIndicatorsProps()
        };
        return _this;
    }
    CarouselBase.prototype.componentDidMount = function () {
        this._updatePlayback();
    };
    CarouselBase.prototype.componentDidUpdate = function (prevProps, prevState) {
        var _a = this.props, isAutoPlayDisabled = _a.isAutoPlayDisabled, delay = _a.delay, items = _a.items, indicatorButtonsAriaLabel = _a.indicatorButtonsAriaLabel;
        var _b = this.state, isAutoplaySuspended = _b.isAutoplaySuspended, isAutoplayButtonPaused = _b.isAutoplayButtonPaused;
        if (prevState.isAutoplaySuspended !== isAutoplaySuspended ||
            prevState.isAutoplayButtonPaused !== isAutoplayButtonPaused ||
            prevProps.delay !== delay) {
            this._updatePlayback();
        }
        else if (prevProps.isAutoPlayDisabled !== isAutoPlayDisabled) {
            this.setState({
                isAutoplaySuspended: isAutoPlayDisabled,
                isAutoplayButtonPaused: isAutoPlayDisabled
            }, this._updatePlayback);
        }
        if (!this._areItemsEqual(prevProps.items, items) ||
            !this._areItemsEqual(prevProps.indicatorButtonsAriaLabel, indicatorButtonsAriaLabel)) {
            this.setState({
                selectedIndex: 0,
                tooltipIndicatorsProps: this._getTooltipIndicatorsProps()
            }, this._updatePlayback);
        }
    };
    CarouselBase.prototype.componentWillUnmount = function () {
        window.clearInterval(this.timer);
    };
    CarouselBase.prototype.render = function () {
        var _a = this.props, hideIndicators = _a.hideIndicators, hideNavigation = _a.hideNavigation, items = _a.items, orderIndicatorsBeforeControls = _a.orderIndicatorsBeforeControls, theme = _a.theme, className = _a.className, styles = _a.styles;
        var selectedIndex = this.state.selectedIndex;
        var classNames = getClassNames(styles, {
            theme: theme,
            className: className
        });
        return (React.createElement("div", { className: classNames.root, onMouseEnter: this._suspend, onMouseLeave: this._unSuspend, onFocus: this._suspend, onBlur: this._unSuspend },
            React.createElement("div", { className: classNames.itemWrapper }, items[selectedIndex]),
            orderIndicatorsBeforeControls ? (React.createElement(React.Fragment, null,
                !hideIndicators && this._renderIndicators(classNames),
                !hideNavigation && this._renderControls(classNames))) : (React.createElement(React.Fragment, null,
                !hideNavigation && this._renderControls(classNames),
                !hideIndicators && this._renderIndicators(classNames)))));
    };
    CarouselBase.prototype.goToSlideIndex = function (index) {
        var _a = this.props, items = _a.items, onItemSelected = _a.onItemSelected;
        var item = items[index];
        if (item) {
            this.setState({ selectedIndex: index }, onItemSelected ? function () { return onItemSelected(item, index); } : undefined);
        }
    };
    CarouselBase.prototype._renderControls = function (classNames) {
        var _a = this.props, navPreviousButtonAriaLabel = _a.navPreviousButtonAriaLabel, navNextButtonAriaLabel = _a.navNextButtonAriaLabel, navPreviousButtonLabel = _a.navPreviousButtonLabel, navNextButtonLabel = _a.navNextButtonLabel, useControlLabels = _a.useControlLabels, disableNavigationLoop = _a.disableNavigationLoop, items = _a.items, doneButton = _a.doneButton, skipButton = _a.skipButton;
        var tooltipControlStyles = classNames.subComponentStyles.tooltipControl({});
        var controlStyles = classNames.subComponentStyles.control({});
        var tooltipPrevStyles = Styling_1.mergeStyleSets({
            root: ['ba-Carousel-tooltipControl-previous']
        }, tooltipControlStyles);
        var tooltipNextStyles = Styling_1.mergeStyleSets({
            root: ['ba-Carousel-tooltipControl-next']
        }, tooltipControlStyles);
        var controlPrevStyles = Styling_1.mergeStyleSets({
            root: ['ba-Carousel-control-previous']
        }, controlStyles);
        var controlNextStyles = Styling_1.mergeStyleSets({
            root: ['ba-Carousel-control-next']
        }, controlStyles);
        var showSkip = this._canShowSkip();
        var showDismiss = this._canShowDismiss();
        var showPrev = !disableNavigationLoop || this.state.selectedIndex > 0 || showSkip;
        var showNext = !disableNavigationLoop || this.state.selectedIndex < items.length - 1 || showDismiss;
        var prevProps = showSkip
            ? {
                'aria-label': skipButton.skipButtonAriaLabel,
                styles: controlPrevStyles,
                onClick: skipButton.onSkip
            }
            : {
                'aria-label': navPreviousButtonAriaLabel,
                styles: controlPrevStyles,
                onClick: this.goToPreviousSlide
            };
        var nextProps = showDismiss
            ? {
                'aria-label': doneButton.doneButtonAriaLabel,
                styles: controlNextStyles,
                onClick: doneButton.onDone
            }
            : {
                'aria-label': navNextButtonAriaLabel,
                styles: controlNextStyles,
                onClick: this.goToNextSlide
            };
        var prevLabel = showSkip ? skipButton.skipButtonLabel : navPreviousButtonLabel || 'Back';
        var nextLabel = showDismiss ? doneButton.doneButtonLabel : navNextButtonLabel || 'Next';
        var tooltipControls = function () { return (React.createElement(React.Fragment, null,
            showPrev && (React.createElement(Tooltip_1.TooltipHost, { content: navPreviousButtonAriaLabel, styles: tooltipPrevStyles },
                React.createElement(Button_1.IconButton, tslib_1.__assign({ iconProps: { iconName: 'ChevronLeftMed' } }, prevProps)))),
            showNext && (React.createElement(Tooltip_1.TooltipHost, { content: navNextButtonAriaLabel, styles: tooltipNextStyles },
                React.createElement(Button_1.IconButton, tslib_1.__assign({ iconProps: { iconName: 'ChevronRightMed' } }, nextProps)))))); };
        var labelControls = function () { return (React.createElement(React.Fragment, null,
            showPrev && (React.createElement(Tooltip_1.TooltipHost, { styles: tooltipPrevStyles },
                React.createElement(Button_1.DefaultButton, tslib_1.__assign({ styles: tooltipPrevStyles }, prevProps, { text: prevLabel })))),
            showNext && (React.createElement(Tooltip_1.TooltipHost, { styles: tooltipNextStyles },
                React.createElement(Button_1.DefaultButton, tslib_1.__assign({ styles: tooltipNextStyles }, nextProps, { text: nextLabel })))))); };
        return (React.createElement("div", { className: classNames.controlsWrapper }, useControlLabels ? labelControls() : tooltipControls()));
    };
    CarouselBase.prototype._renderIndicator = function (classNames, index, content, isSelected) {
        var _this = this;
        var disableIndicators = this.props.disableIndicators;
        var indicatorStyle = classNames.subComponentStyles.indicator({});
        var iconName = isSelected ? 'CircleFill' : 'CircleRing';
        var indicatorProps = {
            role: 'tab',
            key: index,
            'aria-label': content,
            'aria-selected': isSelected,
            iconProps: { iconName: iconName },
            styles: indicatorStyle,
            className: isSelected ? 'is-active' : undefined
        };
        return disableIndicators ? (React.createElement(Button_1.IconButton, tslib_1.__assign({}, indicatorProps))) : (React.createElement(Button_1.IconButton, tslib_1.__assign({}, indicatorProps, { onClick: function () { return _this.goToSlideIndex(index); }, onFocus: function () { return _this.goToSlideIndex(index); } })));
    };
    CarouselBase.prototype._renderIndicators = function (classNames) {
        var _this = this;
        var _a = this.props, items = _a.items, playButtonAriaLabel = _a.playButtonAriaLabel, pauseButtonAriaLabel = _a.pauseButtonAriaLabel, hidePlayButton = _a.hidePlayButton;
        var tooltipIndicatorsProps = this.state.tooltipIndicatorsProps;
        var _b = this.state, selectedIndex = _b.selectedIndex, isAutoplayButtonPaused = _b.isAutoplayButtonPaused;
        var toggleStyle = classNames.subComponentStyles.toggle({});
        var toggleButtonAriaLabel = isAutoplayButtonPaused ? playButtonAriaLabel : pauseButtonAriaLabel;
        return (React.createElement("div", { className: classNames.indicatorsWrapper },
            React.createElement(FocusZone_1.FocusZone, { direction: FocusZone_1.FocusZoneDirection.horizontal, isCircularNavigation: true, role: "tablist" }, items.map(function (item, index) {
                var isSelected = index === selectedIndex;
                var _a = tooltipIndicatorsProps[index], id = _a.id, content = _a.content;
                return (React.createElement(Tooltip_1.TooltipHost, { key: id, id: id, content: content }, _this._renderIndicator(classNames, index, content, isSelected)));
            })),
            !hidePlayButton && (React.createElement(Tooltip_1.TooltipHost, { content: toggleButtonAriaLabel },
                React.createElement(Button_1.IconButton, { "aria-label": toggleButtonAriaLabel, iconProps: { iconName: isAutoplayButtonPaused ? 'Play' : 'Pause' }, styles: Styling_1.mergeStyleSets({ root: ['ba-Carousel-play'] }, toggleStyle), onClick: this._togglePlayPause })))));
    };
    CarouselBase.prototype._getTooltipIndicatorsProps = function () {
        var _a = this.props, items = _a.items, indicatorButtonsAriaLabel = _a.indicatorButtonsAriaLabel;
        var isIndicatorsAriaLabelArray = Array.isArray(indicatorButtonsAriaLabel) && indicatorButtonsAriaLabel.length === items.length;
        return isIndicatorsAriaLabelArray
            ? indicatorButtonsAriaLabel.map(function (content) { return ({
                id: Utilities_1.getId('ba-carousel-tooltip'),
                content: content
            }); })
            : items.map(function () { return ({
                id: Utilities_1.getId('ba-carousel-tooltip'),
                content: indicatorButtonsAriaLabel
            }); });
    };
    CarouselBase.prototype._updatePlayback = function () {
        var _this = this;
        var delay = this.props.delay;
        var _a = this.state, isAutoplaySuspended = _a.isAutoplaySuspended, isAutoplayButtonPaused = _a.isAutoplayButtonPaused;
        window.clearInterval(this.timer);
        if (!(isAutoplaySuspended || isAutoplayButtonPaused)) {
            this.timer = window.setInterval(function () { return _this.goToNextSlide(); }, delay || Carousel_constants_1.TIMER_DELAY_DEFAULT);
        }
    };
    return CarouselBase;
}(React.Component));
exports.CarouselBase = CarouselBase;
//# sourceMappingURL=Carousel.base.js.map