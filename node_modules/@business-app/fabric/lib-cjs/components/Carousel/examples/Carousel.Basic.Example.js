"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CarouselBasicExample = void 0;
var tslib_1 = require("tslib");
var Slider_1 = require("@fluentui/react/lib/Slider");
var Toggle_1 = require("@fluentui/react/lib/Toggle");
var React = require("react");
var __1 = require("..");
var Carousel_Example_Data_1 = require("./Carousel.Example.Data");
var CarouselBasicExample = /** @class */ (function (_super) {
    tslib_1.__extends(CarouselBasicExample, _super);
    function CarouselBasicExample(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            isAutoPlayDisabled: false,
            isNavigationVisible: true,
            isIndicatorsVisible: true,
            isHidePlayButton: false,
            isDisableIndicators: false,
            isUseControlLabels: false,
            isDisableLooping: false,
            delayInMs: 4000
        };
        return _this;
    }
    CarouselBasicExample.prototype.render = function () {
        var _this = this;
        var _a = this.state, autoPlayDisabled = _a.isAutoPlayDisabled, navigationVisible = _a.isNavigationVisible, indicatorsVisible = _a.isIndicatorsVisible, hidePlayButton = _a.isHidePlayButton, disableIndicators = _a.isDisableIndicators, useControlLabels = _a.isUseControlLabels, disableLooping = _a.isDisableLooping, delayInMsValue = _a.delayInMs;
        return (React.createElement("div", null,
            React.createElement(Toggle_1.Toggle, { label: "Autoplay", checked: autoPlayDisabled, onChange: function (e, isAutoPlayDisabled) { return _this.setState({ isAutoPlayDisabled: isAutoPlayDisabled }); }, onText: "Enabled", offText: "Disabled" }),
            React.createElement(Toggle_1.Toggle, { label: "Show navigation", checked: navigationVisible, onChange: function (e, isNavigationVisible) { return _this.setState({ isNavigationVisible: isNavigationVisible }); }, onText: "Visible", offText: "Hidden" }),
            React.createElement(Toggle_1.Toggle, { label: "Show indicators", checked: indicatorsVisible, onChange: function (e, isIndicatorsVisible) { return _this.setState({ isIndicatorsVisible: isIndicatorsVisible }); }, onText: "Visible", offText: "Hidden" }),
            React.createElement(Toggle_1.Toggle, { label: "Hide play button", checked: hidePlayButton, onChange: function (e, isHidePlayButton) { return _this.setState({ isHidePlayButton: isHidePlayButton }); }, onText: "Hidden", offText: "Visible" }),
            React.createElement(Toggle_1.Toggle, { label: "Disable indicators", checked: disableIndicators, onChange: function (e, isDisableIndicators) { return _this.setState({ isDisableIndicators: isDisableIndicators }); }, onText: "Disabled", offText: "Enabled" }),
            React.createElement(Toggle_1.Toggle, { label: "Use control labels", checked: useControlLabels, onChange: function (e, isUseControlLabels) { return _this.setState({ isUseControlLabels: isUseControlLabels }); }, onText: "Enabled", offText: "Disabled" }),
            React.createElement(Toggle_1.Toggle, { label: "Disable navigation loop", checked: disableLooping, onChange: function (e, isDisableLooping) { return _this.setState({ isDisableLooping: isDisableLooping }); }, onText: "Looping disabled", offText: "Looping enabled" }),
            React.createElement(Slider_1.Slider, { label: "Delay (ms)", styles: { root: { maxWidth: 300 } }, min: 1000, max: 10000, step: 1000, defaultValue: delayInMsValue, showValue: true, onChange: function (delayInMs) { return _this.setState({ delayInMs: delayInMs }); } }),
            React.createElement("br", null),
            React.createElement("br", null),
            React.createElement(__1.Carousel, { items: Carousel_Example_Data_1.getMockContent(), delay: delayInMsValue, isAutoPlayDisabled: autoPlayDisabled, hideNavigation: !navigationVisible, hideIndicators: !indicatorsVisible, hidePlayButton: hidePlayButton, disableIndicators: disableIndicators, useControlLabels: useControlLabels, disableNavigationLoop: disableLooping, navPreviousButtonAriaLabel: "Previous", navNextButtonAriaLabel: "Next", indicatorButtonsAriaLabel: ['Item 1', 'Item 2', 'Item 3', 'Item 4'], playButtonAriaLabel: "Play", pauseButtonAriaLabel: "Pause" })));
    };
    return CarouselBasicExample;
}(React.Component));
exports.CarouselBasicExample = CarouselBasicExample;
//# sourceMappingURL=Carousel.Basic.Example.js.map