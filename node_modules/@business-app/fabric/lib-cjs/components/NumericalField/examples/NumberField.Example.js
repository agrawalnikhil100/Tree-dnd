"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberFieldExample = void 0;
var tslib_1 = require("tslib");
var Toggle_1 = require("@fluentui/react/lib/Toggle");
var React = require("react");
var __1 = require("../");
var NumberFieldExample = /** @class */ (function (_super) {
    tslib_1.__extends(NumberFieldExample, _super);
    function NumberFieldExample(props) {
        var _this = _super.call(this, props) || this;
        _this.onValueChanged = function (newValue) {
            _this.setState({
                currentValue: newValue
            });
        };
        _this.onPrecisionChanged = function (newPrecision) {
            _this.setState({
                currentPrecision: newPrecision,
                currentValue: Number(_this.state.currentValue.toFixed(newPrecision))
            });
        };
        _this.state = {
            currentValue: 1234.56,
            currentPrecision: undefined,
            formatValue: true
        };
        return _this;
    }
    NumberFieldExample.prototype.render = function () {
        var _this = this;
        return (React.createElement("div", { style: { display: 'flex', flexDirection: 'column' } },
            React.createElement(Toggle_1.Toggle, { label: "Format value", defaultChecked: this.state.formatValue, onChanged: function (checked) { return _this.setState({ formatValue: checked }); } }),
            React.createElement("div", { style: { display: 'flex' } },
                React.createElement(__1.NumberField, { value: this.state.currentValue, onBlurred: this.onValueChanged, maxPrecision: this.state.currentPrecision, formatValue: this.state.formatValue, textFieldProps: {
                        label: 'Value: ',
                        styles: { root: { marginRight: '8px ', minWidth: '300px' } }
                    } }),
                React.createElement(__1.NaturalNumberField, { value: this.state.currentPrecision, onBlurred: this.onPrecisionChanged, formatValue: this.state.formatValue, textFieldProps: { label: 'Max precision: ' } })),
            React.createElement("p", null,
                "Last valid value: ",
                this.state.currentValue)));
    };
    return NumberFieldExample;
}(React.Component));
exports.NumberFieldExample = NumberFieldExample;
//# sourceMappingURL=NumberField.Example.js.map