"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
require("jest");
var React = require("react");
var tests_1 = require("../../utilities/tests");
var NumberField_1 = require("./NumberField");
describe('NumberField', function () {
    var AdaptedNumberField = function (props) { return (React.createElement(NumberField_1.NumberField, { value: props.value, onBlurred: props.onChanged })); };
    it('should allow numbers to be input', function () {
        expect(tests_1.simulateInput(AdaptedNumberField, 321, '1234')).toEqual({
            hasBeenChanged: true,
            lastValue: 1234
        });
        expect(tests_1.simulateInput(AdaptedNumberField, 321, '-1234')).toEqual({
            hasBeenChanged: true,
            lastValue: -1234
        });
        expect(tests_1.simulateInput(AdaptedNumberField, 321, '12.34')).toEqual({
            hasBeenChanged: true,
            lastValue: 12.34
        });
        expect(tests_1.simulateInput(AdaptedNumberField, 321, '0')).toEqual({
            hasBeenChanged: true,
            lastValue: 0
        });
    });
    it('should never emit onChanged if set to a non-numerical value as its first action', function () {
        expect(tests_1.simulateInput(AdaptedNumberField, 321, 'hello')).toEqual({
            hasBeenChanged: false
        });
    });
    it('should revert back to the previous value if non-numerical input is given', function () {
        expect(tests_1.simulateInput(AdaptedNumberField, 321, '1234', 'hello')).toEqual({
            hasBeenChanged: true,
            lastValue: 1234
        });
        expect(tests_1.simulateInput(AdaptedNumberField, 321, '1', '12', '123', '123g', 'h123g', 'h123', 'h125', 'h25', '25', '2f5')).toEqual({
            hasBeenChanged: true,
            lastValue: 25
        });
    });
    it('should allow for comma-separated values', function () {
        expect(tests_1.simulateInput(AdaptedNumberField, 321, '123,456,789')).toEqual({
            hasBeenChanged: true,
            lastValue: 123456789
        });
    });
    describe('maxPrecision', function () {
        var PrecisionNumberField = function (maxPrecision) { return function (props) { return (React.createElement(NumberField_1.NumberField, { value: props.value, onBlurred: props.onChanged, maxPrecision: maxPrecision })); }; };
        it('should not allow for values with greater precision than max precision', function () {
            expect(tests_1.simulateInput(PrecisionNumberField(4), 123, '123.12', '123.1234', '123.123456')).toEqual({
                hasBeenChanged: true,
                lastValue: 123.1234
            });
            expect(tests_1.simulateInput(PrecisionNumberField(6), 0.12, '.123', '.123456', '.123456789')).toEqual({
                hasBeenChanged: true,
                lastValue: 0.123456
            });
        });
        it('should not allow for fractional components if provided with a precision of zero', function () {
            expect(tests_1.simulateInput(PrecisionNumberField(0), 0, '123', '123.12', '123.1234', '123.123456')).toEqual({
                hasBeenChanged: true,
                lastValue: 123
            });
        });
    });
});
//# sourceMappingURL=NumberField.test.js.map