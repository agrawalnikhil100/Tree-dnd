"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterSearchViewsFlatListMultipleViewsExample = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var Toggle_1 = require("@fluentui/react/lib/Toggle");
var index_1 = require("../index");
var FilterSearchViewsExampleData_1 = require("./FilterSearchViewsExampleData");
var FilterSearchViewsExampleList_1 = require("./FilterSearchViewsExampleList");
var FilterSearchViewsFlatListMultipleViewsExample = /** @class */ (function (_super) {
    tslib_1.__extends(FilterSearchViewsFlatListMultipleViewsExample, _super);
    function FilterSearchViewsFlatListMultipleViewsExample() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            includeHorizontalList: true,
            includeGrid: true,
            amountFiltered: 0
        };
        _this._onHorizontalToggleChange = function (_, checked) {
            _this.setState({ includeHorizontalList: checked });
        };
        _this._onGridToggleChange = function (_, checked) {
            _this.setState({ includeGrid: checked });
        };
        return _this;
    }
    FilterSearchViewsFlatListMultipleViewsExample.prototype.render = function () {
        var _this = this;
        var _a = this.state, includeHorizontalList = _a.includeHorizontalList, includeGrid = _a.includeGrid;
        var views = [
            {
                key: 'verticalList',
                text: 'Vertical List',
                ariaLabel: 'Vertical list view',
                iconName: 'AlignVerticalBottom',
                onRenderView: function (filteredItems) {
                    if (_this.state.amountFiltered !== filteredItems.length) {
                        _this.setState({ amountFiltered: filteredItems.length });
                    }
                    return _this._renderList(filteredItems, FilterSearchViewsExampleList_1.IListRenderMethod.VerticalList);
                }
            }
        ];
        if (includeHorizontalList) {
            views.push({
                key: 'horizontalList',
                text: 'Horizontal List',
                ariaLabel: 'Horizontal list view',
                iconName: 'AlignHorizontalLeft',
                onRenderView: function (filteredItems) {
                    if (_this.state.amountFiltered !== filteredItems.length) {
                        _this.setState({ amountFiltered: filteredItems.length });
                    }
                    return _this._renderList(filteredItems, FilterSearchViewsExampleList_1.IListRenderMethod.HorizontalList);
                }
            });
        }
        if (includeGrid) {
            views.push({
                key: 'grid',
                text: 'Grid',
                ariaLabel: 'Grid view',
                iconName: 'GridViewMedium',
                onRenderView: function (filteredItems) {
                    if (_this.state.amountFiltered !== filteredItems.length) {
                        _this.setState({ amountFiltered: filteredItems.length });
                    }
                    return _this._renderList(filteredItems, FilterSearchViewsExampleList_1.IListRenderMethod.Grid);
                }
            });
        }
        return (React.createElement(React.Fragment, null,
            React.createElement(Toggle_1.Toggle, { checked: includeHorizontalList, onChange: this._onHorizontalToggleChange, label: 'Include Horizontal List' }),
            React.createElement(Toggle_1.Toggle, { checked: includeGrid, onChange: this._onGridToggleChange, label: 'Include Grid', styles: {
                    root: {
                        marginBottom: 12
                    }
                } }),
            React.createElement(index_1.FilterSearchViews, { strings: {
                    searchBoxPlaceholder: 'Search',
                    allItemsFilterItemText: 'All'
                }, items: FilterSearchViewsExampleData_1.flatItems, shouldFilterItem: FilterSearchViewsExampleData_1.shouldFilterItem, filters: FilterSearchViewsExampleData_1.filters, views: views }),
            React.createElement("div", { "aria-live": "assertive", "aria-atomic": "true", style: { overflow: 'hidden', position: 'absolute', top: -1000, left: -1000, width: 0, height: 0 } }, this.state.amountFiltered + ' items shown of ' + FilterSearchViewsExampleData_1.flatItems.length)));
    };
    FilterSearchViewsFlatListMultipleViewsExample.prototype._renderList = function (filteredItems, renderMethod) {
        return (React.createElement("div", { style: {
                display: 'flex',
                flexDirection: renderMethod === FilterSearchViewsExampleList_1.IListRenderMethod.VerticalList ? 'column' : 'row',
                flexWrap: renderMethod === FilterSearchViewsExampleList_1.IListRenderMethod.Grid ? 'wrap' : 'initial',
                overflowX: renderMethod === FilterSearchViewsExampleList_1.IListRenderMethod.HorizontalList ? 'auto' : 'initial'
            } }, filteredItems.map(function (item, index) { return FilterSearchViewsExampleList_1.renderItem(item, index, renderMethod); })));
    };
    return FilterSearchViewsFlatListMultipleViewsExample;
}(React.Component));
exports.FilterSearchViewsFlatListMultipleViewsExample = FilterSearchViewsFlatListMultipleViewsExample;
//# sourceMappingURL=FilterSearchViews.FlatListMultipleViews.Example.js.map