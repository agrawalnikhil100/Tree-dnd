"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterSearchViewsBase = exports.defaultFilterIconNameFunction = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var Button_1 = require("@fluentui/react/lib/Button");
var ContextualMenu_1 = require("@fluentui/react/lib/ContextualMenu");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var FilterSearchBox_1 = require("../FilterSearchBox");
var getClassNames = Utilities_1.classNamesFunction();
var allFilterItemDefaultKey = 'filterSearchViewsAllFilterKey';
var allFilterItemText = 'All';
var defaultFilterIconNameFunction = function (selectedFilterKey) {
    return selectedFilterKey === null ? 'Filter' : 'FilterSolid';
};
exports.defaultFilterIconNameFunction = defaultFilterIconNameFunction;
var FilterSearchViewsBase = /** @class */ (function (_super) {
    tslib_1.__extends(FilterSearchViewsBase, _super);
    function FilterSearchViewsBase(props) {
        var _this = _super.call(this, props) || this;
        _this._filterSearchBoxRef = React.createRef();
        _this._onClickViewPickerIcon = function () {
            var views = _this.props.views;
            // If we have 2 or more views, then clicking will not just toggle, so ignore this click.
            if (views.length > 2) {
                return;
            }
            _this.setState(function (prev) {
                // Find the currently selected index
                var index = Utilities_1.findIndex(views, function (view) { return view.key === prev.selectedViewKey; });
                var newIndex = (index + 1) % _this.props.views.length;
                return { selectedViewKey: views[newIndex] ? views[newIndex].key : null };
            });
        };
        _this._onClickViewPickerIconFromMenu = function (_, menuItem) {
            var onChangeView = _this.props.onChangeView;
            var selectedViewKey = _this.state.selectedViewKey;
            if (menuItem.key === selectedViewKey) {
                return;
            }
            if (onChangeView) {
                onChangeView(menuItem.key);
            }
            _this.setState({ selectedViewKey: menuItem.key });
        };
        _this._onChangeSearchText = function (event, text) {
            var onChangeSearchText = _this.props.onChangeSearchText;
            var searchText = _this.state.searchText;
            if (text === searchText) {
                return;
            }
            if (onChangeSearchText) {
                onChangeSearchText(text || '');
            }
            _this.setState({ searchText: text || '' });
        };
        _this._onChangeFilter = function (filterKey) {
            var onChangeFilter = _this.props.onChangeFilter;
            var selectedFilterKey = _this.state.selectedFilterKey;
            if (filterKey === selectedFilterKey) {
                return;
            }
            if (onChangeFilter) {
                onChangeFilter(filterKey);
            }
            _this.setState({ selectedFilterKey: filterKey });
        };
        _this.state = {
            searchText: _this.props.defaultSearchText,
            selectedFilterKey: _this.props.defaultSelectedFilterKey || _this.props.allFilterItemKey,
            selectedViewKey: _this._getInitialSelectedViewKey(props)
        };
        return _this;
    }
    FilterSearchViewsBase.prototype.focus = function () {
        if (this._filterSearchBoxRef.current) {
            this._filterSearchBoxRef.current.focus();
        }
    };
    FilterSearchViewsBase.prototype.dismissMenu = function () {
        if (this._filterSearchBoxRef.current) {
            this._filterSearchBoxRef.current.dismissMenu();
        }
    };
    FilterSearchViewsBase.prototype.componentDidUpdate = function () {
        var _this = this;
        // Ensure the view is still available. If not, set back to default.
        var selectedView = Utilities_1.find(this.props.views, function (view) { return view.key === _this.state.selectedViewKey; });
        if (!selectedView) {
            this.setState({
                selectedViewKey: this._getInitialSelectedViewKey(this.props)
            });
        }
    };
    FilterSearchViewsBase.prototype.render = function () {
        this._classNames = this._getClassNames(this.props);
        return (React.createElement("div", { className: this._classNames.root },
            this._renderSearchBoxAndViewToggle(),
            this._renderView()));
    };
    FilterSearchViewsBase.prototype._renderView = function () {
        var searchText = this.state.searchText;
        if (!this._selectedView) {
            return null;
        }
        var selectedFilter = this._selectedFilter;
        var filteredItems = this._getFilteredItems(this.props.items, searchText, selectedFilter);
        return this._selectedView.onRenderView(filteredItems, searchText, selectedFilter);
    };
    Object.defineProperty(FilterSearchViewsBase.prototype, "_selectedView", {
        get: function () {
            var views = this.props.views;
            var selectedViewKey = this.state.selectedViewKey;
            return Utilities_1.find(views, function (view) { return view.key === selectedViewKey; }) || null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FilterSearchViewsBase.prototype, "_selectedFilter", {
        get: function () {
            var filters = this.props.filters;
            var selectedFilterKey = this.state.selectedFilterKey;
            if (filters) {
                return Utilities_1.find(filters, function (filter) { return filter.key === selectedFilterKey; }) || null;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    FilterSearchViewsBase.prototype._renderSearchBoxAndViewToggle = function () {
        var _a = this.props, strings = _a.strings, filters = _a.filters, filterButtonIconName = _a.filterButtonIconName;
        var _b = this.state, searchText = _b.searchText, selectedFilterKey = _b.selectedFilterKey;
        var filtersWithAll = [
            {
                key: this.props.allFilterItemKey,
                text: strings.allItemsFilterItemText || allFilterItemText
            }
        ];
        if (filters) {
            filtersWithAll.push.apply(filtersWithAll, filters);
        }
        var filterIconName;
        if (typeof filterButtonIconName === 'function') {
            // Use _selectedFilter, since it is the consumer facing selected filter.
            // This value excludes the 'All' filter that is added by this component.
            var selectedFilter = this._selectedFilter;
            filterIconName = filterButtonIconName(selectedFilter ? selectedFilter.key : null);
        }
        else {
            filterIconName = filterButtonIconName;
        }
        return (React.createElement(React.Fragment, null,
            React.createElement("div", { className: this._classNames.searchBoxViewPickerContainer },
                React.createElement(FilterSearchBox_1.FilterSearchBox, { componentRef: this._filterSearchBoxRef, strings: {
                        searchBoxPlaceholder: strings.searchBoxPlaceholder,
                        searchBoxClearButtonTitle: strings.searchBoxClearButtonTitle,
                        filterButtonTooltipText: strings.filterButtonTooltipText
                    }, searchText: searchText, onSearchTextChange: this._onChangeSearchText, filters: filtersWithAll, selectedFilterKey: selectedFilterKey, onFilterChange: this._onChangeFilter, styles: { root: this._classNames.filterSearchBox }, filterButtonIconName: filterIconName }),
                this._renderViewPicker(),
                this.props.refreshButtonProps)));
    };
    FilterSearchViewsBase.prototype._renderViewPicker = function () {
        var views = this.props.views;
        var selectedView = this._selectedView;
        // No need to render the view picker if only one or fewer views.
        if (views.length <= 1) {
            return null;
        }
        var menuProps;
        var onClick = this._onClickViewPickerIcon;
        if (views.length > 2) {
            onClick = undefined;
            menuProps = {
                items: views.map(function (v) { return ({ key: v.key, text: v.text, iconProps: { iconName: v.iconName } }); }),
                directionalHint: ContextualMenu_1.DirectionalHint.bottomRightEdge,
                onItemClick: this._onClickViewPickerIconFromMenu
            };
        }
        return (React.createElement(Button_1.IconButton, { styles: { root: this._classNames.viewPickerButton }, iconProps: { iconName: selectedView === null || selectedView === void 0 ? void 0 : selectedView.iconName }, onClick: onClick, menuProps: menuProps, ariaLabel: selectedView === null || selectedView === void 0 ? void 0 : selectedView.ariaLabel, title: selectedView === null || selectedView === void 0 ? void 0 : selectedView.ariaLabel }));
    };
    FilterSearchViewsBase.prototype._getFilteredItems = function (items, searchText, selectedFilter) {
        // Get a deep copy of the items so we do not modify the original data.
        var itemsCopy;
        try {
            itemsCopy = JSON.parse(JSON.stringify(items));
        }
        catch (error) {
            // If this is not an Error, just rethrow, since we can't really improve the messaging.
            if (!(error instanceof Error)) {
                throw error;
            }
            // Improve the messaging of the error we throw.
            throw new Error("FilterSearchViews: Invalid items property. This could be due to circular references in items. Error: " + error.message);
        }
        return this._filterItemRecursively(itemsCopy, searchText, selectedFilter);
    };
    FilterSearchViewsBase.prototype._filterItemRecursively = function (items, searchText, selectedFilter) {
        var _this = this;
        return items.filter(function (item) {
            if (item.children) {
                item.children = _this._filterItemRecursively(item.children, searchText, selectedFilter);
            }
            return _this.props.shouldFilterItem(item, searchText, selectedFilter);
        });
    };
    FilterSearchViewsBase.prototype._getClassNames = function (props) {
        var theme = props.theme;
        return getClassNames(props.styles, {
            theme: theme
        });
    };
    FilterSearchViewsBase.prototype._getInitialSelectedViewKey = function (props) {
        var initialViewKey = props.defaultSelectedViewKey;
        if (!initialViewKey && props.views.length > 0) {
            initialViewKey = props.views[0].key;
        }
        return initialViewKey || null;
    };
    FilterSearchViewsBase.defaultProps = {
        defaultSearchText: '',
        allFilterItemKey: allFilterItemDefaultKey
    };
    FilterSearchViewsBase = tslib_1.__decorate([
        Utilities_1.customizable('FilterSearchViews', ['theme', 'styles'])
    ], FilterSearchViewsBase);
    return FilterSearchViewsBase;
}(Utilities_1.BaseComponent));
exports.FilterSearchViewsBase = FilterSearchViewsBase;
//# sourceMappingURL=FilterSearchViews.base.js.map