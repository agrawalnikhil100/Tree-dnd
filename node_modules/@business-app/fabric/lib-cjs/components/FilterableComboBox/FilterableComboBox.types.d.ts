/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
/// <reference types="react" />
import { IComboBox, IComboBoxOption } from '@fluentui/react/lib/ComboBox';
export interface IFilterableComboBoxProps {
    /**
     * @override Multi-select is not currently supported.
     */
    readonly multiSelect?: never;
    /**
     * @override Asynchronous resolution of options is not currently supported.
     */
    readonly onResolveOptions?: never;
    /**
     * Optionally, if the user types in a filter that does not match any existing item,
     * should the control revert to the last valid value, or keep the invalid filter option.
     *
     * If you wish to run your own error validation, it is recommended to set this false.
     *
     * @default true
     */
    readonly revertToLastValidOptionOnInvalidFilter?: boolean;
    /**
     * Optionally, text to render in the combobox menu when a filter with no matching items is provided.
     * Also accepts a callback to generate the text, given the current value of the filter.
     *
     * If nothing is provided, an empty menu will be rendered (not recommended).
     *
     * @default undefined
     */
    readonly noResultsMessage?: React.ReactNode | ((filter: string) => React.ReactNode);
    /**
     * Optional: if the user wants to open the combobox menu on click, they can set this to true.
     *
     * @default false
     */
    readonly openOnClick?: boolean;
    /**
     * Optional: By default, the filter predicts the input value if the value is 1 character away from an existing option.
     *
     * @default false
     */
    readonly disableInputPrediction?: boolean;
    /**
     * @override ComboBox call back but adds info if the user has a added a filter
     * Callback issued when either:
     * 1) the selected option changes
     * 2) a manually edited value is submitted. In this case there may not be a matched option if allowFreeform is also true
     *    (and hence only value would be true, the other parameter would be null in this case)
     */
    readonly onChange?: (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string, additionalData?: IFilterableComboBoxData) => void;
    /**
     * Optionally, a custom filter function to use when filtering the shown options
     * in the combobox menu.
     *
     * The default implementation does substring-based, case-invariant matching. It also provides default behavior for handling of groups within the combobox (see Grouped list example).
     *
     * @default `filterOptions`, a premade filter function.
     */
    readonly onFilterOptions?: (filter: string | undefined, options: IComboBoxOption[], defaultFilter?: IFilterableComboBoxProps['onFilterOptions']) => IComboBoxOption[];
}
export interface IFilterableComboBoxData {
    /**
     * Boolean for if the user typed in to filter the ComboBox
     * @default false
     */
    readonly userHasInputFilter: boolean;
}
