"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.matches = void 0;
var tslib_1 = require("tslib");
var SelectableOption_1 = require("@fluentui/react/lib/SelectableOption");
var matches = function (whole, part) { return whole.toLowerCase().indexOf(part.toLowerCase()) >= 0; };
exports.matches = matches;
function filterOptions(filter, options, defaultFilter) {
    if (!filter) {
        return options;
    }
    var groupFiltered = options.reduce(function (acc, item) {
        if (item.itemType === SelectableOption_1.SelectableOptionMenuItemType.Header) {
            // always show headers, even if they don't match anything
            acc.currentGroup = item.text;
            item.data = tslib_1.__assign(tslib_1.__assign({}, item.data), { __group: acc.currentGroup });
            acc.results = acc.results.concat(item);
            acc.currentGroupMatches = exports.matches(item.text, filter);
        }
        else if (item.itemType === SelectableOption_1.SelectableOptionMenuItemType.Normal || item.itemType === undefined) {
            // itemType undefined defaults to being a normal option
            item.data = tslib_1.__assign(tslib_1.__assign({}, item.data), { __group: acc.currentGroup });
            if (acc.currentGroupMatches || exports.matches(item.text, filter)) {
                // if there is a current group, show everything underneath that group even if it doesn't match the filter
                acc.results = acc.results.concat(item);
                // as the group has an item, mark it as so
                acc.groupsWithItems[acc.currentGroup] = true;
            }
        }
        else if (item.itemType === SelectableOption_1.SelectableOptionMenuItemType.Divider) {
            // always add dividers
            item.data = tslib_1.__assign(tslib_1.__assign({}, item.data), { __group: acc.currentGroup });
            acc.results = acc.results.concat(item);
        }
        return {
            currentGroupMatches: acc.currentGroupMatches,
            currentGroup: acc.currentGroup,
            results: acc.results,
            groupsWithItems: acc.groupsWithItems
        };
    }, {
        currentGroupMatches: false,
        currentGroup: undefined,
        results: [],
        groupsWithItems: {}
    });
    // now that we've filtered out all non-matching items
    // we need to filter out all group headers and dividers that have no matching children
    var filtered = groupFiltered.results.filter(function (item) { return !filter || groupFiltered.groupsWithItems[item.data.__group]; });
    // OK almost done! if the last element is a divider, get rid of it
    if (filtered.length >= 1 &&
        filtered[filtered.length - 1].itemType === SelectableOption_1.SelectableOptionMenuItemType.Divider) {
        filtered = filtered.slice(0, filtered.length - 1);
    }
    return filtered;
}
exports.default = filterOptions;
//# sourceMappingURL=onFilterOptions.js.map