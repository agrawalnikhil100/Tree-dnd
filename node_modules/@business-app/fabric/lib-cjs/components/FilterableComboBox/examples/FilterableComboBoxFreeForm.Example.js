"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterableComboBoxFreeFormExample = void 0;
var tslib_1 = require("tslib");
var Label_1 = require("@fluentui/react/lib/Label");
var SelectableOption_1 = require("@fluentui/react/lib/SelectableOption");
var Stack_1 = require("@fluentui/react/lib/Stack");
var React = require("react");
var FilterableComboBox_1 = require("../FilterableComboBox");
var tags = [
    'Azure',
    'Azure Light',
    'Azure Dark',
    'Black',
    'Cerulean',
    'Gray',
    'Green',
    'Lilac',
    'Rose',
    'Ruby',
    'Yellow',
    'オレンジ',
    '青い'
].map(function (name) { return ({
    key: name.toLowerCase(),
    text: name.indexOf('_') === 0 ? name.substr(1) : name,
    itemType: name.indexOf('_') === 0
        ? SelectableOption_1.SelectableOptionMenuItemType.Header
        : name.indexOf('&') === 0
            ? SelectableOption_1.SelectableOptionMenuItemType.Divider
            : SelectableOption_1.SelectableOptionMenuItemType.Normal
}); });
var FilterableComboBoxFreeFormExample = /** @class */ (function (_super) {
    tslib_1.__extends(FilterableComboBoxFreeFormExample, _super);
    function FilterableComboBoxFreeFormExample() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            selectedKey: undefined,
            selectedOption: undefined
        };
        return _this;
    }
    FilterableComboBoxFreeFormExample.prototype.render = function () {
        var _this = this;
        return (React.createElement(Stack_1.Stack, { maxWidth: 400, gap: 16 },
            React.createElement("p", null,
                React.createElement(Label_1.Label, null,
                    "Last selected option: ",
                    this.state.selectedKey)),
            React.createElement(FilterableComboBox_1.FilterableComboBox, { label: 'Choose an option', options: tags, noResultsMessage: function (query) { return (React.createElement(Label_1.Label, { styles: { root: { padding: '8px 16px' } } }, "No results found matching \"" + query + "\".")); }, allowFreeform: true, calloutProps: { calloutMaxHeight: 400 }, revertToLastValidOptionOnInvalidFilter: false, selectedKey: this.state.selectedKey, useComboBoxAsMenuWidth: true, disableInputPrediction: true, onPendingValueChanged: function (option, index, value) {
                    if (option === null || option === void 0 ? void 0 : option.text) {
                        _this.setState({ selectedKey: option.text });
                    }
                    else if (value !== undefined) {
                        // Free form allows empty strings, just checking for undefined
                        _this.setState({ selectedKey: value });
                    }
                }, onChange: function (evt, option, index, value) {
                    return option && _this.setState({ selectedKey: option.text });
                } })));
    };
    return FilterableComboBoxFreeFormExample;
}(React.Component));
exports.FilterableComboBoxFreeFormExample = FilterableComboBoxFreeFormExample;
//# sourceMappingURL=FilterableComboBoxFreeForm.Example.js.map