"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Enzyme = require("enzyme");
require("jest");
var Button_1 = require("@fluentui/react/lib/Button");
var Styling_1 = require("@fluentui/react/lib/Styling");
var React = require("react");
var _1 = require(".");
describe('Sidebar', function () {
    var sidebarButtonExampleProps;
    var sidebarAccordionExampleProps;
    var TestButton = Button_1.CommandBarButton;
    beforeEach(function () {
        sidebarButtonExampleProps = {
            collapsible: false,
            id: '1',
            theme: Styling_1.getTheme(),
            items: [
                {
                    key: 'basic-example-item1',
                    name: 'Item 1',
                    iconProps: { iconName: 'BuildQueue' },
                    active: false
                },
                {
                    key: 'basic-example-item2',
                    name: 'Item 2',
                    iconProps: { iconName: 'Bullseye' },
                    active: true
                }
            ]
        };
        sidebarAccordionExampleProps = {
            collapsible: false,
            id: '2',
            theme: Styling_1.getTheme(),
            items: [
                {
                    key: 'basic-example-accordion1',
                    name: 'More Stuff Here',
                    iconProps: { iconName: 'Code' },
                    items: [
                        {
                            key: 'basic-example-accordion1-link1',
                            name: 'Inner Link 1',
                            iconProps: { iconName: 'Mail' },
                            active: false
                        }
                    ]
                },
                {
                    key: 'basic-example-accordion2',
                    name: 'More Stuff Here Not Active',
                    iconProps: { iconName: 'Crown' },
                    items: [
                        {
                            key: 'basic-example-accordion2-link1',
                            name: 'Inner Link 1',
                            iconProps: { iconName: 'DiamondSolid' },
                            active: false
                        },
                        {
                            key: 'basic-example-accordion2-link2',
                            name: 'Inner Link 2',
                            iconProps: { iconName: 'DeliveryTruck' },
                            active: false
                        }
                    ]
                }
            ]
        };
    });
    it('should render the component', function () {
        var wrapper = Enzyme.shallow(React.createElement(_1.Sidebar, { collapsible: false, id: '1', theme: Styling_1.getTheme(), items: [] }));
        expect(wrapper.find('.ba-Sidebar').length).toBe(1);
    });
    it('should render the component with buttons', function () {
        var wrapper = Enzyme.shallow(React.createElement(_1.Sidebar, tslib_1.__assign({}, sidebarButtonExampleProps)));
        expect(wrapper.find(_1.SidebarButton).length).toBe(2);
    });
    it('should render the component with accordion', function () {
        var wrapper = Enzyme.shallow(React.createElement(_1.Sidebar, tslib_1.__assign({}, sidebarAccordionExampleProps)));
        expect(wrapper.find('.ba-SidebarAccordion').length).toBe(2);
    });
    it('should not null ref when clicking accordion', function () {
        var wrapper = Enzyme.mount(React.createElement(_1.Sidebar, tslib_1.__assign({}, sidebarAccordionExampleProps)));
        expect(wrapper.find('.ba-SidebarAccordion').length).toBe(2);
        var accordionButtonContainers = wrapper.find('DefaultButton');
        expect(accordionButtonContainers.length).toBe(2);
        var accordionButtonContainer = accordionButtonContainers.at(0);
        expect(accordionButtonContainer.prop('aria-expanded')).toBe(false);
        var accordionButton = accordionButtonContainer.find('button');
        expect(accordionButton.length).toBe(1);
        accordionButton.simulate('click');
        expect(wrapper.find('DefaultButton').at(0).prop('aria-expanded')).toBe(true);
        accordionButton.simulate('click');
        expect(wrapper.find('DefaultButton').at(0).prop('aria-expanded')).toBe(false);
        wrapper.unmount();
    });
    it('should render the component with context menu when collapsed', function () {
        var wrapper = Enzyme.shallow(React.createElement(_1.Sidebar, tslib_1.__assign({}, sidebarAccordionExampleProps)));
        wrapper.instance().setCollapsed(true);
        wrapper.update();
        expect(wrapper.find('.ba-SidebarContextualMenuButton').length).toBe(2);
    });
    it('should render the component using default button', function () {
        var wrapper = Enzyme.shallow(React.createElement(_1.Sidebar, { collapsible: false, id: '1', theme: Styling_1.getTheme(), defaultButton: TestButton, items: [
                {
                    key: 'basic-example-item1',
                    name: 'Item 1',
                    iconProps: { iconName: 'BuildQueue' },
                    active: false
                },
                {
                    key: 'basic-example-item2',
                    name: 'Item 2',
                    iconProps: { iconName: 'Bullseye' },
                    active: true
                }
            ] }));
        expect(wrapper.find(TestButton).length).toBe(2);
    });
    it('should render the component item with custom buttons', function () {
        var wrapper = Enzyme.shallow(React.createElement(_1.Sidebar, { collapsible: false, id: '1', theme: Styling_1.getTheme(), items: [
                {
                    key: 'basic-example-item1',
                    name: 'Item 1',
                    iconProps: { iconName: 'BuildQueue' },
                    active: false,
                    buttonAs: TestButton
                },
                {
                    key: 'basic-example-item2',
                    name: 'Item 2',
                    iconProps: { iconName: 'Bullseye' },
                    active: true
                }
            ] }));
        expect(wrapper.find(TestButton).length).toBe(1);
        expect(wrapper.find(_1.SidebarButton).length).toBe(1);
    });
    it('should render the component item with custom buttons', function () {
        var wrapper = Enzyme.shallow(React.createElement(_1.Sidebar, { collapsible: false, id: '1', theme: Styling_1.getTheme(), items: [
                {
                    key: 'basic-example-item1',
                    name: 'Item 1',
                    iconProps: { iconName: 'BuildQueue' },
                    active: false,
                    onRender: function (item) {
                        return (React.createElement("div", { key: item.key },
                            React.createElement(TestButton, { text: item.name, iconProps: item.iconProps, checked: item.active })));
                    }
                },
                {
                    key: 'basic-example-item2',
                    name: 'Item 2',
                    iconProps: { iconName: 'Bullseye' },
                    active: true
                }
            ] }));
        expect(wrapper.find(TestButton).length).toBe(1);
        expect(wrapper.find(_1.SidebarButton).length).toBe(1);
    });
    it('should fire onCollapseChanged only on setting the collapsed state only if it changes the state', function () {
        var sidebarHandle;
        var testProps = tslib_1.__assign(tslib_1.__assign({}, sidebarAccordionExampleProps), { onCollapseChanged: jest.fn(), componentRef: function (sb) { return (sidebarHandle = sb); } });
        var wrapper = Enzyme.mount(React.createElement(_1.Sidebar, tslib_1.__assign({}, testProps)));
        sidebarHandle.setCollapsed(false);
        expect(wrapper.props().onCollapseChanged).not.toBeCalled();
        sidebarHandle.setCollapsed(true);
        expect(wrapper.props().onCollapseChanged).toBeCalled();
        wrapper.unmount();
    });
    it('should dismiss submenu after clicking on an item in the collapsed state', function () {
        var dismissMock = jest.fn();
        var onClickEventMock = { defaultPrevented: false };
        var wrapper = Enzyme.shallow(React.createElement(_1.Sidebar, tslib_1.__assign({}, sidebarAccordionExampleProps)));
        wrapper.instance().setCollapsed(true);
        wrapper.update();
        var contextualMenuButton = wrapper.find(_1.SidebarButton).filter({ title: 'More Stuff Here' });
        var _a = contextualMenuButton.props().menuProps.items[1], onRender = _a.onRender, submenuItem = tslib_1.__rest(_a, ["onRender"]);
        var subMenuButton = Enzyme.shallow(onRender(submenuItem, dismissMock)).find(_1.SidebarButton);
        subMenuButton.simulate('click', onClickEventMock);
        expect(dismissMock).toHaveBeenCalled();
    });
    it('should render the component item with custom header', function () {
        var customElementId = 'customElementId1';
        var wrapper = Enzyme.shallow(React.createElement(_1.Sidebar, { collapsible: false, id: '1', theme: Styling_1.getTheme(), items: [
                {
                    key: 'basic-example-item2',
                    name: 'Item 2',
                    iconProps: { iconName: 'Bullseye' },
                    active: true
                }
            ], renderCustomHeader: function (isCollapsed) {
                return React.createElement("div", { id: customElementId }, "Custom Element");
            } }));
        expect(wrapper.find({ id: customElementId }).length).toBe(1);
    });
    it('should render the component item without custom header', function () {
        var customElementId = 'customElementId1';
        var wrapper = Enzyme.shallow(React.createElement(_1.Sidebar, { collapsible: false, id: '1', theme: Styling_1.getTheme(), items: [
                {
                    key: 'basic-example-item2',
                    name: 'Item 2',
                    iconProps: { iconName: 'Bullseye' },
                    active: true
                }
            ] }));
        expect(wrapper.find({ id: customElementId }).length).toBe(0);
    });
});
//# sourceMappingURL=Sidebar.test.js.map