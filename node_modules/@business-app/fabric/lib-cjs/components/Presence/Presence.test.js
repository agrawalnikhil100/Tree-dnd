"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var enzyme_1 = require("enzyme");
var PersonaAccordionPanel_1 = require("./PersonaAccordionPanel");
var Presence_1 = require("./Presence");
var PresenceMockData_1 = require("./PresenceMockData");
var Facepile_1 = require("@fluentui/react/lib/Facepile");
var List_1 = require("@fluentui/react/lib/List");
var Tooltip_1 = require("@fluentui/react/lib/Tooltip");
var Persona_1 = require("@fluentui/react/lib/Persona");
var Button_1 = require("@fluentui/react/lib/Button");
var Callout_1 = require("@fluentui/react/lib/Callout");
describe('Facepile for currently present users', function () {
    var props;
    var mockPersonaCoinForWithAccordionProps = {
        presentUser: PresenceMockData_1.getMockPresentUsers()[0],
        strings: PresenceMockData_1.MockPresenceStrings
    };
    beforeEach(function () {
        props = {
            presentUsers: PresenceMockData_1.getMockPresentUsers(1),
            strings: PresenceMockData_1.MockPresenceStrings
        };
    });
    afterEach(function () {
        jest.clearAllMocks();
    });
    it('Should verify the rendering of inline facepile', function () {
        var component = enzyme_1.shallow(React.createElement(Presence_1.PresenceBase, tslib_1.__assign({}, props)));
        expect(component.find(Facepile_1.Facepile).length).toBe(1);
        expect(component.find(Facepile_1.Facepile).props().personas.length).toBe(1);
        expect(component.find(Facepile_1.Facepile).props().personas).toMatchSnapshot();
        expect(component.find(Facepile_1.Facepile).props()).toMatchSnapshot();
        expect(component.find(List_1.List).length).toBe(0);
    });
    it('Should verify custom rendering of personas inside inline facepile', function () {
        var component = enzyme_1.shallow(React.createElement(Presence_1.PresencePersona, tslib_1.__assign({}, PresenceMockData_1.getMockPresentUsers()[0])));
        expect(component.find(Tooltip_1.TooltipHost).length).toBe(1);
        var toolTipHost = component.find(Tooltip_1.TooltipHost);
        expect(component.find(Persona_1.Persona).length).toBe(1);
        var personaProps = component.find(Persona_1.Persona).props();
        expect(personaProps.text).not.toBe(null);
        expect(personaProps.hidePersonaDetails).toBe(true);
    });
    it('Should verify the rendering of command bar facepile', function () {
        props.showAccordion = true;
        var component = enzyme_1.shallow(React.createElement(Presence_1.PresenceBase, tslib_1.__assign({}, props)));
        expect(component.find(Facepile_1.Facepile).length).toBe(1);
        expect(component.find(Facepile_1.Facepile).props().personas.length).toBe(1);
        expect(component.find(Facepile_1.Facepile).props().personas).toMatchSnapshot();
        expect(component.find(Facepile_1.Facepile).props()).toMatchSnapshot();
        expect(component.find(List_1.List).length).toBe(0);
    });
    it('Should verify custom rendering of personas inside command bar facepile', function () {
        var component = enzyme_1.shallow(React.createElement(Presence_1.PersonaCoinForWithAccordionBase, tslib_1.__assign({}, mockPersonaCoinForWithAccordionProps)));
        expect(component.find(Button_1.DefaultButton).length).toBe(1);
        expect(component.find(Persona_1.Persona).length).toBe(1);
        var personaProps = component.find(Persona_1.Persona).props();
        expect(personaProps.text).not.toBe(null);
        expect(personaProps.hidePersonaDetails).toBe(true);
    });
    it('Should verify clicking persona inside command bar facepile opens up persona accordion panel', function () {
        var component = enzyme_1.shallow(React.createElement(Presence_1.PersonaCoinForWithAccordionBase, tslib_1.__assign({}, mockPersonaCoinForWithAccordionProps)));
        expect(component.find(Button_1.DefaultButton).length).toBe(1);
        var personaButton = component.find(Button_1.DefaultButton);
        personaButton.simulate('Click');
        expect(component.find(Callout_1.Callout).length).toBe(1);
        expect(component.find(PersonaAccordionPanel_1.PersonaAccordionPanel).length).toBe(1);
    });
    it('Should verify facepile shows overflow callout with list of user personas', function () {
        props.presentUsers = PresenceMockData_1.getMockPresentUsers(4);
        var component = enzyme_1.shallow(React.createElement(Presence_1.PresenceBase, tslib_1.__assign({}, props)));
        expect(component.find(Facepile_1.Facepile).length).toBe(1);
        expect(component.find(List_1.List).length).toBe(1);
    });
});
//# sourceMappingURL=Presence.test.js.map