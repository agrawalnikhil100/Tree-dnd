"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersonaAccordionPanel = exports.EmailActionButton = exports.TeamsActionButton = exports.PersonaAccordionTitleButton = exports.PersonaAccordionPanelBase = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var PersonaAccordionPanel_styles_1 = require("./PersonaAccordionPanel.styles");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var PersonaAccordionPanel_types_1 = require("./PersonaAccordionPanel.types");
var Stack_1 = require("@fluentui/react/lib/Stack");
var Separator_1 = require("@fluentui/react/lib/Separator");
var Button_1 = require("@fluentui/react/lib/Button");
var Persona_1 = require("@fluentui/react/lib/Persona");
var Icon_1 = require("@fluentui/react/lib/Icon");
var ContextualMenu_1 = require("@fluentui/react/lib/ContextualMenu");
var getClassNames = Utilities_1.classNamesFunction();
var PersonaAccordionPanelBase = function (props) {
    var _a = React.useState(props.showActionItemsAlways), showActions = _a[0], setShowActions = _a[1];
    var styles = getClassNames(props.styles, { theme: props.theme });
    var personaClickCallback = props.isCollapsible
        ? function () {
            setShowActions(!showActions);
        }
        : function () { return void 0; };
    return (React.createElement(Stack_1.Stack, { className: styles.PersonaActionsStack, horizontalAlign: "start" },
        React.createElement(exports.PersonaAccordionTitleButton, tslib_1.__assign({ onPersonaClick: personaClickCallback }, props)),
        showActions && (React.createElement(React.Fragment, null,
            React.createElement(Separator_1.Separator, { className: styles.separator }),
            React.createElement(exports.TeamsActionButton, tslib_1.__assign({}, props)),
            React.createElement(exports.EmailActionButton, tslib_1.__assign({}, props))))));
};
exports.PersonaAccordionPanelBase = PersonaAccordionPanelBase;
var PersonaAccordionTitleButton = function (props) {
    var _a = React.useState(false), isOpen = _a[0], setIsOpen = _a[1];
    var styles = getClassNames(props.styles, { theme: props.theme });
    return (React.createElement(Button_1.DefaultButton, { className: styles.personaTitleButton, onClick: function () {
            setIsOpen(!isOpen);
            props.onPersonaClick();
        }, key: 'presentUser' },
        React.createElement(Persona_1.Persona, { imageUrl: props.presentUser.imageUrl, text: props.presentUser.displayName, showSecondaryText: true, secondaryText: props.presentUser.presenceContext, size: Persona_1.PersonaSize.size32 }),
        props.isCollapsible && React.createElement(Icon_1.Icon, { iconName: isOpen ? 'ChevronUp' : 'ChevronDown' })));
};
exports.PersonaAccordionTitleButton = PersonaAccordionTitleButton;
var TeamsActionButton = function (props) {
    var styles = getClassNames(props.styles, { theme: props.theme });
    return (React.createElement(Button_1.DefaultButton, { className: styles.actionButton, key: 'startTeamsChat', menuProps: getTeamsMenuProps(props.signedInUser, props.presentUser, props.strings, styles), menuIconProps: { iconName: 'chevronRight' } },
        React.createElement(Icon_1.Icon, { className: styles.icon, iconName: "TeamsLogo" }),
        React.createElement("span", { className: styles.actionButtonText }, props.strings.startTeamsChat)));
};
exports.TeamsActionButton = TeamsActionButton;
var EmailActionButton = function (props) {
    var onClickCallBack = function () {
        var _a, _b;
        location.href = (_b = 'mailto:' + ((_a = props.presentUser) === null || _a === void 0 ? void 0 : _a.email)) !== null && _b !== void 0 ? _b : '';
    };
    var styles = getClassNames(props.styles, { theme: props.theme });
    return (React.createElement(Button_1.DefaultButton, { className: styles.actionButton, onClick: onClickCallBack, key: 'email' },
        React.createElement(Icon_1.Icon, { className: styles.icon, iconName: "Mail" }),
        React.createElement("span", { className: styles.actionButtonText }, props.strings.sendEmail)));
};
exports.EmailActionButton = EmailActionButton;
var getTeamsMenuProps = function (signedInUser, presentUser, strings, styles) {
    // reference: https://www.mail-signatures.com/articles/teams-deep-links-in-email-signatures/
    var teamsInDesktopAppChatLink = PersonaAccordionPanel_types_1.LinkTemplates.teamsDesktopAppChatLink(presentUser.email);
    // reference: https://techcommunity.microsoft.com/t5/microsoft-teams/link-deeplink-to-chat-with-a-user/m-p/284213/highlight/true#M20316
    var teamsInBrowserChatLink = PersonaAccordionPanel_types_1.LinkTemplates.teamsBrowserChatLink(signedInUser === null || signedInUser === void 0 ? void 0 : signedInUser.tenantId, signedInUser === null || signedInUser === void 0 ? void 0 : signedInUser.userId, presentUser.userId);
    return {
        isSubMenu: true,
        directionalHint: ContextualMenu_1.DirectionalHint.rightCenter,
        items: [
            {
                key: 'openInBrowser',
                iconProps: { iconName: 'TeamsLogo', className: styles.teamsIcon },
                text: strings.openInBrowser,
                onClick: function () { return PersonaAccordionPanel_types_1.openUrlInNewTab(teamsInBrowserChatLink); },
                className: styles.subMenuActionButton
            },
            {
                key: 'openInDesktop',
                iconProps: { iconName: 'TeamsLogo', className: styles.teamsIcon },
                text: strings.openInDesktop,
                onClick: function () { return PersonaAccordionPanel_types_1.openUrlInNewTab(teamsInDesktopAppChatLink); },
                className: styles.subMenuActionButton
            }
        ]
    };
};
/**
 * Panel that pops up with details and (optionally) actions for each user.
 */
exports.PersonaAccordionPanel = Utilities_1.styled(exports.PersonaAccordionPanelBase, PersonaAccordionPanel_styles_1.getPersonaAccordionPanelStyles);
//# sourceMappingURL=PersonaAccordionPanel.js.map