"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var enzyme_1 = require("enzyme");
var PersonaAccordionPanel_1 = require("./PersonaAccordionPanel");
var Types = require("./PersonaAccordionPanel.types");
var PresenceMockData_1 = require("./PresenceMockData");
var Button_1 = require("@fluentui/react/lib/Button");
describe('Persona accordion panel shows persona detail and action items', function () {
    var props;
    beforeEach(function () {
        props = {
            showActionItemsAlways: true,
            presentUser: PresenceMockData_1.getMockPresentUsers()[0],
            strings: PresenceMockData_1.MockPresenceStrings
        };
    });
    afterEach(function () {
        jest.clearAllMocks();
    });
    it('Should render persona details with actions when show action items always set to true', function () {
        var component = enzyme_1.shallow(React.createElement(PersonaAccordionPanel_1.PersonaAccordionPanelBase, tslib_1.__assign({}, props)));
        expect(component.find(PersonaAccordionPanel_1.PersonaAccordionTitleButton).length).toBe(1);
        verifyActionsRendered(component);
    });
    it('Should not render actions but persona details when show action items always set to false', function () {
        props.showActionItemsAlways = false;
        var component = enzyme_1.shallow(React.createElement(PersonaAccordionPanel_1.PersonaAccordionPanelBase, tslib_1.__assign({}, props)));
        expect(component.find(PersonaAccordionPanel_1.PersonaAccordionTitleButton).length).toBe(1);
        verifyActionsNotRendered(component);
    });
    it('Should not render actions on clicking persona accordion title when show action items always and isCollapsible set to false', function () {
        props.showActionItemsAlways = false;
        props.isCollapsible = false;
        var component = enzyme_1.shallow(React.createElement(PersonaAccordionPanel_1.PersonaAccordionPanelBase, tslib_1.__assign({}, props)));
        expect(component.find(PersonaAccordionPanel_1.PersonaAccordionTitleButton).length).toBe(1);
        verifyActionsNotRendered(component);
        component.find(PersonaAccordionPanel_1.PersonaAccordionTitleButton).props().onPersonaClick();
        verifyActionsNotRendered(component);
    });
    it('Should render actions on clicking persona accordion title when show action items always set to false and isCollapsible set to true', function () {
        props.showActionItemsAlways = false;
        props.isCollapsible = true;
        var component = enzyme_1.shallow(React.createElement(PersonaAccordionPanel_1.PersonaAccordionPanelBase, tslib_1.__assign({}, props)));
        expect(component.find(PersonaAccordionPanel_1.PersonaAccordionTitleButton).length).toBe(1);
        verifyActionsNotRendered(component);
        component.find(PersonaAccordionPanel_1.PersonaAccordionTitleButton).props().onPersonaClick();
        verifyActionsRendered(component);
    });
    it('Should verify persona accordion panel toggle up and down arrow button works', function () {
        props.showActionItemsAlways = false;
        props.isCollapsible = true;
        var component = enzyme_1.shallow(React.createElement(PersonaAccordionPanel_1.PersonaAccordionPanelBase, tslib_1.__assign({}, props)));
        expect(component.find(PersonaAccordionPanel_1.PersonaAccordionTitleButton).length).toBe(1);
        verifyActionsNotRendered(component);
        component.find(PersonaAccordionPanel_1.PersonaAccordionTitleButton).props().onPersonaClick();
        verifyActionsRendered(component);
        component.find(PersonaAccordionPanel_1.PersonaAccordionTitleButton).props().onPersonaClick();
        verifyActionsNotRendered(component);
    });
    it('Should verify clicking open teams in browser starts a teams chat test url', function () {
        var mockOpenUrlInNewTab = jest.spyOn(Types, 'openUrlInNewTab').mockImplementation();
        var component = enzyme_1.shallow(React.createElement(PersonaAccordionPanel_1.TeamsActionButton, tslib_1.__assign({}, props)));
        expect(component.find(Button_1.DefaultButton).props().menuProps.items.length).toBe(2);
        component.find(Button_1.DefaultButton).props().menuProps.items[0].onClick();
        expect(mockOpenUrlInNewTab).toHaveBeenCalledTimes(1);
        expect(mockOpenUrlInNewTab).toHaveBeenCalledWith('https://teams.microsoft.com/_?tenantId=#/conversations/19:_123@unq.gbl.spaces?ctx=chat');
    });
    it('Should verify clicking open teams in desktop app starts a teams chat', function () {
        var mockOpenUrlInNewTab = jest.spyOn(Types, 'openUrlInNewTab').mockImplementation();
        props.showActionItemsAlways = true;
        var component = enzyme_1.shallow(React.createElement(PersonaAccordionPanel_1.TeamsActionButton, tslib_1.__assign({}, props)));
        expect(component.find(Button_1.DefaultButton).props().menuProps.items.length).toBe(2);
        component.find(Button_1.DefaultButton).props().menuProps.items[1].onClick();
        expect(mockOpenUrlInNewTab).toHaveBeenCalledTimes(1);
        expect(mockOpenUrlInNewTab).toHaveBeenCalledWith('https://teams.microsoft.com/l/chat/0/0?users=');
    });
    function verifyActionsRendered(component) {
        if (component != null) {
            expect(component.find(PersonaAccordionPanel_1.TeamsActionButton).length).toBe(1);
            expect(component.find(PersonaAccordionPanel_1.EmailActionButton).length).toBe(1);
        }
    }
    function verifyActionsNotRendered(component) {
        if (component != null) {
            expect(component.find(PersonaAccordionPanel_1.TeamsActionButton).length).toBe(0);
            expect(component.find(PersonaAccordionPanel_1.EmailActionButton).length).toBe(0);
        }
    }
});
//# sourceMappingURL=PersonaAccordionPanel.test.js.map