/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { IButtonProps } from '@fluentui/react/lib/Button';
import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import { IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';
import { ISettingsPageProps } from './SettingsPage.types';
export interface ISettingsExplorerStyles {
    /**
     * Style for the container element
     */
    root?: IStyle;
    /**
     * Styling to go around the page content
     */
    pageContainer?: IStyle;
}
export declare type ITwoTierSettingsExplorerStyles = ISettingsExplorerStyles;
export declare type ICommitButtonProps = IButtonProps;
export declare type IExitButtonProps = Pick<IButtonProps, 'onClick' | 'ariaLabel'>;
export declare type ISettingsExplorerStyleProps = Pick<ISettingsExplorerProps, 'theme'>;
export interface ISettingsExplorerChildProps {
    name?: string;
    id?: string;
}
export interface ISettingsExplorerProps extends ISettingsExplorerChildProps {
    styles?: IStyleFunctionOrObject<ISettingsExplorerStyleProps, ISettingsExplorerStyles>;
    theme?: ITheme;
    saveButtonProps?: ICommitButtonProps;
    cancelButtonProps?: ICommitButtonProps;
    exitButtonProps?: IExitButtonProps;
    /**
     * Prevents the button panel from collapsing on resize events.
     */
    disablePanelCollapsing?: boolean;
    /**
     * Optional prop to select the first page.
     * Note that the page will not be selected if disabled.
     */
    initialSelectedPageId?: string;
    /**
     * Callback when a page is selected.
     * Also called on mount for the initially selected page.
     * @param id Id of the page that is selected
     */
    onPageSelected?(id: string): void;
}
export interface ISettingsExplorerState {
    selectedKey: string | undefined;
}
export interface ISettingsItemProps {
    name?: string;
    itemStyles?: IStyle;
}
export declare type SettingsPageInfo = ISettingsPageProps & {
    page: any;
};
