"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsExplorerBase = void 0;
var tslib_1 = require("tslib");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var React = require("react");
var ExplorerPanel_1 = require("./ExplorerPanel");
var SettingsPage_1 = require("./SettingsPage");
var getClassNames = Utilities_1.classNamesFunction();
var SettingsExplorerBase = /** @class */ (function (_super) {
    tslib_1.__extends(SettingsExplorerBase, _super);
    function SettingsExplorerBase(props) {
        var _this = _super.call(this, props) || this;
        _this._ref = React.createRef();
        _this._onPageSelected = function (index) {
            var pageList = _this._getPageList(_this.props.children);
            var key = pageList[index].id;
            if (_this.props.onPageSelected) {
                _this.props.onPageSelected(key);
            }
            _this.setState({ selectedKey: key });
        };
        var pages = _this._getPageList(_this.props.children);
        var initialKey;
        if (props.initialSelectedPageId) {
            initialKey = props.initialSelectedPageId;
        }
        else {
            if (pages && pages.length) {
                // find first enabled page
                for (var _i = 0, pages_1 = pages; _i < pages_1.length; _i++) {
                    var page = pages_1[_i];
                    if (page.id && page.disabled !== true) {
                        initialKey = page.id;
                        break;
                    }
                }
            }
        }
        _this.state = { selectedKey: initialKey };
        return _this;
    }
    SettingsExplorerBase.prototype.componentDidMount = function () {
        if (this.props.onPageSelected) {
            this.props.onPageSelected(this.state.selectedKey);
        }
    };
    SettingsExplorerBase.prototype.render = function () {
        var _a = this.props, styles = _a.styles, theme = _a.theme;
        this._classnames = getClassNames(styles, { theme: theme });
        var pageList = this._getPageList(this.props.children);
        return (pageList &&
            pageList.length && (React.createElement("div", { className: this._classnames.root, ref: this._ref },
            this._renderCategoriesPanel(pageList),
            this._renderPageContents(pageList))));
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    SettingsExplorerBase.prototype._getPageList = function (settingsPages) {
        return React.Children.map(React.Children.toArray(settingsPages), function (page, index) {
            var itemKey = page.props.id || index.toString();
            var pageInfo = tslib_1.__assign(tslib_1.__assign({}, page.props), { id: itemKey, page: page });
            return pageInfo;
        });
    };
    SettingsExplorerBase.prototype._renderCategoriesPanel = function (pageList) {
        return (React.createElement(ExplorerPanel_1.ExplorerPanel, { parentRef: this._ref, header: this.props.name, pageList: pageList, selectedKey: this.state.selectedKey, handleClick: this._onPageSelected, disableCollapsing: this.props.disablePanelCollapsing }));
    };
    SettingsExplorerBase.prototype._renderPageContents = function (pageList) {
        var _a, _b;
        var _c = this.props, saveButtonProps = _c.saveButtonProps, cancelButtonProps = _c.cancelButtonProps, exitButtonProps = _c.exitButtonProps;
        var index = (_a = pageList === null || pageList === void 0 ? void 0 : pageList.map(function (page) { return page.id; })) === null || _a === void 0 ? void 0 : _a.indexOf(this.state.selectedKey);
        var selectedItem = pageList === null || pageList === void 0 ? void 0 : pageList[index];
        return (React.createElement("div", { className: this._classnames.pageContainer },
            React.createElement(SettingsPage_1.SettingsPage, tslib_1.__assign({ name: selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.name, saveButtonProps: saveButtonProps, cancelButtonProps: cancelButtonProps, exitButtonProps: exitButtonProps }, (_b = selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.page) === null || _b === void 0 ? void 0 : _b.props))));
    };
    return SettingsExplorerBase;
}(React.PureComponent));
exports.SettingsExplorerBase = SettingsExplorerBase;
//# sourceMappingURL=SettingsExplorer.base.js.map