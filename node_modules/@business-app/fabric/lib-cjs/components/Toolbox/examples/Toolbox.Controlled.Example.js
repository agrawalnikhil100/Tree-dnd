"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolboxControlledExample = void 0;
var tslib_1 = require("tslib");
var Button_1 = require("@fluentui/react/lib/Button");
var ChoiceGroup_1 = require("@fluentui/react/lib/ChoiceGroup");
var Image_1 = require("@fluentui/react/lib/Image");
var Styling_1 = require("@fluentui/react/lib/Styling");
var React = require("react");
var Toolbox_1 = require("../Toolbox");
var ToolboxItem_1 = require("../ToolboxItem");
var toolboxItem1Key = 'tool1';
var toolboxItem2Key = 'tool2';
var toolboxItem3Key = 'tool3';
var toolboxItem4Key = 'tool4';
var toolboxItem5Key = null;
var toolboxItem1Name = 'Play tool';
var toolboxItem2Name = 'Media tool';
var toolboxItem3Name = 'Settings tool';
var toolboxItem4Name = '(Invalid Toolbox Item)';
var toolboxItem5Name = '(Unselect Toolbox Item)';
var ToolboxControlledExample = /** @class */ (function (_super) {
    tslib_1.__extends(ToolboxControlledExample, _super);
    function ToolboxControlledExample(props) {
        var _this = _super.call(this, props) || this;
        _this._onSettingChangedCallback = function (event, option) {
            _this.setState({ userChosenSetting: option.key });
        };
        _this._onChoiceBoxChanged = function (event, option) {
            _this._selectedItemChanged(option.key);
        };
        _this._selectedItemChanged = function (itemKey) {
            _this.setState({ selectedKey: itemKey });
        };
        _this.state = {
            selectedKey: toolboxItem1Key,
            userChosenSetting: ''
        };
        return _this;
    }
    ToolboxControlledExample.prototype.render = function () {
        var selectedKey = this.state.selectedKey;
        var toolboxItemRootStyle = Styling_1.mergeStyles({
            width: '100%',
            padding: 16
        });
        var buttonStyle = Styling_1.mergeStyles({
            marginRight: 16
        });
        return (React.createElement(React.Fragment, null,
            React.createElement(Toolbox_1.Toolbox, { strings: {
                    expandTooltip: 'Expand',
                    collapseTooltip: 'Collapse',
                    closeTooltip: 'Close'
                }, styles: {
                    root: {
                        height: 320
                    }
                }, selectedKey: this.state.selectedKey, onSelectedItemChanged: this._selectedItemChanged },
                React.createElement(ToolboxItem_1.ToolboxItem, { headerText: toolboxItem1Name, itemKey: toolboxItem1Key, itemIcon: 'Play' },
                    React.createElement("div", { className: toolboxItemRootStyle },
                        React.createElement(Button_1.PrimaryButton, { className: buttonStyle }, 'Play'),
                        React.createElement(Button_1.PrimaryButton, { className: buttonStyle }, 'Quit'))),
                React.createElement(ToolboxItem_1.ToolboxItem, { headerText: toolboxItem2Name, itemKey: toolboxItem2Key, itemIcon: 'MediaAdd' },
                    React.createElement("div", { className: toolboxItemRootStyle },
                        React.createElement(Image_1.Image, { height: 150, width: 150, src: "https://i.imgur.com/B83RUSb.jpg" }))),
                React.createElement(ToolboxItem_1.ToolboxItem, { headerText: toolboxItem3Name, itemKey: toolboxItem3Key, itemIcon: 'Settings' },
                    React.createElement("div", { className: toolboxItemRootStyle },
                        React.createElement(ChoiceGroup_1.ChoiceGroup, { selectedKey: this.state.userChosenSetting, onChange: this._onSettingChangedCallback, label: 'Choose your setting', options: [
                                {
                                    key: 'item1',
                                    text: 'Setting 1'
                                },
                                {
                                    key: 'item2',
                                    text: 'Setting 2'
                                }
                            ] })))),
            React.createElement(ChoiceGroup_1.ChoiceGroup, { className: Styling_1.mergeStyles({ marginTop: 48 }), label: 'Override Toolbox selection', selectedKey: selectedKey, options: [
                    {
                        key: toolboxItem1Key,
                        text: toolboxItem1Name
                    },
                    {
                        key: toolboxItem2Key,
                        text: toolboxItem2Name
                    },
                    {
                        key: toolboxItem3Key,
                        text: toolboxItem3Name
                    },
                    {
                        key: toolboxItem4Key,
                        text: toolboxItem4Name
                    },
                    {
                        key: toolboxItem5Key,
                        text: toolboxItem5Name
                    }
                ], onChange: this._onChoiceBoxChanged })));
    };
    return ToolboxControlledExample;
}(React.Component));
exports.ToolboxControlledExample = ToolboxControlledExample;
//# sourceMappingURL=Toolbox.Controlled.Example.js.map