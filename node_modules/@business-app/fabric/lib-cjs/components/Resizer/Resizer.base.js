"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResizerBase = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var Resizer_types_1 = require("./Resizer.types");
var getClassNames = Utilities_1.classNamesFunction();
var DEFAULT_HANDLE_SIZE = 5;
var DEFAULT_KEYBOARD_MOVE = 5;
var ResizerBase = /** @class */ (function (_super) {
    tslib_1.__extends(ResizerBase, _super);
    function ResizerBase(props) {
        var _this = _super.call(this, props) || this;
        _this.handleMouseDown = function (ev) {
            ev.preventDefault();
            _this.resizeStartPosition = _this.getCursorPosition(ev);
            _this.addGlobalEventHandlers();
        };
        _this.addGlobalEventHandlers = function () {
            _this.globalEventsEnabled = true;
            window.addEventListener('mouseup', _this.handleMouseUp);
            window.addEventListener('mousemove', _this.handleMouseMove);
            // Capture the current cursor
            _this.originalCursor = document.body.style.cursor;
            // Override the cursor
            document.body.style.cursor = _this.state.cursor;
        };
        _this.removeGlobalEventHandlers = function () {
            if (!_this.globalEventsEnabled) {
                return;
            }
            window.removeEventListener('mouseup', _this.handleMouseUp);
            window.removeEventListener('mousemove', _this.handleMouseMove);
            // Revert to the original cursor
            document.body.style.cursor = _this.originalCursor;
            _this.globalEventsEnabled = false;
        };
        _this.handleArrowKeys = function (ev) {
            var _a = _this.props, minSize = _a.minSize, maxSize = _a.maxSize, currentPosition = _a.size;
            var resizeDirection = _this.state.resizeDirection;
            var newPosition;
            if (resizeDirection === Resizer_types_1.ResizeDirection.Horizontal) {
                switch (ev.keyCode) {
                    case Utilities_1.KeyCodes.left: {
                        newPosition = moveLeftOrUp(minSize, currentPosition);
                        break;
                    }
                    case Utilities_1.KeyCodes.right: {
                        newPosition = moveRightOrDown(maxSize, currentPosition);
                        break;
                    }
                    default:
                        break;
                }
            }
            else {
                // resizeDirection === ResizeDirection.Vertical
                switch (ev.keyCode) {
                    case Utilities_1.KeyCodes.up: {
                        newPosition = moveLeftOrUp(minSize, currentPosition);
                        break;
                    }
                    case Utilities_1.KeyCodes.down: {
                        newPosition = moveRightOrDown(maxSize, currentPosition);
                        break;
                    }
                    default:
                        break;
                }
            }
            if (newPosition) {
                ev.preventDefault();
                _this.handleSizeChanged(newPosition);
            }
        };
        _this.handleMouseMove = function (ev) {
            ev.preventDefault();
            var _a = _this.state, keepDeltaSign = _a.keepDeltaSign, maxRelativeDelta = _a.maxRelativeDelta, minRelativeDelta = _a.minRelativeDelta;
            var currentPosition = _this.getCursorPosition(ev);
            var delta = (currentPosition - _this.resizeStartPosition) * (keepDeltaSign ? 1 : -1);
            var relativePosition = clamp(delta, maxRelativeDelta, minRelativeDelta);
            _this.setState({
                isResizing: true,
                resizeRelativeValue: relativePosition
            });
        };
        _this.handleMouseUp = function (ev) {
            ev.preventDefault();
            var newSize = _this.props.size - _this.state.resizeRelativeValue;
            _this.handleSizeChanged(newSize);
            _this.setState({
                isResizing: false
            });
            _this.removeGlobalEventHandlers();
        };
        _this.handleSizeChanged = function (newSize) {
            var _a = _this.props, size = _a.size, onSizeChanged = _a.onSizeChanged;
            if (size !== newSize && onSizeChanged) {
                onSizeChanged(newSize);
            }
        };
        _this.getCursorPosition = function (ev) {
            return _this.state.resizeDirection === Resizer_types_1.ResizeDirection.Horizontal ? ev.pageX : ev.pageY;
        };
        _this.getResizerPositionStyles = function () {
            var _a = _this.props, location = _a.location, _b = _a.handleSize, handleSize = _b === void 0 ? DEFAULT_HANDLE_SIZE : _b, _c = _a.attachment, attachment = _c === void 0 ? Resizer_types_1.ResizerAttachment.Outside : _c;
            var handlePosition = _this.state.resizeRelativeValue - (attachment === Resizer_types_1.ResizerAttachment.Inside ? 0 : handleSize);
            switch (location) {
                case Resizer_types_1.ResizerLocation.Left:
                    return { top: 0, bottom: 0, left: handlePosition, width: handleSize };
                case Resizer_types_1.ResizerLocation.Right:
                    return { top: 0, bottom: 0, right: handlePosition, width: handleSize };
                case Resizer_types_1.ResizerLocation.Top:
                    return { top: handlePosition, left: 0, right: 0, height: handleSize };
                case Resizer_types_1.ResizerLocation.Bottom:
                    return { bottom: handlePosition, left: 0, right: 0, height: handleSize };
                default:
                    return {};
            }
        };
        _this.resizeStartPosition = 0;
        _this.globalEventsEnabled = false;
        _this.originalCursor = 'auto';
        _this.state = ResizerBase.getResizerInfo(props);
        return _this;
    }
    ResizerBase.getDerivedStateFromProps = function (props, prevState) {
        return ResizerBase.getResizerInfo(props, prevState);
    };
    ResizerBase.getResizerInfo = function (props, prevState) {
        var size = props.size, location = props.location, minSize = props.minSize, maxSize = props.maxSize;
        var resizeDirection = location === Resizer_types_1.ResizerLocation.Left || location === Resizer_types_1.ResizerLocation.Right
            ? Resizer_types_1.ResizeDirection.Horizontal
            : Resizer_types_1.ResizeDirection.Vertical;
        var isResizeHorizontal = resizeDirection === Resizer_types_1.ResizeDirection.Horizontal;
        var cursor = isResizeHorizontal ? 'col-resize' : 'row-resize';
        var max = maxSize || (isResizeHorizontal ? window.innerWidth : window.innerHeight);
        var min = minSize || 0;
        var isResizing = !!prevState && prevState.isResizing;
        return {
            size: size,
            minRelativeDelta: size - min,
            maxRelativeDelta: size - max,
            keepDeltaSign: location === Resizer_types_1.ResizerLocation.Top || location === Resizer_types_1.ResizerLocation.Left,
            isResizing: isResizing,
            resizeDirection: resizeDirection,
            cursor: cursor,
            resizeRelativeValue: isResizing && !!prevState ? prevState.resizeRelativeValue : 0
        };
    };
    ResizerBase.prototype.render = function () {
        var _a = this.state, cursor = _a.cursor, resizeDirection = _a.resizeDirection;
        var _b = this.props, ariaLabel = _b.ariaLabel, styles = _b.styles;
        var classNames = getClassNames(styles, this.props);
        var resizerStyles = tslib_1.__assign({ cursor: cursor }, this.getResizerPositionStyles());
        return (React.createElement("div", { "aria-label": ariaLabel, "aria-orientation": resizeDirection === Resizer_types_1.ResizeDirection.Horizontal ? 'vertical' : 'horizontal', role: 'separator', tabIndex: 0, className: classNames.root, style: resizerStyles, onKeyDown: this.handleArrowKeys, onMouseDown: this.handleMouseDown }));
    };
    ResizerBase.prototype.componentWillUnmount = function () {
        if (this.globalEventsEnabled) {
            this.removeGlobalEventHandlers();
        }
    };
    return ResizerBase;
}(React.Component));
exports.ResizerBase = ResizerBase;
var clamp = function (value, min, max) {
    return Math.min(Math.max(value, min), max);
};
var moveRightOrDown = function (maxSize, currentPosition) {
    var newPosition;
    if (!maxSize || currentPosition + DEFAULT_KEYBOARD_MOVE < maxSize) {
        newPosition = currentPosition + DEFAULT_KEYBOARD_MOVE;
    }
    return newPosition;
};
var moveLeftOrUp = function (minSize, currentPosition) {
    var newPosition;
    if (currentPosition - DEFAULT_KEYBOARD_MOVE > (minSize || 0)) {
        newPosition = currentPosition - DEFAULT_KEYBOARD_MOVE;
    }
    return newPosition;
};
//# sourceMappingURL=Resizer.base.js.map