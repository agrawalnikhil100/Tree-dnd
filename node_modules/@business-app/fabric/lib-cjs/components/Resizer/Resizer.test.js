"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResizableButton = void 0;
var tslib_1 = require("tslib");
var Enzyme = require("enzyme");
var React = require("react");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var Button_1 = require("@fluentui/react/lib/Button");
var Resizer_base_1 = require("./Resizer.base");
var Resizer_types_1 = require("./Resizer.types");
var sizeChangedCallback = jest.fn();
function getResizerTestProps() {
    return {
        location: Resizer_types_1.ResizerLocation.Right,
        size: 150,
        onSizeChanged: sizeChangedCallback
    };
}
var ResizableButton = function (props) {
    return (React.createElement("div", { style: { position: 'relative', width: 300, height: 150 } },
        React.createElement(Button_1.DefaultButton, { style: { width: '100%', height: '100%' }, text: "Hello" }),
        React.createElement(Resizer_base_1.ResizerBase, tslib_1.__assign({}, props))));
};
exports.ResizableButton = ResizableButton;
describe('ResizerBase', function () {
    it('renders resizer gets rendered when the parent element is positioned', function () {
        var containerWrapper = Enzyme.shallow(React.createElement(exports.ResizableButton, tslib_1.__assign({}, getResizerTestProps())));
        expect(containerWrapper.find(Resizer_base_1.ResizerBase).length).toBe(1);
    });
    it('onSizeChanged is called when the size of the prop changes', function () {
        var containerWrapper = Enzyme.mount(React.createElement(exports.ResizableButton, tslib_1.__assign({}, getResizerTestProps())));
        var resizerWrapper = containerWrapper.find(Resizer_base_1.ResizerBase);
        // Disabling console.error
        // eslint-disable-next-line no-console
        var originalError = console.error;
        // eslint-disable-next-line no-console
        console.error = jest.fn();
        resizerWrapper.simulate('mouseDown');
        window.dispatchEvent(new MouseEvent('mousemove'));
        window.dispatchEvent(new MouseEvent('mouseup'));
        expect(sizeChangedCallback).toBeCalledTimes(1);
        // Enable console.error
        // eslint-disable-next-line no-console
        console.error = originalError;
        containerWrapper.unmount();
    });
    it('onSizeChanged is triggered on keypress (left/right)', function () {
        var keyBoardResize = jest.fn();
        var myProps = {
            location: Resizer_types_1.ResizerLocation.Right,
            size: 150,
            onSizeChanged: keyBoardResize
        };
        var containerWrapper = Enzyme.mount(React.createElement(exports.ResizableButton, tslib_1.__assign({}, myProps)));
        var resizerWrapper = containerWrapper.find(Resizer_base_1.ResizerBase);
        resizerWrapper.simulate('keydown', { keyCode: Utilities_1.KeyCodes.right });
        resizerWrapper.simulate('keydown', { keyCode: Utilities_1.KeyCodes.left });
        expect(keyBoardResize).toBeCalledTimes(2);
        containerWrapper.unmount();
    });
    it('onSizeChanged is triggered on keypress (up/down)', function () {
        var keyBoardResize = jest.fn();
        var myProps = {
            location: Resizer_types_1.ResizerLocation.Bottom,
            size: 150,
            onSizeChanged: keyBoardResize
        };
        var containerWrapper = Enzyme.mount(React.createElement(exports.ResizableButton, tslib_1.__assign({}, myProps)));
        var resizerWrapper = containerWrapper.find(Resizer_base_1.ResizerBase);
        resizerWrapper.simulate('keydown', { keyCode: Utilities_1.KeyCodes.down });
        resizerWrapper.simulate('keydown', { keyCode: Utilities_1.KeyCodes.up });
        expect(keyBoardResize).toBeCalledTimes(2);
        containerWrapper.unmount();
    });
});
//# sourceMappingURL=Resizer.test.js.map