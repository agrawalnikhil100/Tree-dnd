"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandBarWithSearchBoxBasicExample = void 0;
var tslib_1 = require("tslib");
var Toggle_1 = require("@fluentui/react/lib/Toggle");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var React = require("react");
var __1 = require("..");
// Example data
var contextualMenuItems_1 = require("../../../utilities/data/contextualMenuItems");
var CommandBarWithSearchBoxBasicExample = /** @class */ (function (_super) {
    tslib_1.__extends(CommandBarWithSearchBoxBasicExample, _super);
    function CommandBarWithSearchBoxBasicExample(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            isSearchBoxVisible: true,
            areNamesVisible: true,
            areIconsVisible: true
        };
        return _this;
    }
    CommandBarWithSearchBoxBasicExample.prototype.render = function () {
        var _this = this;
        var _a = this.state, searchBoxVisible = _a.isSearchBoxVisible, iconsVisible = _a.areIconsVisible, namesVisible = _a.areNamesVisible;
        var filteredItems = contextualMenuItems_1.items.map(function (item) {
            return Utilities_1.assign({}, item, {
                iconOnly: !namesVisible,
                icon: iconsVisible ? item.icon : ''
            });
        });
        var filteredOverflowItems = contextualMenuItems_1.overflowItems.map(function (item) {
            return Utilities_1.assign({}, item, {
                iconOnly: !namesVisible,
                icon: iconsVisible ? item.icon : ''
            });
        });
        var filteredFarItems = contextualMenuItems_1.farItems.map(function (item) {
            return Utilities_1.assign({}, item, {
                iconOnly: !namesVisible,
                icon: iconsVisible ? item.icon : ''
            });
        });
        var searchBoxProps = {
            placeholder: 'Search with debounce...',
            ariaLabel: 'Search',
            onChange: function (ev, text) { return alert(text); }
        };
        return (React.createElement("div", null,
            React.createElement(Toggle_1.Toggle, { label: "Show search box", checked: searchBoxVisible, onChanged: function (isSearchBoxVisible) { return _this.setState({ isSearchBoxVisible: isSearchBoxVisible }); }, onText: "Visible", offText: "Hidden" }),
            React.createElement(Toggle_1.Toggle, { label: "Show names", checked: namesVisible, onChanged: function (areNamesVisible) { return _this.setState({ areNamesVisible: areNamesVisible }); }, onText: "Visible", offText: "Hidden" }),
            React.createElement(Toggle_1.Toggle, { label: "Show icons", checked: iconsVisible, onChanged: function (areIconsVisible) { return _this.setState({ areIconsVisible: areIconsVisible }); }, onText: "Visible", offText: "Hidden" }),
            React.createElement(__1.CommandBarWithSearchBox, { wrapperClassName: 'test', isSearchBoxVisible: searchBoxVisible, searchBoxProps: searchBoxProps, items: filteredItems, overflowItems: filteredOverflowItems, farItems: filteredFarItems, onChangeDelay: 1000, overflowButtonProps: { ariaLabel: 'Overflow items' } })));
    };
    return CommandBarWithSearchBoxBasicExample;
}(React.Component));
exports.CommandBarWithSearchBoxBasicExample = CommandBarWithSearchBoxBasicExample;
//# sourceMappingURL=CommandBarWithSearchBox.Basic.Example.js.map