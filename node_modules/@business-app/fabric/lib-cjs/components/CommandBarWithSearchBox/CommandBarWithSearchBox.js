"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandBarWithSearchBox = void 0;
var tslib_1 = require("tslib");
var CommandBar_1 = require("@fluentui/react/lib/CommandBar");
var SearchBox_1 = require("@fluentui/react/lib/SearchBox");
var Styling_1 = require("@fluentui/react/lib/Styling");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var React = require("react");
/**
 * CommandBar wraps the Fabric CommandBar with customized styling.
 *
 * The CommandBar also has a SearchBox component defined to the right.
 *
 * @export
 * @class CommandBar
 * @extends {React.Component<ICommandBarWithSearchBoxProps>}
 */
var CommandBarWithSearchBox = /** @class */ (function (_super) {
    tslib_1.__extends(CommandBarWithSearchBox, _super);
    function CommandBarWithSearchBox(props) {
        var _a, _b;
        var _this = _super.call(this, props) || this;
        /**
         * Set this BaseComponent._skipComponentRefResolution to true, bypassing resolution of componentRef.
         */
        _this._skipComponentRefResolution = true;
        _this.theme = Styling_1.getTheme();
        _this.commandBarStyles = {
            root: {
                backgroundColor: _this.theme.palette.neutralLighter,
                selectors: (_a = {
                        '.ms-Button': {
                            backgroundColor: _this.theme.palette.neutralLighter,
                            selectors: (_b = {
                                    ':hover': {
                                        backgroundColor: _this.theme.palette.neutralQuaternaryAlt
                                    }
                                },
                                _b[Styling_1.HighContrastSelector] = {
                                    backgroundColor: 'Window'
                                },
                                _b)
                        }
                    },
                    _a[Styling_1.HighContrastSelector] = {
                        border: 'solid'
                    },
                    _a)
            }
        };
        _this.searchBoxStyles = {
            root: [
                'ms-SearchBox',
                {
                    height: '100%',
                    width: 168,
                    backgroundColor: 'transparent',
                    border: 0,
                    borderLeft: "1px solid " + _this.theme.palette.neutralLight,
                    selectors: {
                        ':hover': {
                            borderLeft: "1px solid " + _this.theme.palette.neutralLight
                        },
                        '.ms-CommandBar-sideCommands': {
                            padding: 0
                        },
                        '.ms-SearchBox-icon': {
                            color: _this.theme.palette.themeDarkAlt
                        },
                        '.ms-SearchBox-field': {
                            backgroundColor: 'transparent'
                        }
                    }
                }
            ]
        };
        return _this;
    }
    CommandBarWithSearchBox.prototype.render = function () {
        var _this = this;
        var _a = this.props, isSearchBoxVisible = _a.isSearchBoxVisible, searchBoxProps = _a.searchBoxProps, farItems = _a.farItems, wrapperClassName = _a.wrapperClassName, onChangeDelay = _a.onChangeDelay, other = tslib_1.__rest(_a, ["isSearchBoxVisible", "searchBoxProps", "farItems", "wrapperClassName", "onChangeDelay"]);
        if (isSearchBoxVisible) {
            if (!farItems) {
                farItems = [];
            }
            searchBoxProps = tslib_1.__assign(tslib_1.__assign({}, searchBoxProps), { styles: function (props) {
                    return _this.searchBoxStyles;
                } });
            if (searchBoxProps.onChange && onChangeDelay) {
                this._asyncFunctionToRun = this._async.debounce(searchBoxProps.onChange, onChangeDelay);
                searchBoxProps = tslib_1.__assign(tslib_1.__assign({}, searchBoxProps), { onChange: this._asyncFunctionToRun });
            }
            farItems = farItems.concat({
                key: 'ba-CommandBar-SearchBox',
                onRender: function (item) {
                    return React.createElement(SearchBox_1.SearchBox, tslib_1.__assign({}, searchBoxProps));
                }
            });
        }
        var className = 'ba-CommandBar ';
        className += wrapperClassName ? wrapperClassName : '';
        return (React.createElement("div", { className: className },
            React.createElement(CommandBar_1.CommandBar, tslib_1.__assign({}, other, { farItems: farItems, styles: this.commandBarStyles }))));
    };
    CommandBarWithSearchBox.prototype.componentWillUnmount = function () {
        this._async.dispose();
    };
    return CommandBarWithSearchBox;
}(Utilities_1.BaseComponent));
exports.CommandBarWithSearchBox = CommandBarWithSearchBox;
//# sourceMappingURL=CommandBarWithSearchBox.js.map