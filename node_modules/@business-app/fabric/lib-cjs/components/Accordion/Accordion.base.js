"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccordionBase = void 0;
var tslib_1 = require("tslib");
var Button_1 = require("@fluentui/react/lib/Button");
var Styling_1 = require("@fluentui/react/lib/Styling");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var React = require("react");
var Accordion_styles_1 = require("./Accordion.styles");
var getClassNames = Utilities_1.classNamesFunction();
var AccordionBase = /** @class */ (function (_super) {
    tslib_1.__extends(AccordionBase, _super);
    function AccordionBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isContentVisible: _this.props.checked
        };
        _this.closeAccordionOnEsc = function (event) {
            if (event.keyCode === Utilities_1.KeyCodes.escape && _this.getIsContentVisible()) {
                _this.toggleState();
            }
        };
        _this.toggleState = function () {
            _this.setState(function (prevState) {
                return { isContentVisible: !prevState.isContentVisible };
            });
        };
        return _this;
    }
    AccordionBase.prototype.getIsContentVisible = function () {
        return !!this.state.isContentVisible;
    };
    AccordionBase.prototype.componentDidUpdate = function (_prevProps, prevState) {
        if (this.state.isContentVisible && !prevState.isContentVisible && this.props.onOpen) {
            this.props.onOpen();
        }
        else if (!this.state.isContentVisible && prevState.isContentVisible && this.props.onClose) {
            this.props.onClose();
        }
    };
    AccordionBase.prototype.render = function () {
        var _a = this.props, styles = _a.styles, onRenderMenu = _a.onRenderMenu, menuIconProps = _a.menuIconProps, className = _a.className, buttonAs = _a.buttonAs, onClick = _a.onClick, onRenderContent = _a.onRenderContent, componentRef = _a.componentRef, theme = _a.theme, other = tslib_1.__rest(_a, ["styles", "onRenderMenu", "menuIconProps", "className", "buttonAs", "onClick", "onRenderContent", "componentRef", "theme"]);
        var isContentVisible = this.state.isContentVisible;
        var AccordionButton = buttonAs || Button_1.DefaultButton;
        if (!menuIconProps) {
            menuIconProps = { iconName: isContentVisible ? 'ChevronUp' : 'ChevronDown' };
        }
        onRenderContent = onRenderContent || onRenderMenu;
        var classNames = getClassNames(styles, {
            containerClassName: className,
            isContentVisible: isContentVisible,
            theme: theme
        });
        var container = classNames.container, content = classNames.content, header = classNames.header, customStyles = tslib_1.__rest(classNames, ["container", "content", "header"]);
        var headerStyles = Styling_1.concatStyleSets(Accordion_styles_1.getDefaultHeaderStyles(theme), customStyles);
        return (React.createElement("div", { className: container },
            React.createElement(AccordionButton, tslib_1.__assign({ onKeyDown: this.closeAccordionOnEsc, onClick: this.toggleState, onMenuClick: this.toggleState, menuIconProps: menuIconProps, className: header, "aria-expanded": isContentVisible, styles: headerStyles, theme: theme }, other)),
            (this.props.isHiddenOnDismiss || isContentVisible) && (React.createElement("div", { style: isContentVisible ? {} : { display: 'none' } },
                React.createElement("div", { onKeyDown: this.closeAccordionOnEsc, className: content }, onRenderContent && onRenderContent(this.props.menuProps))))));
    };
    return AccordionBase;
}(Utilities_1.BaseComponent));
exports.AccordionBase = AccordionBase;
//# sourceMappingURL=Accordion.base.js.map