/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { IBaseProps } from '@fluentui/react/lib/Utilities';
import { IPanelFooterButtonProps, IPanelProps } from '@business-app/fabric/lib/components/Panel';
import { MultistepPanel } from './MultistepPanel';
/**
 * Taken from Typescript documentation.
 */
export declare type Omit<T, K extends string> = Pick<T, Exclude<keyof T, K>>;
/**
 * Props relevant to an individual panel
 */
export interface IPanelStepProps extends Omit<IPanelProps, keyof InheritedPanelProps | 'ref' | 'footerButtons'> {
    readonly footerButtons?: IMultistepPanelFooterButtonProps[];
}
/**
 * Props relevant to the multistate panel as a whole, rather than individual panels
 */
export declare type InheritedPanelProps = Pick<IPanelProps, 'isOpen' | 'isBlocking' | 'isHiddenOnDismiss' | 'isLightDismiss' | 'onDismiss' | 'onDismissed' | 'onLightDismissClick' | 'dismissDialog' | 'showDismissDialog' | 'dismissOnEscape' | 'onOuterClick' | 'customWidth'>;
export interface IMultistepPanelProps extends IBaseProps<MultistepPanel>, InheritedPanelProps {
    /**
     * Ordered list of individual panel states.
     */
    panelsListProps: IPanelStepProps[];
    /**
     * Which of the individual panels is currently open.
     */
    panelOpenIndex: number;
    /**
     * Callback to set the state of the panelOpenIndex prop.
     * Used by the footer's navigateableOnClicks as well as header's left back button.
     */
    setPanelOpenIndex: (newIndex: number) => void;
    /**
     * Aria label on header's left side icon.
     */
    headerIconAriaLabel?: string;
    /**
     * Whether the "back" button on the left side of the panel header should be hidden.
     * False by default, meaning that the back button will be displayed (unless we are on the first step of the panel).
     */
    hideLeftHeaderBackButton?: boolean;
    /**
     * Custom navigation logic for when the back button on the left side of the header is clicked.
     * If not provided, the back button will simply navigate back one step.
     */
    onLeftHeaderBackButtonClicked?: (currentIndex: number, dismissPanel: () => void) => number | undefined;
}
export interface IMultistepPanelFooterButtonProps extends Omit<IPanelFooterButtonProps, 'dismissableOnClick'> {
    /**
     * When the button is clicked, determine which panel to navigate next to, or dismiss.
     * 'Back' and 'Next' will navigate to the previous or next panel, respectively, and dismiss if no such previous or next panel exists.
     * Return undefined to avoid triggering a navigation.
     */
    readonly navigateableOnClick: (currentIndex: number, dismissPanel: () => void) => number | undefined;
}
