"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmptyStateBase = void 0;
var tslib_1 = require("tslib");
var Button_1 = require("@fluentui/react/lib/Button");
var Icon_1 = require("@fluentui/react/lib/Icon");
var Link_1 = require("@fluentui/react/lib/Link");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var React = require("react");
var getClassNames = Utilities_1.classNamesFunction();
/**
 * Provides a message paired with an icon for list empty states or large error
 * messages.
 *
 * @export
 * @class EmptyState
 * @extends {React.Component<IEmptyStateProps>}
 */
var EmptyStateBase = /** @class */ (function (_super) {
    tslib_1.__extends(EmptyStateBase, _super);
    function EmptyStateBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EmptyStateBase.prototype.render = function () {
        var _a = this.props, className = _a.className, icon = _a.icon, primaryMessage = _a.primaryMessage, _b = _a.secondaryMessage, secondaryMessage = _b === void 0 ? [] : _b, learnMoreLabel = _a.learnMoreLabel, learnMoreProps = _a.learnMoreProps, callToActionText = _a.callToActionText, callToActionProps = _a.callToActionProps, _c = _a.maxWidth, maxWidth = _c === void 0 ? 300 : _c, onRenderLink = _a.onRenderLink, styles = _a.styles, theme = _a.theme, rest = tslib_1.__rest(_a, ["className", "icon", "primaryMessage", "secondaryMessage", "learnMoreLabel", "learnMoreProps", "callToActionText", "callToActionProps", "maxWidth", "onRenderLink", "styles", "theme"]);
        if (typeof secondaryMessage === 'string') {
            secondaryMessage = [secondaryMessage];
        }
        if (typeof icon === 'string') {
            icon = { iconName: icon };
        }
        var firstSecondaryMessage = secondaryMessage[0], otherMessages = secondaryMessage.slice(1);
        var classNames = getClassNames(styles, {
            theme: theme,
            className: className,
            buttonClassName: callToActionProps && callToActionProps.className
        });
        return (React.createElement("div", tslib_1.__assign({ role: "presentation", className: classNames.root, style: { maxWidth: maxWidth } }, rest),
            icon && React.createElement(Icon_1.Icon, tslib_1.__assign({}, icon)),
            primaryMessage && React.createElement("p", { className: classNames.primaryMessage }, primaryMessage),
            firstSecondaryMessage && (React.createElement("p", { className: classNames.secondaryMessage },
                firstSecondaryMessage,
                onRenderLink && onRenderLink(learnMoreProps),
                !onRenderLink && learnMoreProps && learnMoreLabel && (React.createElement(Link_1.Link, tslib_1.__assign({ key: 1 }, learnMoreProps, { styles: { root: { marginLeft: 5 } } }), learnMoreLabel)))),
            otherMessages.map(function (text, i) { return (React.createElement("p", { key: i, className: classNames.secondaryMessage }, text)); }),
            callToActionText && callToActionProps && (React.createElement(Button_1.PrimaryButton, tslib_1.__assign({ text: callToActionText }, callToActionProps, { className: classNames.button })))));
    };
    return EmptyStateBase;
}(React.Component));
exports.EmptyStateBase = EmptyStateBase;
//# sourceMappingURL=EmptyState.base.js.map