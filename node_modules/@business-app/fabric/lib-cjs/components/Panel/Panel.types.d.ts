/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { IButtonProps } from '@fluentui/react/lib/Button';
import { IMessageBarProps } from '@fluentui/react/lib/MessageBar';
import { IOverlayProps } from '@fluentui/react/lib/Overlay';
import { IPanelProps as IOfficePanelProps } from '@fluentui/react/lib/Panel';
import { ISpinnerProps } from '@fluentui/react/lib/Spinner';
import { IRenderFunction } from '@fluentui/react/lib/Utilities';
import { IEmptyStateProps } from '../EmptyState';
export interface IPanelProps extends Partial<IOfficePanelProps> {
    /**
     * Whether the panel should be open.
     */
    readonly isOpen?: boolean;
    /**
     * The buttons to show at the footer of the panel.
     */
    readonly footerButtons?: IPanelFooterButtonProps[];
    /**
     * Whether to wrap the children of the panel in a vertical stack. True by default.
     */
    readonly wrapContentsInStack?: boolean;
    /**
     * What type of close button to use. Standard close ("X") by default.
     */
    readonly closeButtonType?: PanelCloseButtonType;
    /**
     * If provided, panel renders the empty state component with the given props
     */
    readonly emptyStateProps?: IEmptyStateProps;
    /**
     * An optional custom rendering callback for the sub-header.
     */
    readonly onRenderSubHeader?: IRenderFunction<IPanelProps>;
    /**
     * Optionally display a message bar in the header
     * User for success messages, error message, etc
     */
    readonly messageBar?: IMessageBar;
    /**
     *  Displays a spinner with an overlay on the panel, if provided
     */
    readonly loadingOverlay?: ILoadingOverlay;
    /**
     *  Displays a tooltip for close button on the panel, if provided
     */
    readonly tooltipText?: string;
    /**
     *  Determines whether the dismiss dialog should be shown or not
     */
    readonly showDismissDialog?: boolean;
    /**
     *  Displays a dismiss dialog
     */
    readonly dismissDialog?: IDismissDialog;
    /**
     *  Determines whether the panel should be dismissed when pressing Escape
     */
    readonly dismissOnEscape?: boolean;
    /**
     * The props for the header's left side button.
     */
    readonly headerLeftButtonProps?: IButtonProps;
    /**
     * @deprecated
     * Whether to allow the open/close panel animation.
     * Use styles attr: `styles={{
     *      main: {
     *         animation: 'none',
     *      },
     *  }}`
     */
    readonly allowAnimating?: boolean;
    /**
     *  Unique to identify panel
     */
    readonly key?: string;
}
export interface IDismissDialog {
    /**
     * Specifies the title to show for the dismiss dialog
     */
    title?: string;
    /**
     * Specifies the subtext to show for the dismiss dialog
     */
    subtext?: string;
    /**
     * Specifies the text to show for the dismiss dialog confirm button
     */
    confirmButtonText?: string;
    /**
     * Specifies the text to show for the dismiss dialog cancel button
     */
    cancelButtonText?: string;
}
export interface ILoadingOverlay {
    /**
     * Specifies the text to show on the spinner
     */
    loadingText?: string;
    /**
     * Optionally customize spinner props
     */
    spinnerProps?: ISpinnerProps;
    /**
     * Optionally customize the panel overlay
     */
    overlayProps?: IOverlayProps;
}
export interface IMessageBar {
    /**
     * Props to the message bar
     */
    messageBarProps: IMessageBarProps;
    /**
     * Content rendered in the message bar
     */
    onRenderBody: IRenderFunction<void>;
}
export declare enum PanelCloseButtonType {
    Close = 0,
    Back = 1
}
export interface IPanelFooterButtonProps extends IButtonProps {
    /**
     * The action to perform when the button is clicked, with the capability to
     * dismiss the panel passed in.
     */
    readonly dismissableOnClick: (dismissPanel: () => void) => void;
}
