"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Panel = void 0;
var tslib_1 = require("tslib");
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
var React = require("react");
var Button_1 = require("@fluentui/react/lib/Button");
var Dialog_1 = require("@fluentui/react/lib/Dialog");
var MessageBar_1 = require("@fluentui/react/lib/MessageBar");
var Overlay_1 = require("@fluentui/react/lib/Overlay");
var Panel_1 = require("@fluentui/react/lib/Panel");
var Spinner_1 = require("@fluentui/react/lib/Spinner");
var Styling_1 = require("@fluentui/react/lib/Styling");
var Tooltip_1 = require("@fluentui/react/lib/Tooltip");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var EmptyState_1 = require("../EmptyState");
var Styles = require("./Panel.styles");
var Panel = /** @class */ (function (_super) {
    tslib_1.__extends(Panel, _super);
    function Panel(props) {
        var _this = _super.call(this, props) || this;
        _this.palette = Styling_1.getTheme().palette;
        _this.headerStyle = {
            color: _this.palette.black
        };
        _this._blockDismissOnEscape = function (event) {
            if (event) {
                event.preventDefault();
            }
        };
        _this._onRenderLoadingOverlay = function () {
            var loadingOverlay = _this.props.loadingOverlay;
            return (loadingOverlay && (React.createElement(Overlay_1.Overlay, tslib_1.__assign({ className: "ba-Panel-LoadingOverlay", styles: { root: { backgroundColor: _this.palette.white, opacity: 0.9 } } }, loadingOverlay.overlayProps),
                React.createElement(Spinner_1.Spinner, tslib_1.__assign({ size: Spinner_1.SpinnerSize.large, label: loadingOverlay.loadingText }, loadingOverlay.spinnerProps)))));
        };
        _this._onRenderEmptyState = function () {
            var emptyStateProps = _this.props.emptyStateProps;
            return (React.createElement("div", { className: Styles.panelStyleClasses.emptyStateContainer },
                React.createElement(EmptyState_1.EmptyState, tslib_1.__assign({}, emptyStateProps))));
        };
        _this._onRenderHeader = function (headerProps, defaultRender, headerTextId) {
            var _a = _this, props = _a.props, _onDismiss = _a._onDismiss, _onRenderMessageBar = _a._onRenderMessageBar;
            var hasCloseButton = props.hasCloseButton, headerText = props.headerText, headerClassName = props.headerClassName, onRenderSubHeader = props.onRenderSubHeader, closeButtonAriaLabel = props.closeButtonAriaLabel, headerLeftButtonProps = props.headerLeftButtonProps, tooltipText = props.tooltipText;
            // Default icon for the left side button
            if (headerLeftButtonProps) {
                headerLeftButtonProps = tslib_1.__assign(tslib_1.__assign({}, headerLeftButtonProps), { iconProps: tslib_1.__assign({ iconName: 'Back' }, headerLeftButtonProps.iconProps) });
            }
            return (React.createElement(React.Fragment, null,
                React.createElement("div", { className: "ba-Panel-headerContainer" },
                    React.createElement("div", { className: Styles.panelStyleClasses.panelHeader },
                        React.createElement("div", { className: Styles.panelStyleClasses.panelHeaderLeft },
                            headerLeftButtonProps && React.createElement(Button_1.IconButton, tslib_1.__assign({}, headerLeftButtonProps)),
                            React.createElement("h1", { id: headerTextId, className: Utilities_1.css(Styles.panelStyleClasses.panelHeaderText, headerClassName), style: _this.headerStyle }, headerText)),
                        hasCloseButton && (React.createElement(Tooltip_1.TooltipHost, { content: tooltipText ? tooltipText : closeButtonAriaLabel },
                            React.createElement(Button_1.IconButton, { ariaLabel: closeButtonAriaLabel, iconProps: { iconName: 'Cancel' }, onClick: _onDismiss })))),
                    onRenderSubHeader && onRenderSubHeader(props)),
                _onRenderMessageBar()));
        };
        _this._onRenderMessageBar = function () {
            var messageBar = _this.props.messageBar;
            return (messageBar && (React.createElement(MessageBar_1.MessageBar, tslib_1.__assign({ styles: {
                    root: { marginBottom: 8, flexShrink: 0 },
                    iconContainer: { marginTop: 8, marginBottom: 8 },
                    text: { marginTop: 8, marginBottom: 8 }
                } }, messageBar.messageBarProps), messageBar.onRenderBody())));
        };
        _this._onRenderDialog = function () {
            var _a = _this.props, onDismiss = _a.onDismiss, dismissDialog = _a.dismissDialog;
            return (React.createElement(Dialog_1.Dialog, { hidden: !_this.state.isDialogOpen, onDismiss: _this._closeDialog, dialogContentProps: {
                    type: Dialog_1.DialogType.normal,
                    title: dismissDialog ? dismissDialog.title : '',
                    subText: dismissDialog ? dismissDialog.subtext : ''
                } },
                React.createElement(Dialog_1.DialogFooter, null,
                    React.createElement(Button_1.PrimaryButton, { onClick: function () {
                            onDismiss();
                            _this._closeDialog();
                        }, text: dismissDialog ? dismissDialog.confirmButtonText : '' }),
                    React.createElement(Button_1.DefaultButton, { onClick: _this._closeDialog, text: dismissDialog ? dismissDialog.cancelButtonText : '' }))));
        };
        _this._openDialog = function () {
            _this.setState({ isDialogOpen: true });
        };
        _this._closeDialog = function () {
            _this.setState({ isDialogOpen: false });
        };
        _this._onDismiss = function () {
            var _a = _this.props, showDismissDialog = _a.showDismissDialog, onDismiss = _a.onDismiss;
            showDismissDialog ? _this._openDialog() : onDismiss();
        };
        _this._onRenderFooterContent = function () {
            var _a = _this.props, footerButtons = _a.footerButtons, onRenderFooterContent = _a.onRenderFooterContent;
            return (footerButtons && (React.createElement(PanelFooter, { footerButtons: footerButtons, dismissPanel: function () { return _this._onDismiss(); }, onRenderFooterContent: onRenderFooterContent })));
        };
        _this._onKeyDown = function (event) {
            if (event.keyCode === Utilities_1.KeyCodes.escape && !event.defaultPrevented) {
                _this._onDismiss();
                event.stopPropagation();
                event.preventDefault();
            }
        };
        _this.state = {
            isDialogOpen: false
        };
        return _this;
    }
    Panel.prototype.render = function () {
        var _a = this, props = _a.props, _blockDismissOnEscape = _a._blockDismissOnEscape, _onDismiss = _a._onDismiss, _onKeyDown = _a._onKeyDown, _onRenderDialog = _a._onRenderDialog, _onRenderEmptyState = _a._onRenderEmptyState, _onRenderFooterContent = _a._onRenderFooterContent, _onRenderHeader = _a._onRenderHeader, _onRenderLoadingOverlay = _a._onRenderLoadingOverlay;
        var children = props.children, className = props.className, dismissOnEscape = props.dismissOnEscape, emptyStateProps = props.emptyStateProps, footerButtons = props.footerButtons, headerClassName = props.headerClassName, key = props.key, loadingOverlay = props.loadingOverlay, messageBar = props.messageBar, onDismiss = props.onDismiss, onRenderBody = props.onRenderBody, onRenderFooterContent = props.onRenderFooterContent, showDismissDialog = props.showDismissDialog, styles = props.styles, wrapContentsInStack = props.wrapContentsInStack, rest = tslib_1.__rest(props, ["children", "className", "dismissOnEscape", "emptyStateProps", "footerButtons", "headerClassName", "key", "loadingOverlay", "messageBar", "onDismiss", "onRenderBody", "onRenderFooterContent", "showDismissDialog", "styles", "wrapContentsInStack"]);
        var myStyles = Styling_1.concatStyleSetsWithProps(props, Styles.panelStyles, styles);
        return (React.createElement(Panel_1.Panel, tslib_1.__assign({ role: "presentation", key: key || 'Panel', className: Utilities_1.css('ba-Panel', className), headerClassName: Utilities_1.css('ba-Panel-header', headerClassName), type: Panel_1.PanelType.smallFixedFar, isLightDismiss: true, isFooterAtBottom: true, onRenderHeader: _onRenderHeader, onRenderFooterContent: footerButtons ? _onRenderFooterContent : onRenderFooterContent, onRenderBody: !!emptyStateProps ? _onRenderEmptyState : onRenderBody, onRenderNavigation: function () { return null; }, onLightDismissClick: _onDismiss, onKeyDown: dismissOnEscape ? _onKeyDown : undefined, onDismiss: dismissOnEscape ? undefined : _blockDismissOnEscape }, rest, { hasCloseButton: false, styles: myStyles }),
            wrapContentsInStack === undefined || wrapContentsInStack ? (React.createElement("div", { className: "ba-Panel-content" }, children)) : (children),
            _onRenderLoadingOverlay(),
            _onRenderDialog()));
    };
    Panel.defaultProps = {
        hasCloseButton: true
    };
    return Panel;
}(React.Component));
exports.Panel = Panel;
var PanelFooter = function (_a) {
    var footerButtons = _a.footerButtons, onRenderFooterContent = _a.onRenderFooterContent, dismissPanel = _a.dismissPanel;
    return (React.createElement("div", { className: Styles.panelStyleClasses.panelFooter },
        onRenderFooterContent && onRenderFooterContent(),
        footerButtons &&
            footerButtons.map(function (button, i) {
                var commonProps = tslib_1.__assign({ key: "ba-Panel-footerButton-" + i, className: Styles.panelStyleClasses.panelFooterButton, disabled: !!button.disabled, onClick: function () { return button.dismissableOnClick(dismissPanel); } }, button);
                if (button.primary) {
                    return (React.createElement(Button_1.PrimaryButton, tslib_1.__assign({}, commonProps, { className: Utilities_1.css(commonProps.className, 'ba-Panel-footer-primaryButton') }), button.text));
                }
                else {
                    return React.createElement(Button_1.DefaultButton, tslib_1.__assign({}, commonProps), button.text);
                }
            })));
};
//# sourceMappingURL=Panel.js.map