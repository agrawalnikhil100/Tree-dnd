"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Enzyme = require("enzyme");
require("jest");
var Overlay_1 = require("@fluentui/react/lib/Overlay");
var Spinner_1 = require("@fluentui/react/lib/Spinner");
var Toggle_1 = require("@fluentui/react/lib/Toggle");
var React = require("react");
var _1 = require(".");
var EmptyState_1 = require("../EmptyState");
describe('Panel', function () {
    var dismissDialog = {
        title: 'Discard changes',
        subtext: 'Are you sure you want to discard changes?',
        confirmButtonText: 'Discard',
        cancelButtonText: 'Cancel'
    };
    it('should not unexpectedly change', function () {
        var wrapper = Enzyme.shallow(React.createElement(_1.Panel, { onDismiss: function () { return null; }, headerText: "Test", dismissDialog: dismissDialog, onRenderNavigation: function () { return null; } }));
        expect(wrapper).toMatchSnapshot();
    });
    it('panel should render overlay with spinner if provided', function () {
        var wrapper = Enzyme.shallow(React.createElement(_1.Panel, { onDismiss: function () { return null; }, headerText: "Test", loadingOverlay: { loadingText: 'Load' }, dismissDialog: dismissDialog }));
        expect(wrapper.find(Overlay_1.Overlay).length).toBe(1);
        expect(wrapper.find(Spinner_1.Spinner).length).toBe(1);
    });
    it('panel should render empty state if provided', function () {
        var wrapper = Enzyme.shallow(React.createElement(_1.Panel, { onDismiss: function () { return null; }, dismissDialog: dismissDialog, headerText: "Test", emptyStateProps: {
                primaryMessage: 'empty',
                icon: 'Accept'
            } }));
        var onRenderBodyWrapper = Enzyme.shallow(wrapper.props().onRenderBody());
        var emptyStateWrapper = onRenderBodyWrapper.find(EmptyState_1.EmptyState);
        expect(emptyStateWrapper.length).toBe(1);
    });
    it('render subheader if provided', function () {
        var wrapper = Enzyme.shallow(React.createElement(_1.Panel, { onRenderHeader: function () { return (React.createElement("div", null,
                React.createElement(Toggle_1.Toggle, null))); }, headerText: "Test" }));
        var onRenderHeaderWrapper = Enzyme.shallow(wrapper.props().onRenderHeader());
        var toggleWrapper = onRenderHeaderWrapper.find(Toggle_1.Toggle);
        expect(toggleWrapper.length).toBe(1);
    });
    describe('onRenderFooterContent', function () {
        it('should render onRenderFooterContent if provided along with footerButtons', function () {
            var footerContent = function () {
                return React.createElement("div", { className: "customFooterContent" }, "dummyFooterContent");
            };
            var footerButtons = [
                {
                    text: 'button1',
                    primary: true,
                    dismissableOnClick: jest.fn()
                },
                {
                    text: 'button2',
                    primary: false,
                    dismissableOnClick: jest.fn()
                }
            ];
            var wrapper = Enzyme.shallow(React.createElement(_1.Panel, { headerText: "Test", onRenderFooterContent: footerContent, footerButtons: footerButtons }));
            var onRenderFooterContentWrapper = Enzyme.shallow(wrapper.props().onRenderFooterContent());
            var footer = onRenderFooterContentWrapper.find('.ba-Panel-footer');
            expect(footer.length).toBe(1);
            var customFooterContent = footer.find('.customFooterContent');
            expect(customFooterContent.length).toBe(1);
            expect(customFooterContent.text()).toBe('dummyFooterContent');
            var buttons = footer.find('.ba-Panel-footerButton');
            expect(buttons.length).toBe(2);
        });
        it('should render onRenderFooterContent if provided without footerButtons', function () {
            var footerContent = function () {
                return React.createElement("div", { className: "customFooterContent" }, "dummyFooterContent");
            };
            var wrapper = Enzyme.shallow(React.createElement(_1.Panel, { headerText: "Test", onRenderFooterContent: footerContent }));
            var onRenderFooterContentWrapper = Enzyme.shallow(wrapper.props().onRenderFooterContent());
            var customFooterContent = onRenderFooterContentWrapper.find('.customFooterContent');
            expect(customFooterContent.length).toBe(1);
            expect(customFooterContent.text()).toBe('dummyFooterContent');
            var buttons = onRenderFooterContentWrapper.find('.ba-Panel-footerButton');
            expect(buttons.length).toBe(0);
        });
        it('should render footerButtons if onRenderFooterContent not provided', function () {
            var footerButtons = [
                {
                    text: 'button1',
                    primary: true,
                    dismissableOnClick: jest.fn()
                },
                {
                    text: 'button2',
                    primary: false,
                    dismissableOnClick: jest.fn()
                }
            ];
            var wrapper = Enzyme.shallow(React.createElement(_1.Panel, { headerText: "Test", footerButtons: footerButtons }));
            var onRenderFooterContentWrapper = Enzyme.shallow(wrapper.props().onRenderFooterContent());
            var footer = onRenderFooterContentWrapper.find('.ba-Panel-footer');
            expect(footer.length).toBe(1);
            var buttons = footer.find('.ba-Panel-footerButton');
            expect(buttons.length).toBe(2);
        });
    });
});
//# sourceMappingURL=Panel.test.js.map