"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeViewFileTreeExample = void 0;
var tslib_1 = require("tslib");
var ContextualMenu_1 = require("@fluentui/react/lib/ContextualMenu");
var React = require("react");
var TreeView_base_1 = require("../TreeView.base");
var TreeViewFileTreeExample = /** @class */ (function (_super) {
    tslib_1.__extends(TreeViewFileTreeExample, _super);
    function TreeViewFileTreeExample() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._sharedOptions = [
            {
                key: 'Rename',
                text: 'Rename',
                iconProps: { iconName: 'Rename' }
            },
            {
                key: 'Delete',
                text: 'Delete',
                iconProps: { iconName: 'Delete' }
            }
        ];
        _this._getCommands = function (item) {
            if (item.isFolder) {
                return tslib_1.__spreadArrays([
                    {
                        key: 'New File',
                        text: 'New File',
                        iconProps: { iconName: 'PageAdd' }
                    },
                    {
                        key: 'New Folder',
                        text: 'New Folder',
                        iconProps: { iconName: 'FabricNewFolder' }
                    },
                    {
                        key: 'divider-1',
                        text: 'divider-1',
                        itemType: ContextualMenu_1.ContextualMenuItemType.Divider
                    }
                ], _this._sharedOptions);
            }
            return _this._sharedOptions;
        };
        return _this;
    }
    TreeViewFileTreeExample.prototype.render = function () {
        var items = [
            {
                label: 'src',
                key: '0',
                children: [
                    {
                        label: 'components',
                        key: '1',
                        children: [
                            {
                                label: 'Tree',
                                key: '2',
                                children: [
                                    {
                                        label: 'tree.html',
                                        key: '3',
                                        iconProps: { iconName: 'FileHTML' }
                                    },
                                    {
                                        label: 'tree.less',
                                        key: '4',
                                        iconProps: { iconName: 'FileLess' }
                                    },
                                    {
                                        label: 'tree.js',
                                        key: '5',
                                        iconProps: { iconName: 'FileCode' }
                                    }
                                ]
                            },
                            {
                                label: 'Banner',
                                key: '6',
                                children: [
                                    {
                                        label: 'banner.html',
                                        key: '7',
                                        iconProps: { iconName: 'FileHTML' }
                                    },
                                    {
                                        label: 'banner.less',
                                        key: '8',
                                        iconProps: { iconName: 'FileLess' }
                                    },
                                    {
                                        label: 'banner.js',
                                        key: '9',
                                        iconProps: { iconName: 'FileCode' }
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        label: 'index.html',
                        key: '10',
                        iconProps: { iconName: 'FileHTML' }
                    },
                    {
                        label: 'index.less',
                        key: '11',
                        iconProps: { iconName: 'FileLess' }
                    }
                ]
            },
            {
                label: 'package.json',
                key: '12',
                iconProps: { iconName: 'FileCode' }
            },
            {
                label: 'README.md',
                key: '13',
                iconProps: { iconName: 'Info' }
            }
        ];
        return (React.createElement("div", null,
            React.createElement("p", null, "This is an example of rendering a tree like the file tree in VSCode, where leaf nodes have icons and folders have carets."),
            React.createElement("div", { style: { width: '520px', height: '420px', overflow: 'auto', userSelect: 'none' } },
                React.createElement(TreeView_base_1.TreeView, { items: items, strings: {
                        listAriaLabel: 'list',
                        moreCommandsAriaLabel: 'more commands'
                    }, getItemCommands: this._getCommands, styles: {
                        // When there is no collapse/expand icon,
                        // don't preserve the space it would have occupied.
                        noExpandIcon: {
                            width: 0
                        }
                    } }))));
    };
    return TreeViewFileTreeExample;
}(React.Component));
exports.TreeViewFileTreeExample = TreeViewFileTreeExample;
//# sourceMappingURL=TreeView.FileTree.Example.js.map