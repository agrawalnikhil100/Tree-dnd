"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var enzyme_1 = require("enzyme");
var React = require("react");
var Tree_1 = require("../Tree");
var TreeView_base_1 = require("./TreeView.base");
describe('TreeView', function () {
    it('TreeView items should get correctly sent to the Tree', function () {
        var wrapper = enzyme_1.mount(React.createElement(TreeView_base_1.TreeView, { items: [
                {
                    label: 'one',
                    key: '1',
                    children: [
                        {
                            label: 'two',
                            key: '2'
                        },
                        {
                            label: 'three',
                            key: '3'
                        }
                    ]
                }
            ], strings: {
                listAriaLabel: 'list',
                moreCommandsAriaLabel: 'more commands'
            }, initialExpandedItemKeys: new Set(['1']) }));
        var node1Props = wrapper.find(Tree_1.TreeNode).at(0).props();
        var node2Props = wrapper.find(Tree_1.TreeNode).at(1).props();
        var node3Props = wrapper.find(Tree_1.TreeNode).at(2).props();
        expect(node1Props.label).toEqual('one');
        expect(node1Props.itemKey).toEqual('1');
        expect(node1Props.level).toEqual(0);
        expect(node1Props.indexInParent).toEqual(0);
        expect(node1Props.setSize).toEqual(1);
        expect(node1Props.isFolder).toEqual(true);
        expect(node2Props.label).toEqual('two');
        expect(node2Props.itemKey).toEqual('2');
        expect(node2Props.level).toEqual(1);
        expect(node2Props.indexInParent).toEqual(0);
        expect(node2Props.setSize).toEqual(2);
        expect(node2Props.isFolder).toBeFalsy();
        expect(node3Props.label).toEqual('three');
        expect(node3Props.itemKey).toEqual('3');
        expect(node3Props.level).toEqual(1);
        expect(node3Props.indexInParent).toEqual(1);
        expect(node3Props.setSize).toEqual(2);
        expect(node3Props.isFolder).toBeFalsy();
        wrapper.unmount();
    });
    it('TreeView items should only be folders when they have children', function () {
        var wrapper = enzyme_1.mount(React.createElement(TreeView_base_1.TreeView, { items: [
                {
                    label: 'one',
                    key: '1',
                    children: [
                        {
                            label: '',
                            key: 'child'
                        }
                    ]
                },
                {
                    label: 'two',
                    key: '2',
                    children: []
                },
                {
                    label: 'three',
                    key: '3'
                }
            ], strings: {
                listAriaLabel: 'list',
                moreCommandsAriaLabel: 'more commands'
            }, initialExpandedItemKeys: new Set(['1']) }));
        var node1Props = wrapper.find(Tree_1.TreeNode).at(0).props();
        var node2Props = wrapper.find(Tree_1.TreeNode).at(1).props();
        var node3Props = wrapper.find(Tree_1.TreeNode).at(2).props();
        expect(node1Props.isFolder).toEqual(true);
        expect(node2Props.isFolder).toBeFalsy();
        expect(node3Props.isFolder).toBeFalsy();
        wrapper.unmount();
    });
});
//# sourceMappingURL=TreeView.test.js.map