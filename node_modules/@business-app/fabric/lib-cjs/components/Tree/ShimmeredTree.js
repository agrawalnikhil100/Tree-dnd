"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShimmeredTree = void 0;
var tslib_1 = require("tslib");
var Shimmer_1 = require("@fluentui/react/lib/Shimmer");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var React = require("react");
var Tree_1 = require("./Tree");
var Tree_base_1 = require("./Tree.base");
var getClassNames = Utilities_1.classNamesFunction();
var ShimmeredTree = function (props) {
    var onRenderItemLabelContent = props.onRenderItemLabelContent, shimmerProps = props.shimmerProps, ShimmerAs = props.shimmerAs, styles = props.styles, rest = tslib_1.__rest(props, ["onRenderItemLabelContent", "shimmerProps", "shimmerAs", "styles"]);
    var theme = props.theme, className = props.className, iconWidth = props.iconWidth, nodeHeight = props.nodeHeight;
    var classNames = React.useMemo(function () {
        return getClassNames(styles, {
            nodeHeight: nodeHeight,
            iconWidth: iconWidth,
            className: className,
            theme: theme
        });
    }, [styles, theme, className, iconWidth, nodeHeight]);
    var ShimmerType = Shimmer_1.Shimmer;
    if (ShimmerAs !== undefined) {
        // eslint-disable-next-line @typescript-eslint/no-shadow
        ShimmerType = function (props) { return React.createElement(ShimmerAs, tslib_1.__assign({}, props, { defaultRender: Shimmer_1.Shimmer })); };
    }
    var onTreeRenderItemLabelContent = React.useCallback(function (item, isSelected, isExpanded, index, defaultRender) {
        var shimmerRender = function () {
            return (React.createElement(ShimmerType, tslib_1.__assign({ styles: classNames.subComponentStyles.shimmer, shimmerElements: [
                    { type: Shimmer_1.ShimmerElementType.line, width: iconWidth || Tree_base_1.defaultIconWidth, height: nodeHeight },
                    { type: Shimmer_1.ShimmerElementType.gap, width: 4, height: nodeHeight },
                    { type: Shimmer_1.ShimmerElementType.line, height: nodeHeight }
                ] }, shimmerProps)));
        };
        if (onRenderItemLabelContent !== undefined) {
            return onRenderItemLabelContent(item, isSelected, isExpanded, index, shimmerRender);
        }
        if (item.isShimmered === true) {
            return shimmerRender();
        }
        else {
            return defaultRender();
        }
    }, [shimmerProps, ShimmerType, iconWidth, nodeHeight, classNames, onRenderItemLabelContent]);
    return React.createElement(Tree_1.Tree, tslib_1.__assign({ styles: classNames }, rest, { onRenderItemLabelContent: onTreeRenderItemLabelContent }));
};
exports.ShimmeredTree = ShimmeredTree;
//# sourceMappingURL=ShimmeredTree.js.map