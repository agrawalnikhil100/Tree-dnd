"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextualMenuButton = void 0;
var tslib_1 = require("tslib");
var Icon_1 = require("@fluentui/react/lib/Icon");
var Styling_1 = require("@fluentui/react/lib/Styling");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var React = require("react");
var ContextualMenuButton = /** @class */ (function (_super) {
    tslib_1.__extends(ContextualMenuButton, _super);
    function ContextualMenuButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._button = React.createRef();
        _this._contextMenuExpandedId = Utilities_1.getId('ba-Tree-ContextMenu-Expanded');
        _this._doubleClickEater = function (ev) {
            ev.stopPropagation();
            ev.preventDefault();
        };
        return _this;
    }
    ContextualMenuButton.prototype.render = function () {
        var _a = this.props, ariaLabel = _a.ariaLabel, className = _a.className, directionalHint = _a.directionalHint, disabled = _a.disabled, iconProps = _a.iconProps, isOpen = _a.isOpen, items = _a.items, menuClosedStyle = _a.menuClosedStyle, menuDisabledStyle = _a.menuDisabledStyle, menuOpenStyle = _a.menuOpenStyle, onClick = _a.onClick, onDismiss = _a.onDismiss, onRenderContextualMenu = _a.onRenderContextualMenu;
        var buttonStyle = Styling_1.mergeStyles(className, isOpen ? menuOpenStyle : menuClosedStyle, disabled ? menuDisabledStyle : undefined);
        return (React.createElement(React.Fragment, null,
            React.createElement("button", { ref: this._button, className: buttonStyle, onClick: onClick, onContextMenu: onClick, onDoubleClick: this._doubleClickEater, disabled: disabled, "aria-haspopup": true, "aria-label": ariaLabel, "aria-expanded": isOpen, "aria-controls": isOpen ? this._contextMenuExpandedId : null, "data-is-focusable": false },
                React.createElement(Icon_1.Icon, tslib_1.__assign({}, iconProps))),
            isOpen &&
                items &&
                this._button.current &&
                onRenderContextualMenu({
                    items: items,
                    onDismiss: onDismiss,
                    shouldFocusOnMount: true,
                    gapSpace: 0,
                    directionalHint: directionalHint,
                    isBeakVisible: false,
                    ariaLabel: ariaLabel,
                    target: this._button.current,
                    id: this._contextMenuExpandedId
                })));
    };
    return ContextualMenuButton;
}(React.Component));
exports.ContextualMenuButton = ContextualMenuButton;
//# sourceMappingURL=ContextualMenuButton.js.map