/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { IContextualMenuItem, IContextualMenuProps } from '@fluentui/react/lib/ContextualMenu';
import { IIconProps } from '@fluentui/react/lib/Icon';
import { IStyle } from '@fluentui/react/lib/Styling';
import * as React from 'react';
import { SelectionType } from '../Tree.types';
export interface ITreeNodeProps {
    /** The item key for the node. */
    itemKey: string;
    /** The label (display text) for the node. */
    label: string;
    /** An optional aria label for the node. */
    ariaLabel?: string;
    /** Optional icon props to be used to render an icon for the node. */
    iconProps?: IIconProps;
    /** Whether or not the node is a folder node which can be collapsed and expanded. */
    isFolder: boolean;
    /** Whether or not the node can be selected. */
    isSelectionDisabled: boolean;
    /**
     * Whether or not the node is disabled. A disabled node can still be selected,
     * but not doubled clicked and the contextual menu button will be disabled.
     */
    isDisabled: boolean;
    /** The indentation level for the node (0-based index). */
    level: number;
    /** The set size (number of siblings + 1) for the node, used for screen readers. */
    setSize?: number;
    /** The (0-based) index of this node inside its parent. Used for screen readers. */
    indexInParent?: number;
    /** Whether or not this node is expanded. */
    isExpanded: boolean;
    /** Whether or not this node is selected. */
    isSelected: boolean;
    /** Whether or not this node is focusable. */
    isFocusable: boolean;
    /** Whether or not this node is collapsible. */
    isCollapsible: boolean;
    /** Whether or not this node has commands for a contextual menu. */
    hasCommands: boolean;
    moreCommandsAriaLabel?: string;
    /** The Fabric icon to use for the contextual menu button. */
    moreIcon: string;
    /**
     * The Fabric icon to use for the collapsed arrow.
     * There is no option for the expanded arrow
     * because the collapsed arrow will be animated and rotated.
     */
    collapsedArrowIcon: string;
    itemStyle: string;
    itemLabelStyle: string;
    indentSpacerStyle: string;
    menuButtonStyle: string;
    menuButtonOpenStyle: string;
    menuButtonClosedStyle: string;
    menuButtonDisabledStyle: string;
    expandIconButtonStyle: string;
    expandIconStyle: string;
    noExpandIconStyle: string;
    itemIconContainerStyle: string;
    itemIconStyle: string;
    noItemIconStyle: string;
    getCommands(itemKey: string): IContextualMenuItem[];
    onSelected(itemKey: string, type: SelectionType): void;
    onDoubleClicked(itemKey: string): void;
    onExpandToggled(itemKey: string): void;
    onItemKeyDown?(itemKey: string, event: React.KeyboardEvent<HTMLElement>): void;
    onRenderItemContainer?(itemKey: string, defaultItemRender: () => JSX.Element): JSX.Element;
    onRenderItemLabel?(itemKey: string, defaultLabelRender: () => JSX.Element): JSX.Element;
    onRenderItemLabelContent?(itemKey: string, defaultLabelRender: () => JSX.Element): JSX.Element;
    onRenderExpandIcon?(itemKey: string, defaultIconRender: () => JSX.Element): JSX.Element;
    onRenderContextualMenu?(itemKey: string, menuProps: IContextualMenuProps): JSX.Element;
}
export interface ITreeItemStyles {
    /**
     * Style for the root element
     */
    root?: IStyle;
    itemHover?: IStyle;
    itemSelected?: IStyle;
}
