"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeHeavilyCustomizedExample = void 0;
var tslib_1 = require("tslib");
var Button_1 = require("@fluentui/react/lib/Button");
var Announced_1 = require("@fluentui/react/lib/Announced");
var Styling_1 = require("@fluentui/react/lib/Styling");
var Toggle_1 = require("@fluentui/react/lib/Toggle");
var React = require("react");
var Tree_1 = require("../Tree");
var Tree_types_1 = require("../Tree.types");
var Tree_Example_Data_1 = require("./Tree.Example.Data");
var oddRowColor = '#CCDDCC';
var evenRowColor = '#D4E4D4';
var hoveredRowColor = '#CCEECC';
var selectedRowColor = '#AACCAA';
var hoveredMenuButtonColor = '#DAFBDA';
var openMenuButtonColor = '#DDFFDD';
var TreeHeavilyCustomizedExample = /** @class */ (function (_super) {
    tslib_1.__extends(TreeHeavilyCustomizedExample, _super);
    function TreeHeavilyCustomizedExample(props) {
        var _this = _super.call(this, props) || this;
        _this._onChangeWidthToggle = function (ev, useShortWidth) {
            _this.setState({ useShortWidth: useShortWidth });
        };
        _this._onClickExpandAll = function () {
            _this.setState(function (prev) {
                return {
                    expandedItemKeys: Tree_Example_Data_1.getFolderKeys(prev.items)
                };
            });
            _this.setState({ announcedMessage: 'All items expanded' });
        };
        _this._onClickCollapseAll = function () {
            _this.setState({ expandedItemKeys: new Set(), announcedMessage: 'All items collapsed' });
        };
        _this._onClickClearSelection = function () {
            _this.setState({ selectedItemKeys: new Set(), announcedMessage: 'All items cleared' });
        };
        _this._getItemStyle = function (item, isSelected, isExpanded, index) {
            // Simply changing the tree color scheme can be accomplished
            // via the styles prop without the need for this callback.
            // Even providing special styling for nodes with selection disabled
            // (like the categories in this example) can be achieved via the styles props.
            // However, we're also changing styles based off the item index here,
            // and that cannot be achieved via the styles prop.
            var styles = customizedStyles;
            if (isSelected) {
                return styles.selectedRow;
            }
            else if ((index + 1) % 2 === 1) {
                return item.disableSelection ? styles.unselectableOddRow : styles.oddRow;
            }
            else {
                return item.disableSelection ? styles.unselectableEvenRow : styles.evenRow;
            }
        };
        _this._onItemSelected = function (item, type, isSelected, isExpanded, index) {
            var selectedItemKeys;
            if (type === Tree_types_1.SelectionType.Toggle) {
                selectedItemKeys = Tree_Example_Data_1.cloneSet(_this.state.selectedItemKeys);
                if (selectedItemKeys.has(item.key)) {
                    selectedItemKeys.delete(item.key);
                }
                else {
                    selectedItemKeys.add(item.key);
                }
            }
            else {
                selectedItemKeys = new Set();
                selectedItemKeys.add(item.key);
            }
            _this.setState({ selectedItemKeys: selectedItemKeys });
        };
        _this._onItemExpand = function (item, index) {
            _this.setState(function (prev) {
                var set = Tree_Example_Data_1.cloneSet(prev.expandedItemKeys);
                set.add(item.key);
                return { expandedItemKeys: set };
            });
        };
        _this._onItemCollapsed = function (item, index) {
            _this.setState(function (prev) {
                var set = Tree_Example_Data_1.cloneSet(prev.expandedItemKeys);
                set.delete(item.key);
                return { expandedItemKeys: set };
            });
        };
        _this._getCommands = function (item) {
            if (item.disableSelection) {
                return [];
            }
            var items = [
                {
                    key: 'New',
                    text: 'New',
                    iconProps: { iconName: 'Add' }
                },
                {
                    key: 'Mail',
                    text: 'Mail',
                    iconProps: { iconName: 'Mail' }
                },
                {
                    key: 'Calendar',
                    text: 'Calendar',
                    iconProps: { iconName: 'Calendar' }
                }
            ];
            return items;
        };
        _this._getHasCommands = function (item) {
            return !item.disableSelection;
        };
        var items = [
            {
                label: 'Category A',
                key: '0',
                isFolder: true,
                level: 0,
                setSize: 2,
                indexInParent: 0,
                disableSelection: true
            },
            {
                label: 'Item 1',
                key: '1',
                level: 1,
                setSize: 4,
                indexInParent: 0
            },
            {
                label: 'Item 2',
                key: '2',
                isFolder: true,
                level: 1,
                setSize: 4,
                indexInParent: 1
            },
            {
                label: 'Subitem 1',
                key: '3',
                level: 2,
                setSize: 2,
                indexInParent: 0
            },
            {
                label: 'Subitem 2',
                key: '4',
                level: 2,
                setSize: 2,
                indexInParent: 1
            },
            {
                label: 'Item 3',
                key: '5',
                level: 1,
                setSize: 4,
                indexInParent: 2
            },
            {
                label: 'Subcategory A',
                key: '6',
                isFolder: true,
                level: 1,
                setSize: 4,
                indexInParent: 3,
                disableSelection: true
            },
            {
                label: 'Item 1',
                key: '7',
                level: 2,
                setSize: 2,
                indexInParent: 0
            },
            {
                label: 'Item 2',
                key: '8',
                level: 2,
                setSize: 2,
                indexInParent: 1
            },
            {
                label: 'Category B',
                key: '9',
                isFolder: true,
                level: 0,
                setSize: 2,
                indexInParent: 1,
                disableSelection: true
            },
            {
                label: 'Item with a really rather unreasonably long name, actually',
                key: '10',
                level: 1,
                setSize: 1,
                indexInParent: 0
            }
        ];
        _this.state = {
            useShortWidth: false,
            items: items,
            selectedItemKeys: new Set(),
            expandedItemKeys: new Set(),
            announcedMessage: ''
        };
        return _this;
    }
    TreeHeavilyCustomizedExample.prototype.render = function () {
        var _a = this.state, useShortWidth = _a.useShortWidth, selectedItemKeys = _a.selectedItemKeys, expandedItemKeys = _a.expandedItemKeys;
        return (React.createElement("div", { className: exampleStyles.exampleContainer },
            React.createElement("div", null,
                React.createElement("p", null, "This example demonstrates a hypothetical case where \"categories\" aren't selectable and don't have menu options, and either categories or items can have children."),
                React.createElement("p", null, "In addition, the tree styles are heavily customized (alternating rows with custom colors and custom menu button colors -- I hope you like the color green!).")),
            React.createElement(Toggle_1.Toggle, { label: "Narrow width", checked: useShortWidth, onChange: this._onChangeWidthToggle, onText: "Narrow", offText: "Wide" }),
            React.createElement("div", { className: exampleStyles.controls },
                React.createElement(Button_1.DefaultButton, { onClick: this._onClickExpandAll }, 'Expand all'),
                React.createElement(Button_1.DefaultButton, { onClick: this._onClickCollapseAll }, 'Collapse all'),
                React.createElement(Button_1.DefaultButton, { onClick: this._onClickClearSelection }, 'Clear selection')),
            React.createElement("div", { style: { width: useShortWidth ? '200px' : '280px', height: 320 } },
                React.createElement(Tree_1.Tree, { items: this.state.items, strings: {
                        listAriaLabel: 'test',
                        moreCommandsAriaLabel: 'More Command'
                    }, selectedItemKeys: selectedItemKeys, expandedItemKeys: expandedItemKeys, onItemExpand: this._onItemExpand, onItemCollapse: this._onItemCollapsed, onItemSelected: this._onItemSelected, getItemHasCommands: this._getHasCommands, getItemCommands: this._getCommands, getItemStyle: this._getItemStyle, styles: {
                        menuButton: {
                            flex: '0 0 auto',
                            // Menu button should be hidden by default.
                            // We will show it in the following cases, though: a row is hovered, a row is selected, or the menu is open.
                            visibility: 'hidden',
                            position: 'sticky',
                            right: 0
                        },
                        menuButtonSelectedRowClosedMenu: {
                            backgroundColor: selectedRowColor,
                            selectors: {
                                ':hover': {
                                    backgroundColor: hoveredMenuButtonColor
                                }
                            }
                        },
                        menuButtonSelectedRowOpenMenu: {
                            backgroundColor: openMenuButtonColor
                        },
                        menuButtonUnselectedRowClosedMenu: {
                            backgroundColor: hoveredRowColor,
                            selectors: {
                                ':hover': {
                                    backgroundColor: hoveredMenuButtonColor
                                }
                            }
                        },
                        menuButtonUnselectedRowOpenMenu: {
                            backgroundColor: openMenuButtonColor
                        }
                    } }),
                React.createElement(Announced_1.Announced, { message: this.state.announcedMessage }))));
    };
    return TreeHeavilyCustomizedExample;
}(React.Component));
exports.TreeHeavilyCustomizedExample = TreeHeavilyCustomizedExample;
var exampleStyles = Styling_1.mergeStyleSets({
    exampleContainer: {
        // 'display: flex' is important for the Tree to layout correctly.
        display: 'flex',
        flexDirection: 'column',
        width: 320,
        height: 500,
        userSelect: 'none'
    },
    controls: {
        display: 'flex',
        flexDirection: 'row'
    }
});
var customizedStyles = Styling_1.mergeStyleSets({
    unselectableOddRow: {
        backgroundColor: oddRowColor,
        fontWeight: 'bold',
        selectors: {
            ':hover': {
                backgroundColor: oddRowColor
            }
        }
    },
    oddRow: {
        backgroundColor: oddRowColor,
        selectors: {
            ':hover': {
                backgroundColor: hoveredRowColor
            }
        }
    },
    unselectableEvenRow: {
        backgroundColor: evenRowColor,
        fontWeight: 'bold',
        selectors: {
            ':hover': {
                backgroundColor: evenRowColor
            }
        }
    },
    evenRow: {
        backgroundColor: evenRowColor,
        selectors: {
            ':hover': {
                backgroundColor: hoveredRowColor
            }
        }
    },
    selectedRow: {
        backgroundColor: selectedRowColor
    }
});
//# sourceMappingURL=Tree.HeavilyCustomized.Example.js.map