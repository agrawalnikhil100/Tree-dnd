"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeAlternatingRowColorExample = void 0;
var tslib_1 = require("tslib");
var Styling_1 = require("@fluentui/react/lib/Styling");
var React = require("react");
var Tree_1 = require("../Tree");
var Tree_Example_Data_1 = require("./Tree.Example.Data");
var TreeAlternatingRowColorExample = /** @class */ (function (_super) {
    tslib_1.__extends(TreeAlternatingRowColorExample, _super);
    function TreeAlternatingRowColorExample(props) {
        var _this = _super.call(this, props) || this;
        _this._getItemStyle = function (item, isSelected, isExpanded, index) {
            var styles = customizedStyles;
            if (isSelected) {
                return styles.oddRow;
            }
            else if (index % 2 === 1) {
                return styles.oddRow;
            }
            else {
                return styles.evenRow;
            }
        };
        _this._getCommands = function () {
            var selection = _this.state.selection;
            var keys = ['newItem', 'share', 'mobile'];
            var items = [
                {
                    key: keys[0],
                    text: 'News',
                    canCheck: true,
                    isChecked: selection[keys[0]],
                    onClick: _this._onToggleSelect,
                    icon: 'Add'
                },
                {
                    key: keys[1],
                    text: 'Share',
                    canCheck: true,
                    isChecked: selection[keys[1]],
                    onClick: _this._onToggleSelect,
                    icon: 'Mail'
                },
                {
                    key: keys[2],
                    text: 'Mobile',
                    canCheck: true,
                    isChecked: selection[keys[2]],
                    onClick: _this._onToggleSelect,
                    icon: 'Calendar'
                }
            ];
            return items;
        };
        _this._onToggleSelect = function (ev, item) {
            var selection = _this.state.selection;
            if (ev.preventDefault) {
                ev.preventDefault();
            }
            selection[item.key] = !selection[item.key];
            _this.setState({
                selection: selection
            });
        };
        _this.state = {
            selection: {}
        };
        return _this;
    }
    TreeAlternatingRowColorExample.prototype.render = function () {
        return (React.createElement("div", { className: exampleStyles.exampleContainer },
            React.createElement(Tree_1.Tree, { items: Tree_Example_Data_1.produceItemsWithIcons, strings: {
                    listAriaLabel: 'test',
                    moreCommandsAriaLabel: 'More Command'
                }, getItemCommands: this._getCommands, getItemStyle: this._getItemStyle })));
    };
    return TreeAlternatingRowColorExample;
}(React.Component));
exports.TreeAlternatingRowColorExample = TreeAlternatingRowColorExample;
var exampleStyles = Styling_1.mergeStyleSets({
    exampleContainer: {
        // 'display: flex' is important for the Tree to layout correctly.
        display: 'flex',
        flexDirection: 'column',
        width: 320,
        height: 320,
        userSelect: 'none'
    }
});
var customizedStyles = Styling_1.mergeStyleSets({
    oddRow: {},
    evenRow: {
        backgroundColor: '#FBFBFB'
    },
    selectedRow: {
        backgroundColor: '#DCDCDC'
    }
});
//# sourceMappingURL=Tree.AlternatingRowColorExample.js.map