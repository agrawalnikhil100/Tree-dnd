"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeControlledExample = void 0;
var tslib_1 = require("tslib");
var Button_1 = require("@fluentui/react/lib/Button");
var Announced_1 = require("@fluentui/react/lib/Announced");
var Styling_1 = require("@fluentui/react/lib/Styling");
var Toggle_1 = require("@fluentui/react/lib/Toggle");
var React = require("react");
var Tree_1 = require("../Tree");
var Tree_types_1 = require("../Tree.types");
var Tree_Example_Data_1 = require("./Tree.Example.Data");
var TreeControlledExample = /** @class */ (function (_super) {
    tslib_1.__extends(TreeControlledExample, _super);
    function TreeControlledExample(props) {
        var _this = _super.call(this, props) || this;
        _this._onClickExpandAll = function () {
            _this.setState(function (prev) {
                return {
                    expandedItemKeys: Tree_Example_Data_1.getFolderKeys(prev.items)
                };
            });
            _this.setState({ announcedMessage: 'All items expanded' });
        };
        _this._onClickCollapseAll = function () {
            _this.setState({ expandedItemKeys: new Set(), announcedMessage: 'All items collapsed' });
        };
        _this._onClickClearSelection = function () {
            _this.setState({ selectedItemKeys: new Set(), announcedMessage: 'All items cleared' });
        };
        _this._onItemSelected = function (item, type, isSelected, isExpanded, index) {
            var selectedItemKeys;
            if (type === Tree_types_1.SelectionType.Toggle) {
                selectedItemKeys = Tree_Example_Data_1.cloneSet(_this.state.selectedItemKeys);
                if (selectedItemKeys.has(item.key)) {
                    selectedItemKeys.delete(item.key);
                }
                else {
                    selectedItemKeys.add(item.key);
                }
            }
            else {
                selectedItemKeys = new Set();
                selectedItemKeys.add(item.key);
            }
            _this.setState({ selectedItemKeys: selectedItemKeys });
        };
        _this._onItemExpand = function (item, index) {
            _this.setState(function (prev) {
                var set = Tree_Example_Data_1.cloneSet(prev.expandedItemKeys);
                set.add(item.key);
                return { expandedItemKeys: set };
            });
        };
        _this._onItemCollapsed = function (item, index) {
            _this.setState(function (prev) {
                var set = Tree_Example_Data_1.cloneSet(prev.expandedItemKeys);
                set.delete(item.key);
                return { expandedItemKeys: set };
            });
        };
        _this._getCommands = function () {
            var selection = _this.state.selection;
            var keys = ['newItem', 'share', 'mobile'];
            var items = [
                {
                    key: keys[0],
                    text: 'News',
                    canCheck: true,
                    isChecked: selection[keys[0]],
                    onClick: _this._onToggleSelect,
                    icon: 'Add'
                },
                {
                    key: keys[1],
                    text: 'Share',
                    canCheck: true,
                    isChecked: selection[keys[1]],
                    onClick: _this._onToggleSelect,
                    icon: 'Mail'
                },
                {
                    key: keys[2],
                    text: 'Mobile',
                    canCheck: true,
                    isChecked: selection[keys[2]],
                    onClick: _this._onToggleSelect,
                    icon: 'Calendar'
                }
            ];
            return items;
        };
        _this._onToggleSelect = function (ev, item) {
            var selection = _this.state.selection;
            if (ev.preventDefault) {
                ev.preventDefault();
            }
            selection[item.key] = !selection[item.key];
            _this.setState({
                selection: selection
            });
        };
        _this.state = {
            items: Tree_Example_Data_1.produceItemsWithIcons,
            selectedItemKeys: new Set(),
            expandedItemKeys: new Set(),
            selection: {},
            customRender: false,
            announcedMessage: ''
        };
        return _this;
    }
    TreeControlledExample.prototype.render = function () {
        var _this = this;
        var _a = this.state, items = _a.items, selectedItemKeys = _a.selectedItemKeys, expandedItemKeys = _a.expandedItemKeys, customRender = _a.customRender;
        return (React.createElement("div", { className: exampleStyles.exampleContainer },
            React.createElement(Toggle_1.Toggle, { label: "Custom Item Render", checked: customRender, onChange: function (ev, value) { return _this.setState({ customRender: value }); }, onText: "On (try selecting an item)", offText: "Off" }),
            React.createElement("div", { className: exampleStyles.controls },
                React.createElement(Button_1.DefaultButton, { onClick: this._onClickExpandAll }, 'Expand all'),
                React.createElement(Button_1.DefaultButton, { onClick: this._onClickCollapseAll }, 'Collapse all'),
                React.createElement(Button_1.DefaultButton, { onClick: this._onClickClearSelection }, 'Clear selection')),
            React.createElement(Tree_1.Tree, { items: items, selectedItemKeys: selectedItemKeys, expandedItemKeys: expandedItemKeys, strings: {
                    listAriaLabel: 'test',
                    moreCommandsAriaLabel: 'More Command'
                }, onItemExpand: this._onItemExpand, onItemCollapse: this._onItemCollapsed, onItemSelected: this._onItemSelected, getItemCommands: this._getCommands, onRenderItemContainer: this.state.customRender ? this.onRenderItem : undefined }),
            React.createElement(Announced_1.Announced, { message: this.state.announcedMessage })));
    };
    TreeControlledExample.prototype.onRenderItem = function (item, isSelected, isExpanded, index, defaultItemRender) {
        return (React.createElement("div", { className: exampleStyles.itemContainer },
            React.createElement("div", { className: exampleStyles.selectionIndicator }, isSelected ? 'ðŸ‘‰' : ''),
            defaultItemRender()));
    };
    return TreeControlledExample;
}(React.Component));
exports.TreeControlledExample = TreeControlledExample;
var exampleStyles = Styling_1.mergeStyleSets({
    exampleContainer: {
        // 'display: flex' is important for the Tree to layout correctly.
        display: 'flex',
        flexDirection: 'column',
        width: 320,
        height: 320,
        userSelect: 'none'
    },
    controls: {
        display: 'flex',
        flexDirection: 'row'
    },
    itemContainer: {
        display: 'flex',
        flexDirection: 'row'
    },
    selectionIndicator: {
        width: 16,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
    }
});
//# sourceMappingURL=Tree.Controlled.Example.js.map