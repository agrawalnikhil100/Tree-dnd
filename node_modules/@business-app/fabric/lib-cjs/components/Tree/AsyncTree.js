"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncTree = void 0;
var tslib_1 = require("tslib");
var Link_1 = require("@fluentui/react/lib/Link");
var Spinner_1 = require("@fluentui/react/lib/Spinner");
var React = require("react");
var Tree_1 = require("./Tree");
var Tree_base_1 = require("./Tree.base");
var useAsyncArrayTree_1 = require("./useAsyncArrayTree");
var LoadingSubItemKeySuffix = '-loading';
var LoadMoreSubItemKeySuffix = '-load-more';
var ErrorSubItemKeySuffix = '-error';
var AsyncTree = function (props) {
    var onResolveItems = props.onResolveItems, onItemExpand = props.onItemExpand, onItemCollapse = props.onItemCollapse, onItemDoubleClicked = props.onItemDoubleClicked, onItemKeyDown = props.onItemKeyDown, onItemSelected = props.onItemSelected, onRenderContextualMenu = props.onRenderContextualMenu, onRenderItemContainer = props.onRenderItemContainer, onRenderItemLabel = props.onRenderItemLabel, onRenderItemLabelContent = props.onRenderItemLabelContent, onRenderExpandIcon = props.onRenderExpandIcon, rest = tslib_1.__rest(props, ["onResolveItems", "onItemExpand", "onItemCollapse", "onItemDoubleClicked", "onItemKeyDown", "onItemSelected", "onRenderContextualMenu", "onRenderItemContainer", "onRenderItemLabel", "onRenderItemLabelContent", "onRenderExpandIcon"]);
    var loadingSubItemFactory = React.useCallback(function (item) {
        var strings = props.strings;
        return {
            key: (item !== null ? item.key : 'top') + LoadingSubItemKeySuffix,
            label: strings.loadingSubItemLabel || 'Loading...',
            level: item !== null ? item.level + 1 : 0,
            isFolder: false,
            setSize: 1,
            indexInParent: 0,
            disableFocus: true,
            disableSelection: true
        };
    }, [props.strings]);
    var loadMoreSubItemFactory = React.useCallback(function (item, onLoadMoreClick) {
        var strings = props.strings;
        return {
            key: (item !== null ? item.key : 'top') + LoadMoreSubItemKeySuffix,
            label: strings.loadMoreSubItemLabel || 'Load more',
            level: item !== null ? item.level + 1 : 0,
            isFolder: false,
            setSize: 1,
            indexInParent: 0,
            disableFocus: true,
            disableSelection: true,
            onLoadMoreClick: onLoadMoreClick
        };
    }, [props.strings]);
    var errorSubItemFactory = React.useCallback(function (item, onRetryClick, e) {
        return {
            key: (item !== null ? item.key : 'top') + ErrorSubItemKeySuffix,
            label: '',
            level: item !== null ? item.level + 1 : 0,
            isFolder: false,
            setSize: 1,
            indexInParent: 0,
            iconProps: {
                iconName: 'ErrorBadge',
                styles: {
                    root: {
                        color: 'red'
                    }
                }
            },
            disableFocus: true,
            disableSelection: true,
            onRetryClick: onRetryClick
        };
    }, []);
    var _a = useAsyncArrayTree_1.useAsyncArrayTree([], onResolveItems, loadingSubItemFactory, loadMoreSubItemFactory, errorSubItemFactory), items = _a.items, load = _a.load, clear = _a.clear;
    React.useEffect(function () {
        load(null);
        return function () {
            clear();
        };
    }, [load, clear]);
    var onTreeItemExpand = React.useCallback(function (item, index) {
        if (!item.isLoading && !item.hasLoaded) {
            load(item);
        }
        if (onItemExpand !== undefined) {
            onItemExpand(item, index);
        }
    }, [load, onItemExpand]);
    var onTreeRenderLabelContent = React.useCallback(function (item, isSelected, isNodeExpanded, index, defaultRender) {
        var strings = props.strings;
        var customRender = function () {
            if (isErrorSubItem(item)) {
                return (React.createElement(React.Fragment, null,
                    strings.errorSubItemLabel || 'Error loading.',
                    "\u00A0",
                    React.createElement(Link_1.Link, { onClick: item.onRetryClick }, strings.errorSubItemRetryLinkText || 'Try again')));
            }
            else if (isLoadMoreSubItem(item)) {
                return React.createElement(Link_1.Link, { onClick: item.onLoadMoreClick }, defaultRender());
            }
            return defaultRender();
        };
        if (onRenderItemLabelContent !== undefined) {
            return onRenderItemLabelContent(item, isSelected, isNodeExpanded, index, customRender);
        }
        return customRender();
    }, [load, onRenderItemLabelContent, props.strings]);
    var onTreeRenderExpandIcon = React.useCallback(function (item, isSelected, isNodeExpanded, index, defaultRender) {
        var customRender = function () {
            if (isLoadingSubItem(item)) {
                return React.createElement(Spinner_1.Spinner, { styles: { root: { width: props.iconWidth || Tree_base_1.defaultIconWidth } } });
            }
            else if (isLoadMoreSubItem(item)) {
                // Remove the indentation reserved for the expand icon.
                return null;
            }
            else if (isErrorSubItem(item)) {
                // Remove the indentation reserved for the expand icon.
                return null;
            }
            return defaultRender();
        };
        if (onRenderExpandIcon !== undefined) {
            return onRenderExpandIcon(item, isSelected, isNodeExpanded, index, customRender);
        }
        return customRender();
    }, [onRenderExpandIcon]);
    return (React.createElement(Tree_1.Tree, tslib_1.__assign({}, rest, { onItemExpand: onTreeItemExpand, onItemCollapse: onItemCollapse, onItemDoubleClicked: onItemDoubleClicked, onItemKeyDown: onItemKeyDown, onItemSelected: onItemSelected, onRenderContextualMenu: onRenderContextualMenu, onRenderItemContainer: onRenderItemContainer, onRenderItemLabel: onRenderItemLabel, onRenderItemLabelContent: onTreeRenderLabelContent, onRenderExpandIcon: onTreeRenderExpandIcon, items: items })));
};
exports.AsyncTree = AsyncTree;
function isLoadingSubItem(item) {
    return (item.key.substring(Math.max(0, item.key.length - LoadingSubItemKeySuffix.length), item.key.length) ===
        LoadingSubItemKeySuffix);
}
function isLoadMoreSubItem(item) {
    return (item.key.substring(Math.max(0, item.key.length - LoadMoreSubItemKeySuffix.length), item.key.length) ===
        LoadMoreSubItemKeySuffix);
}
function isErrorSubItem(item) {
    return (item.key.substring(Math.max(0, item.key.length - ErrorSubItemKeySuffix.length), item.key.length) ===
        ErrorSubItemKeySuffix);
}
//# sourceMappingURL=AsyncTree.js.map