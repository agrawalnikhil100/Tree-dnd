/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
/// <reference types="react" />
import { BaseComponent } from '@fluentui/react/lib/Utilities';
import { ITreeItem, ITreeProps } from './Tree.types';
export declare const defaultIconWidth = 26;
export declare const defaultNodeHeight = 32;
export declare type IReadonlyArray<T> = Pick<T[], Exclude<keyof T[], 'push'>>;
export declare type IReadonlySet<T> = Pick<Set<T>, Exclude<keyof Set<T>, 'add' | 'clear' | 'pizza'>>;
export declare type IReadonlyMap<K, V> = Pick<Map<K, V>, Exclude<keyof Map<K, V>, 'add' | 'clear' | 'delete' | 'set'>>;
/**
 * The state for the tree.
 */
export interface ITreeState<T> {
    items: IReadonlyArray<T>;
    /** Only used for when node caching is disabled. Do not reference outside of that criteria. */
    visibleItems: IReadonlyArray<T>;
    visibleItemKeys: IReadonlySet<string>;
    cachedItemKeys: IReadonlySet<string>;
    keyToItemMap: IReadonlyMap<string, T>;
    keyToVisibleIndexMap: IReadonlyMap<string, number>;
    moreIcon: string;
    collapsedArrowIcon: string;
    selectedItemKeys: IReadonlySet<string>;
    expandedItemKeys: IReadonlySet<string>;
    areExpandedItemsDirty: boolean;
}
/**
 * A generic Tree component based on Fabric's List.
 */
export declare class TreeBase<T extends ITreeItem> extends BaseComponent<ITreeProps<T>, ITreeState<T>> {
    private _list;
    private _isPendingScrollToSelected;
    private _focusZone;
    private _classNames;
    private _visibleIndexByItem;
    private _cachedStyles;
    private _hiddenStyle;
    private static _getStateFromProps;
    constructor(props: ITreeProps<T>);
    static getDerivedStateFromProps<I extends ITreeItem>(nextProps: ITreeProps<I>, prevState: ITreeState<I>): ITreeState<I>;
    componentDidUpdate(): void;
    render(): JSX.Element;
    /**
     * Sets focus to the first tree node.
     */
    focus(): void;
    private _renderScrollViewAndList;
    private _renderList;
    private _getKey;
    private _cloneSet;
    private _onRenderTreeNode;
    private _getItemStyle;
    private _getItemCommands;
    private _onItemSelected;
    private _onRenderItemContainer;
    private _onRenderItemLabel;
    private _onRenderItemLabelContent;
    private _onRenderExpandIcon;
    private _onRenderContextualMenu;
    private _onItemKeyDown;
    private _onExpandToggled;
    private _onDoubleClicked;
    private _saveListRef;
    private _applyPendingScroll;
    /**
     * Gets the index of the first selected item
     */
    private _getSelectedIndex;
    private _getPageHeight;
    private _getVisibleItems;
    private _getNodeHeight;
    private _getIconWidth;
    private _getClassNames;
}
