"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormTagPicker = void 0;
var tslib_1 = require("tslib");
var React = require("react");
// Components
var Pickers_1 = require("@fluentui/react/lib/Pickers");
var FormBaseInput_1 = require("../../FormBaseInput");
/**
 * TagPicker input for Form
 */
var FormTagPicker = /** @class */ (function (_super) {
    tslib_1.__extends(FormTagPicker, _super);
    function FormTagPicker(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._onChange = function (items) {
            var _a;
            var tagPickerProps = _this.props.tagPickerProps;
            (_a = tagPickerProps === null || tagPickerProps === void 0 ? void 0 : tagPickerProps.onChange) === null || _a === void 0 ? void 0 : _a.call(tagPickerProps, items);
            _this.setValue(items);
        };
        _this.state = {
            isValid: true,
            currentValue: props.value,
            currentError: undefined
        };
        _this._validateTagPickerProps(_this.props.tagPickerProps);
        return _this;
    }
    /**
     * Render a Fabric TagPicker
     */
    FormTagPicker.prototype.render = function () {
        var currentValue = this.state.currentValue;
        return (React.createElement(Pickers_1.TagPicker, tslib_1.__assign({}, this.props.tagPickerProps, { 
            // These props cannot be overridden
            key: this.props.inputKey, onChange: this._onChange, selectedItems: currentValue })));
    };
    FormTagPicker.prototype._validateTagPickerProps = function (props) {
        if (!props) {
            return;
        }
        if (props.selectedItems !== null && props.selectedItems !== undefined) {
            // eslint-disable-next-line no-console
            console.warn("FormTagPicker: 'selectedItems' prop was specified and will be ignored");
        }
        if (props.onChange) {
            // eslint-disable-next-line no-console
            console.warn("FormTagPicker: 'onChange' prop was specified and will be ignored");
        }
    };
    return FormTagPicker;
}(FormBaseInput_1.FormBaseInput));
exports.FormTagPicker = FormTagPicker;
//# sourceMappingURL=FormTagPicker.js.map