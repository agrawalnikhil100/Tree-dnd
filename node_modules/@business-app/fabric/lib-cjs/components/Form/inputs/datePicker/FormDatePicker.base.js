"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormDatePickerBase = void 0;
var tslib_1 = require("tslib");
var DatePicker_1 = require("@fluentui/react/lib/DatePicker");
var Icon_1 = require("@fluentui/react/lib/Icon");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var React = require("react");
var FormBaseInput_1 = require("../../FormBaseInput");
var getClassNames = Utilities_1.classNamesFunction();
/**
 * DatePicker input for Form
 */
var FormDatePickerBase = /** @class */ (function (_super) {
    tslib_1.__extends(FormDatePickerBase, _super);
    function FormDatePickerBase(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._onDateChanged = function (date) {
            var _a;
            var datePickerProps = _this.props.datePickerProps;
            (_a = datePickerProps === null || datePickerProps === void 0 ? void 0 : datePickerProps.onSelectDate) === null || _a === void 0 ? void 0 : _a.call(datePickerProps, date);
            _this.setValue(date);
        };
        _this.state = {
            isValid: true,
            currentValue: _this.props.value,
            currentError: undefined
        };
        _this._validateDatePickerProps(_this.props.datePickerProps);
        return _this;
    }
    /**
     * Render a Fabric DatePicker
     */
    FormDatePickerBase.prototype.render = function () {
        var _a = this.props, datePickerProps = _a.datePickerProps, inputKey = _a.inputKey, styles = _a.styles;
        var _b = this.state, currentError = _b.currentError, currentValue = _b.currentValue;
        var classNames = getClassNames(styles, this.props);
        return (React.createElement("div", { className: classNames.root },
            React.createElement(DatePicker_1.DatePicker, tslib_1.__assign({}, datePickerProps, { 
                // These props cannot be overridden
                key: inputKey, value: currentValue, onSelectDate: this._onDateChanged })),
            currentError && this._renderError(classNames.inputError)));
    };
    FormDatePickerBase.prototype._renderError = function (className) {
        return (React.createElement("div", { className: className, role: 'alert' },
            React.createElement(Icon_1.Icon, { iconName: "Error" }),
            this.state.currentError));
    };
    FormDatePickerBase.prototype._validateDatePickerProps = function (props) {
        if (props) {
            if (props.onSelectDate) {
                // eslint-disable-next-line no-console
                console.warn("FormDatePicker: 'onSelectDate' prop was specified and will be ignored");
            }
            if (props.strings) {
                // eslint-disable-next-line no-console
                console.warn("FormDatePicker: 'strings' prop was specified and will be ignored");
            }
        }
    };
    return FormDatePickerBase;
}(FormBaseInput_1.FormBaseInput));
exports.FormDatePickerBase = FormDatePickerBase;
//# sourceMappingURL=FormDatePicker.base.js.map