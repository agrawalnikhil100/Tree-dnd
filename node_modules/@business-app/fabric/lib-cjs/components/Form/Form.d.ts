/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import * as React from 'react';
import { IFormProps } from './Form.types';
import { GenericFormInput } from './FormBaseInput';
import { BaseComponent } from '@fluentui/react/lib/Utilities';
/**
 * Validation result for a simple form input. All calls to validate return this type
 */
export declare type IFormValidationResult = {
    /**
     * Is the field valid?
     */
    isValid: boolean;
    /**
     * Optional error message
     */
    errorMessage?: string;
    /**
     * The validated input
     */
    component: GenericFormInput;
};
/**
 * The child context for form inputs to use
 */
export declare type IFormContext = {
    /**
     * Is the form valid currently?
     */
    isFormValid: () => boolean;
    /**
     * Register the input with SimpleForm. Should be called during componentWillMount
     */
    mountInput: (input: GenericFormInput) => void;
    /**
     * Unregister the input with SimpleForm. Should be called during componentWillUnmount
     */
    unmountInput: (input: GenericFormInput) => void;
    /**
     * Validate the passed in field, set its error state, and call the onUpdate handler if there is one
     */
    submitValue: (input: GenericFormInput) => void;
};
/**
 * The state for Form
 */
export interface IFormState {
    /** The current validation results for the inputs in the form */
    validationResults: {
        [key: string]: IFormValidationResult;
    };
}
/**
 * Use this component to host forms
 */
export declare class Form extends BaseComponent<IFormProps, IFormState> {
    /**
     * This is needed because React 15's context does not work well with typescript
     */
    protected static childContextTypes: React.ValidationMap<IFormContext>;
    /**
     * All registered inputs the form is aware of
     */
    private _mountedInputs;
    /** Flag which marks whether or not the form has attempted to have been submitted */
    private _pristine;
    constructor(props: IFormProps);
    /**
     * Renders a form component and all child inputs
     */
    render(): JSX.Element;
    /**
     * Get the context for child components to use
     */
    getChildContext(): IFormContext;
    /**
     * Get all the values from the inputs that have registered with the form
     * Returns a dictionary keyed by the input names
     */
    private _getFormValues;
    /**
     * Validate an individual input and set its error state
     * Returns the validation result
     * @param input The input to validate
     */
    private _validateComponent;
    /**
     * Validate all the individual inputs and set their error state
     * Returns a list of the validation results
     */
    private _validateForm;
    /**
     * When the form is submitted. This will validate the form and call the appropriate submit callback
     * @param event The form event
     */
    private _onSubmit;
    /**
     * Register an input with the form
     * @param input The input to register
     */
    private _mountInput;
    private _submitValue;
    /**
     * Unregister an input with the form
     * @param input The input to unregister
     */
    private _unmountInput;
    private _isFormValid;
}
