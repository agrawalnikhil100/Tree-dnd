"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormValidationExample = void 0;
var tslib_1 = require("tslib");
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
var React = require("react");
var __1 = require("..");
var Validators = require("../validators/Validators");
var FormValidationExample = /** @class */ (function (_super) {
    tslib_1.__extends(FormValidationExample, _super);
    function FormValidationExample() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._onSubmit = function (values) {
            _this.setState({ formResults: values });
        };
        return _this;
    }
    FormValidationExample.prototype.render = function () {
        return (React.createElement("div", null,
            React.createElement(__1.Form, { onSubmit: this._onSubmit },
                React.createElement(__1.FormTextInput, { textFieldProps: { label: 'Text Input with max length of 10' }, inputKey: "maxLength", validators: [Validators.maxLength(10, function (length) { return 'Must be less than 10 characters'; })] }),
                React.createElement(__1.FormTextInput, { textFieldProps: { label: 'Text input with min length of 10' }, inputKey: "minLength", validators: [Validators.minLength(10, function (length) { return 'Must be greater than 10 characters'; })] }),
                React.createElement(__1.FormTextInput, { textFieldProps: { label: 'Required text input' }, inputKey: "required", validators: [Validators.required('Field is required')] }),
                React.createElement(__1.FormDatePicker, { datePickerProps: { label: 'Date Picker with date no less than yesterday' }, inputKey: "date", validators: [
                        function (value) {
                            if (value) {
                                var date = new Date();
                                date.setDate(date.getDate() - 1);
                                if (value.getTime() < date.getTime()) {
                                    return 'Date must be today or later';
                                }
                            }
                            return undefined;
                        }
                    ] }),
                React.createElement(__1.FormConditionalSubmitButton, null, "Submit")),
            this.state && this.state.formResults && (React.createElement("div", { className: "results-view" },
                React.createElement("h4", null, "Results"),
                JSON.stringify(this.state.formResults)))));
    };
    return FormValidationExample;
}(React.Component));
exports.FormValidationExample = FormValidationExample;
//# sourceMappingURL=Form.Validation.Example.js.map