"use strict";
/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationsPanelBase = void 0;
var tslib_1 = require("tslib");
var Link_1 = require("@fluentui/react/lib/Link");
var List_1 = require("@fluentui/react/lib/List");
var Spinner_1 = require("@fluentui/react/lib/Spinner");
var Utilities_1 = require("@fluentui/react/lib/Utilities");
var React = require("react");
var EmptyState_1 = require("../EmptyState");
var Panel_1 = require("../Panel");
var NotificationCard_1 = require("./NotificationCard/NotificationCard");
var NotificationsPanel_types_1 = require("./NotificationsPanel.types");
var getClassNames = Utilities_1.classNamesFunction();
var NotificationsPanelBase = function (props) {
    var componentRef = props.componentRef, notifications = props.notifications, emptyStateMessage = props.emptyStateMessage, panelState = props.panelState, dismissAllText = props.dismissAllText, errorPrimaryMessage = props.errorPrimaryMessage, errorSecondaryMessage = props.errorSecondaryMessage, onDismissAll = props.onDismissAll, dismissTooltip = props.dismissTooltip, rest = tslib_1.__rest(props, ["componentRef", "notifications", "emptyStateMessage", "panelState", "dismissAllText", "errorPrimaryMessage", "errorSecondaryMessage", "onDismissAll", "dismissTooltip"]);
    var _a = React.useState(''), ariaLiveText = _a[0], setAriaLiveText = _a[1];
    var hasNotifications = (notifications === null || notifications === void 0 ? void 0 : notifications.length) > 0;
    var panelReady = panelState === undefined || panelState === NotificationsPanel_types_1.NotificationsPanelState.Loaded;
    React.useEffect(function () {
        var _a;
        (_a = props.onMount) === null || _a === void 0 ? void 0 : _a.call(props);
    });
    var _onRenderSubHeader = React.useCallback(function () {
        if (!hasNotifications || !dismissAllText || !onDismissAll) {
            return null;
        }
        return (React.createElement(Link_1.Link, { onClick: onDismissAll, title: dismissTooltip }, dismissAllText));
    }, [dismissAllText, onDismissAll, notifications]);
    var _renderEmptyStateOrLoadingBody = React.useCallback(function () {
        var classNames = getClassNames(props.styles);
        var component;
        switch (panelState) {
            case NotificationsPanel_types_1.NotificationsPanelState.Error:
                component = (React.createElement(EmptyState_1.EmptyState, { icon: "Ringer", primaryMessage: errorPrimaryMessage, secondaryMessage: errorSecondaryMessage }));
                break;
            case NotificationsPanel_types_1.NotificationsPanelState.Empty:
                component = React.createElement(EmptyState_1.EmptyState, { icon: "Ringer", primaryMessage: emptyStateMessage });
                break;
            case NotificationsPanel_types_1.NotificationsPanelState.Loading:
                setAriaLiveText(props.ariaLoadingMessage);
                component = React.createElement(Spinner_1.Spinner, { size: Spinner_1.SpinnerSize.large });
                break;
            default:
                component = null;
                setAriaLiveText('');
        }
        return React.createElement("div", { className: classNames.centeredContent }, component);
    }, [panelState, emptyStateMessage, errorPrimaryMessage, errorSecondaryMessage]);
    return (React.createElement(React.Fragment, null,
        React.createElement(Panel_1.Panel, tslib_1.__assign({}, rest, { className: "ba-notificationsPanel", emptyStateProps: !hasNotifications &&
                panelReady && {
                icon: 'Ringer',
                primaryMessage: emptyStateMessage
            }, onRenderBody: !panelReady ? _renderEmptyStateOrLoadingBody : undefined, onRenderSubHeader: _onRenderSubHeader }), hasNotifications && React.createElement(List_1.List, { items: notifications, onRenderCell: _onRenderCell })),
        React.createElement("div", { "aria-live": "assertive", "aria-atomic": "true", style: { overflow: 'hidden', position: 'absolute', top: -1000, left: -1000, width: 0, height: 0 } }, ariaLiveText)));
};
exports.NotificationsPanelBase = NotificationsPanelBase;
var _onRenderCell = function (notification) {
    return React.createElement(NotificationCard_1.NotificationCard, tslib_1.__assign({}, notification));
};
//# sourceMappingURL=NotificationsPanel.base.js.map