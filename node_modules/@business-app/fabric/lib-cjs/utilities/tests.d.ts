/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import 'jest';
import * as React from 'react';
/**
 * A input component that has a current value and a callback
 * for when that value has changed.
 */
export interface IInputComponentProps<T> {
    value: T;
    onChanged: (newValue: T | undefined) => void;
}
/**
 * Given an input control (specifically, one implemented with the `<input>` element and accepting `focus`, `input`, and `blur` events)
 * simulate typing in a series of inputs into the control. Afterwards, return if the `onChanged` callback was ever called,
 * as well as the last value it was called with.
 * @param Component the Component to test
 * @param baseValue The base value to give to the component
 * @param valuesToInput A list of values to input into the component, one at a time.
 */
export declare function simulateInput<T>(Component: React.ComponentType<IInputComponentProps<T>>, baseValue: T, ...valuesToInput: string[]): {
    hasBeenChanged: boolean;
    lastValue?: T;
};
