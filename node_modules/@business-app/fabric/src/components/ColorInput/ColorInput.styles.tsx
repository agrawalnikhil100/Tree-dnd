/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { getGlobalClassNames } from '@fluentui/react/lib/Styling';
import { IColorInputStyleProps, IColorInputStyles } from './ColorInput.types';
import { IButtonProps } from '@fluentui/react/lib/Button';
import { IColorPickerStyles } from '@fluentui/react/lib/ColorPicker';
import { IIconStyles } from '@fluentui/react/lib/Icon';

const GlobalClassNames = {
  root: 'ba-ColorInput',
  labelContainer: 'ba-ColorInput-labelContainer',
  label: 'ba-ColorInput-label',
  icon: 'ba-ColorInput-icon',
  container: 'ba-ColorInput-container',
  colorBox: 'ba-ColorInput-colorBox',
  colorBoxDisabled: 'ba-ColorInput-colorBoxDisabled',
  colorBoxSvg: 'ba-ColorInput-colorBoxSvg',
  colorTextField: 'ba-ColorInput-colorTextField',
  colorPicker: 'ba-ColorInput-colorPicker'
};

export function getStyles(props: IColorInputStyleProps): IColorInputStyles {
  const { palette } = props.theme!;
  const { theme } = props;
  const classNames = getGlobalClassNames(GlobalClassNames, theme!);

  return {
    root: [classNames.root],
    labelContainer: [
      classNames.labelContainer,
      {
        display: 'flex',
        height: 28
      }
    ],
    label: [classNames.label],
    iconTooltip: [
      classNames.icon,
      {
        height: 28,
        width: 24
      }
    ],
    container: [
      classNames.container,
      {
        display: 'flex',
        maxWidth: 300
      }
    ],
    colorBox: [
      classNames.colorBox,
      {
        padding: 0,
        marginRight: 8,
        border: `1px solid ${palette.neutralSecondary}`,
        borderRadius: 2,
        selectors: {
          ':hover': {
            backgroundColor: 'transparent',
            border: `1px solid ${palette.neutralPrimary}`,
            padding: 3
          },
          ':active': {
            backgroundColor: 'transparent'
          },
          ':focus': {
            backgroundColor: 'transparent',
            border: `2px solid ${palette.themePrimary}`,
            padding: 3
          },
          ':focus::after': {
            outline: 'none !important' // Marking it as important, as html body has ms-Fabric--isFocusVisible class applied on it which adds outline to color box.
          }
        }
      }
    ],
    colorBoxDisabled: [
      classNames.colorBoxDisabled,
      {
        padding: 0,
        marginRight: 8,
        border: `1px solid ${palette.neutralLight}`,
        borderRadius: 2
      }
    ],
    colorBoxSvg: [
      classNames.colorBoxSvg,
      {
        height: 32
      }
    ],
    colorTextField: [
      classNames.colorTextField,
      {
        width: '100%'
      }
    ],
    colorPicker: [
      classNames.colorPicker,
      {
        boxShadow: 'rgba(0, 0, 0, 0.13) 0px 3.2px 7.2px'
      }
    ]
  };
}

export const defaultColorPickerStyles: Partial<IColorPickerStyles> = {
  root: {
    marginTop: 2
  }
};

export const defaultTooltipIconStyles: Partial<IIconStyles> = {
  root: {
    fontSize: 12,
    width: 12,
    height: 12,
    lineHeight: 16
  }
};

export const defaultTooltipIconProps = {
  iconProps: {
    iconName: 'Info',
    styles: {
      defaultTooltipIconStyles
    }
  }
} as IButtonProps;
