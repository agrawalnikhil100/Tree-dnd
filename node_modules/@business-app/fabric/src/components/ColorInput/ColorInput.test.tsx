/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as Enzyme from 'enzyme';
import 'jest';
import { IButtonProps } from '@fluentui/react/lib/Button';
import { IColorPickerProps } from '@fluentui/react/lib/ColorPicker';
import * as React from 'react';
import { ColorInput } from '.';

describe('Color input', () => {
  let label: string;
  let tooltipIconProps: IButtonProps;
  let colorPickerProps: IColorPickerProps;

  beforeEach(() => {
    label = 'Color Picker';

    colorPickerProps = {
      color: 'red'
    };

    tooltipIconProps = {
      iconProps: {
        iconName: 'Refresh'
      }
    };
  });

  it('should render the component', () => {
    const wrapper = Enzyme.mount(<ColorInput label={label} colorPickerProps={colorPickerProps} />);
    expect(wrapper.find('.ba-ColorInput').exists()).toBeTruthy();
    wrapper.unmount();
  });

  it('should render the color input label', () => {
    const wrapper = Enzyme.mount(<ColorInput label={label} colorPickerProps={colorPickerProps} />);
    expect(wrapper.find('.ba-ColorInput-label').exists()).toBeTruthy();
    wrapper.unmount();
  });

  it('should render the icon if tooltipIconProps provided', () => {
    const wrapper = Enzyme.mount(
      <ColorInput label={label} colorPickerProps={colorPickerProps} tooltipIconProps={tooltipIconProps} />
    );

    const container = wrapper.find('.ba-ColorInput-labelContainer');
    const imageButton = container.find('button i[data-icon-name="Refresh"]');
    expect(imageButton.length).toBe(1);
    wrapper.unmount();
  });

  it('should render the default "info" icon if tooltipIconProps not provided', () => {
    const wrapper = Enzyme.mount(<ColorInput label={label} colorPickerProps={colorPickerProps} />);

    const container = wrapper.find('.ba-ColorInput-labelContainer');
    const imageButton = container.find('button i[data-icon-name="Info"]');
    expect(imageButton.length).toBe(1);
    wrapper.unmount();
  });

  it('should render the color box', () => {
    const wrapper = Enzyme.mount(<ColorInput label={label} colorPickerProps={colorPickerProps} />);
    expect(wrapper.find('.ba-ColorInput-colorBox').exists()).toBeTruthy();
    wrapper.unmount();
  });

  it('should render the color input text field with value Red', () => {
    const wrapper = Enzyme.mount(<ColorInput label={label} colorPickerProps={colorPickerProps} />);
    expect(
      wrapper.find('.ba-ColorInput-container .ba-ColorInput-colorTextField input[value="red"]').exists()
    ).toBeTruthy();
    wrapper.unmount();
  });

  it('should invoke the onBlur of color input text field', () => {
    const mockedOnBlur = jest.fn();
    const wrapper = Enzyme.mount(
      <ColorInput
        label={label}
        colorPickerProps={colorPickerProps}
        colorTextFieldProps={{
          onBlur: mockedOnBlur
        }}
      />
    );
    const inputElement = wrapper.find('.ba-ColorInput-colorTextField input');
    const color = '#a52a2a';
    inputElement.simulate('focus');
    inputElement.simulate('input', { target: { color } });
    expect(inputElement).toHaveLength(1);
    inputElement.simulate('blur');
    expect(mockedOnBlur).toHaveBeenCalledTimes(1);
    wrapper.unmount();
  });

  it('should open the color picker when ShowColorPicker prop set to true', () => {
    const wrapper = Enzyme.mount(
      <ColorInput label={label} colorPickerProps={colorPickerProps} showColorPicker={true} />
    );
    expect(wrapper.find('.ba-ColorInput-colorPicker').exists()).toBeTruthy();
    wrapper.unmount();
  });

  it('should not open the color picker when ShowColorPicker prop set to false', () => {
    const wrapper = Enzyme.mount(
      <ColorInput label={label} colorPickerProps={colorPickerProps} showColorPicker={false} />
    );
    expect(wrapper.find('.ba-ColorInput-colorPicker').exists()).toBeFalsy();
    wrapper.unmount();
  });

  it('should open the color picker on color box click', () => {
    const wrapper = Enzyme.mount(<ColorInput label={label} colorPickerProps={colorPickerProps} />);
    const colorBoxButton = wrapper.find('button.ba-ColorInput-colorBox');
    expect(colorBoxButton).toHaveLength(1);
    colorBoxButton.simulate('click');
    expect(wrapper.find('.ba-ColorInput-colorPicker').exists()).toBeTruthy();
    wrapper.unmount();
  });
});
