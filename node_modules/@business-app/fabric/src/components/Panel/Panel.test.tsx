/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as Enzyme from 'enzyme';
import 'jest';
import { Overlay } from '@fluentui/react/lib/Overlay';
import { Spinner } from '@fluentui/react/lib/Spinner';
import { Toggle } from '@fluentui/react/lib/Toggle';
import * as React from 'react';
import { Panel } from '.';
import { EmptyState } from '../EmptyState';
import { IDismissDialog, IPanelFooterButtonProps } from './Panel.types';

describe('Panel', () => {
  const dismissDialog: IDismissDialog = {
    title: 'Discard changes',
    subtext: 'Are you sure you want to discard changes?',
    confirmButtonText: 'Discard',
    cancelButtonText: 'Cancel'
  };

  it('should not unexpectedly change', () => {
    const wrapper = Enzyme.shallow(
      <Panel
        onDismiss={() => null}
        headerText="Test"
        dismissDialog={dismissDialog}
        onRenderNavigation={() => null}
      />
    );

    expect(wrapper).toMatchSnapshot();
  });

  it('panel should render overlay with spinner if provided', () => {
    const wrapper = Enzyme.shallow(
      <Panel
        onDismiss={() => null}
        headerText="Test"
        loadingOverlay={{ loadingText: 'Load' }}
        dismissDialog={dismissDialog}
      />
    );

    expect(wrapper.find(Overlay).length).toBe(1);
    expect(wrapper.find(Spinner).length).toBe(1);
  });

  it('panel should render empty state if provided', () => {
    const wrapper = Enzyme.shallow(
      <Panel
        onDismiss={() => null}
        dismissDialog={dismissDialog}
        headerText="Test"
        emptyStateProps={{
          primaryMessage: 'empty',
          icon: 'Accept'
        }}
      />
    );

    const onRenderBodyWrapper = Enzyme.shallow(wrapper.props().onRenderBody());
    const emptyStateWrapper = onRenderBodyWrapper.find(EmptyState);
    expect(emptyStateWrapper.length).toBe(1);
  });

  it('render subheader if provided', () => {
    const wrapper = Enzyme.shallow(
      <Panel
        onRenderHeader={() => (
          <div>
            <Toggle />
          </div>
        )}
        headerText="Test"
      />
    );

    const onRenderHeaderWrapper = Enzyme.shallow(wrapper.props().onRenderHeader());
    const toggleWrapper = onRenderHeaderWrapper.find(Toggle);
    expect(toggleWrapper.length).toBe(1);
  });

  describe('onRenderFooterContent', () => {
    it('should render onRenderFooterContent if provided along with footerButtons', () => {
      const footerContent = () => {
        return <div className="customFooterContent">dummyFooterContent</div>;
      };

      const footerButtons: IPanelFooterButtonProps[] = [
        {
          text: 'button1',
          primary: true,
          dismissableOnClick: jest.fn()
        },
        {
          text: 'button2',
          primary: false,
          dismissableOnClick: jest.fn()
        }
      ];

      const wrapper = Enzyme.shallow(
        <Panel headerText="Test" onRenderFooterContent={footerContent} footerButtons={footerButtons} />
      );

      const onRenderFooterContentWrapper = Enzyme.shallow(wrapper.props().onRenderFooterContent());

      const footer = onRenderFooterContentWrapper.find('.ba-Panel-footer');
      expect(footer.length).toBe(1);

      const customFooterContent = footer.find('.customFooterContent');
      expect(customFooterContent.length).toBe(1);
      expect(customFooterContent.text()).toBe('dummyFooterContent');

      const buttons = footer.find('.ba-Panel-footerButton');
      expect(buttons.length).toBe(2);
    });

    it('should render onRenderFooterContent if provided without footerButtons', () => {
      const footerContent = () => {
        return <div className="customFooterContent">dummyFooterContent</div>;
      };

      const wrapper = Enzyme.shallow(<Panel headerText="Test" onRenderFooterContent={footerContent} />);

      const onRenderFooterContentWrapper = Enzyme.shallow(wrapper.props().onRenderFooterContent());

      const customFooterContent = onRenderFooterContentWrapper.find('.customFooterContent');
      expect(customFooterContent.length).toBe(1);
      expect(customFooterContent.text()).toBe('dummyFooterContent');

      const buttons = onRenderFooterContentWrapper.find('.ba-Panel-footerButton');
      expect(buttons.length).toBe(0);
    });

    it('should render footerButtons if onRenderFooterContent not provided', () => {
      const footerButtons: IPanelFooterButtonProps[] = [
        {
          text: 'button1',
          primary: true,
          dismissableOnClick: jest.fn()
        },
        {
          text: 'button2',
          primary: false,
          dismissableOnClick: jest.fn()
        }
      ];

      const wrapper = Enzyme.shallow(<Panel headerText="Test" footerButtons={footerButtons} />);

      const onRenderFooterContentWrapper = Enzyme.shallow(wrapper.props().onRenderFooterContent());

      const footer = onRenderFooterContentWrapper.find('.ba-Panel-footer');
      expect(footer.length).toBe(1);

      const buttons = footer.find('.ba-Panel-footerButton');
      expect(buttons.length).toBe(2);
    });
  });
});
