/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import * as React from 'react';

import { DefaultButton, IconButton, PrimaryButton } from '@fluentui/react/lib/Button';
import { Dialog, DialogFooter, DialogType } from '@fluentui/react/lib/Dialog';
import { MessageBar } from '@fluentui/react/lib/MessageBar';
import { Overlay } from '@fluentui/react/lib/Overlay';
import { IPanelHeaderRenderer, Panel as OfficePanel, PanelBase, PanelType } from '@fluentui/react/lib/Panel';
import { Spinner, SpinnerSize } from '@fluentui/react/lib/Spinner';
import { concatStyleSetsWithProps, getTheme } from '@fluentui/react/lib/Styling';
import { TooltipHost } from '@fluentui/react/lib/Tooltip';
import { css, KeyCodes } from '@fluentui/react/lib/Utilities';
import { IPanelFooterButtonProps, IPanelProps } from '.';
import { EmptyState } from '../EmptyState';
import * as Styles from './Panel.styles';

export interface IPanelState {
  /**
   * Determines if the dialog is open or not.
   */
  isDialogOpen: boolean;
}

export class Panel extends React.Component<IPanelProps, IPanelState> {
  public static defaultProps: IPanelProps = {
    hasCloseButton: true
  };

  private readonly palette = getTheme().palette;
  private readonly headerStyle: React.CSSProperties = {
    color: this.palette.black
  };

  constructor(props: IPanelProps) {
    super(props);

    this.state = {
      isDialogOpen: false
    };
  }

  public render(): JSX.Element {
    const {
      props,
      _blockDismissOnEscape,
      _onDismiss,
      _onKeyDown,
      _onRenderDialog,
      _onRenderEmptyState,
      _onRenderFooterContent,
      _onRenderHeader,
      _onRenderLoadingOverlay
    } = this;

    const {
      children,
      className,
      dismissOnEscape,
      emptyStateProps,
      footerButtons,
      headerClassName,
      key,
      loadingOverlay,
      messageBar,
      onDismiss,
      onRenderBody,
      onRenderFooterContent,
      showDismissDialog,
      styles,
      wrapContentsInStack,
      ...rest
    } = props;

    const myStyles = concatStyleSetsWithProps(props, Styles.panelStyles, styles);

    return (
      <OfficePanel
        role="presentation"
        key={key || 'Panel'}
        className={css('ba-Panel', className)}
        headerClassName={css('ba-Panel-header', headerClassName)}
        type={PanelType.smallFixedFar}
        isLightDismiss={true}
        isFooterAtBottom={true}
        onRenderHeader={_onRenderHeader}
        onRenderFooterContent={footerButtons ? _onRenderFooterContent : onRenderFooterContent}
        onRenderBody={!!emptyStateProps ? _onRenderEmptyState : onRenderBody}
        onRenderNavigation={() => null}
        onLightDismissClick={_onDismiss}
        onKeyDown={dismissOnEscape ? _onKeyDown : undefined}
        onDismiss={dismissOnEscape ? undefined : _blockDismissOnEscape}
        {...rest}
        hasCloseButton={false}
        styles={myStyles}
      >
        {wrapContentsInStack === undefined || wrapContentsInStack ? (
          <div className="ba-Panel-content">{children}</div>
        ) : (
          children
        )}

        {_onRenderLoadingOverlay()}
        {_onRenderDialog()}
      </OfficePanel>
    );
  }

  private _blockDismissOnEscape = (event: React.SyntheticEvent<HTMLElement>): void => {
    if (event) {
      event.preventDefault();
    }
  };

  private _onRenderLoadingOverlay = (): JSX.Element => {
    const { loadingOverlay } = this.props;
    return (
      loadingOverlay && (
        <Overlay
          className="ba-Panel-LoadingOverlay"
          styles={{ root: { backgroundColor: this.palette.white, opacity: 0.9 } }}
          {...loadingOverlay.overlayProps}
        >
          <Spinner
            size={SpinnerSize.large}
            label={loadingOverlay.loadingText}
            {...loadingOverlay.spinnerProps}
          />
        </Overlay>
      )
    );
  };

  private _onRenderEmptyState = (): JSX.Element => {
    const { emptyStateProps } = this.props;
    return (
      <div className={Styles.panelStyleClasses.emptyStateContainer}>
        <EmptyState {...emptyStateProps} />
      </div>
    );
  };

  private _onRenderHeader = (
    headerProps?: IPanelProps,
    defaultRender?: IPanelHeaderRenderer,
    headerTextId?: string | undefined
  ): JSX.Element => {
    const { props, _onDismiss, _onRenderMessageBar } = this;

    let {
      hasCloseButton,
      headerText,
      headerClassName,
      onRenderSubHeader,
      closeButtonAriaLabel,
      headerLeftButtonProps,
      tooltipText
    } = props;

    // Default icon for the left side button
    if (headerLeftButtonProps) {
      headerLeftButtonProps = {
        ...headerLeftButtonProps,
        iconProps: {
          iconName: 'Back',
          ...headerLeftButtonProps.iconProps
        }
      };
    }

    return (
      <>
        <div className="ba-Panel-headerContainer">
          <div className={Styles.panelStyleClasses.panelHeader}>
            <div className={Styles.panelStyleClasses.panelHeaderLeft}>
              {headerLeftButtonProps && <IconButton {...headerLeftButtonProps} />}
              <h1
                id={headerTextId}
                className={css(Styles.panelStyleClasses.panelHeaderText, headerClassName)}
                style={this.headerStyle}
              >
                {headerText}
              </h1>
            </div>
            {hasCloseButton && (
              <TooltipHost content={tooltipText ? tooltipText : closeButtonAriaLabel}>
                <IconButton
                  ariaLabel={closeButtonAriaLabel}
                  iconProps={{ iconName: 'Cancel' }}
                  onClick={_onDismiss}
                />
              </TooltipHost>
            )}
          </div>
          {onRenderSubHeader && onRenderSubHeader(props)}
        </div>
        {_onRenderMessageBar()}
      </>
    );
  };

  private _onRenderMessageBar = (): JSX.Element => {
    const { messageBar } = this.props;
    return (
      messageBar && (
        <MessageBar
          styles={{
            root: { marginBottom: 8, flexShrink: 0 },
            iconContainer: { marginTop: 8, marginBottom: 8 },
            text: { marginTop: 8, marginBottom: 8 }
          }}
          {...messageBar.messageBarProps}
        >
          {messageBar.onRenderBody()}
        </MessageBar>
      )
    );
  };

  private _onRenderDialog = (): JSX.Element => {
    const { onDismiss, dismissDialog } = this.props;
    return (
      <Dialog
        hidden={!this.state.isDialogOpen}
        onDismiss={this._closeDialog}
        dialogContentProps={{
          type: DialogType.normal,
          title: dismissDialog ? dismissDialog.title : '',
          subText: dismissDialog ? dismissDialog.subtext : ''
        }}
      >
        <DialogFooter>
          <PrimaryButton
            onClick={() => {
              onDismiss();
              this._closeDialog();
            }}
            text={dismissDialog ? dismissDialog.confirmButtonText : ''}
          />
          <DefaultButton
            onClick={this._closeDialog}
            text={dismissDialog ? dismissDialog.cancelButtonText : ''}
          />
        </DialogFooter>
      </Dialog>
    );
  };

  private _openDialog = (): void => {
    this.setState({ isDialogOpen: true });
  };

  private _closeDialog = (): void => {
    this.setState({ isDialogOpen: false });
  };

  private _onDismiss = (): void => {
    const { showDismissDialog, onDismiss } = this.props;
    showDismissDialog ? this._openDialog() : onDismiss();
  };

  private _onRenderFooterContent = (): JSX.Element => {
    const { footerButtons, onRenderFooterContent } = this.props;
    return (
      footerButtons && (
        <PanelFooter
          footerButtons={footerButtons}
          dismissPanel={() => this._onDismiss()}
          onRenderFooterContent={onRenderFooterContent}
        />
      )
    );
  };

  private _onKeyDown = (event: React.KeyboardEvent<PanelBase>): void => {
    if (event.keyCode === KeyCodes.escape && !event.defaultPrevented) {
      this._onDismiss();

      event.stopPropagation();
      event.preventDefault();
    }
  };
}

type PanelFooterProps = Pick<IPanelProps, 'footerButtons' | 'onRenderFooterContent'> & {
  dismissPanel: () => void;
};

const PanelFooter: React.StatelessComponent<PanelFooterProps> = ({
  footerButtons,
  onRenderFooterContent,
  dismissPanel
}: PanelFooterProps): JSX.Element => {
  return (
    <div className={Styles.panelStyleClasses.panelFooter}>
      {onRenderFooterContent && onRenderFooterContent()}
      {footerButtons &&
        footerButtons.map((button: IPanelFooterButtonProps, i: number) => {
          const commonProps = {
            key: `ba-Panel-footerButton-${i}`,
            className: Styles.panelStyleClasses.panelFooterButton,
            disabled: !!button.disabled,
            onClick: () => button.dismissableOnClick(dismissPanel),
            ...button
          };

          if (button.primary) {
            return (
              <PrimaryButton
                {...commonProps}
                className={css(commonProps.className, 'ba-Panel-footer-primaryButton')}
              >
                {button.text}
              </PrimaryButton>
            );
          } else {
            return <DefaultButton {...commonProps}>{button.text}</DefaultButton>;
          }
        })}
    </div>
  );
};
