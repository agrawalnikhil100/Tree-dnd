/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import * as React from 'react';

import { Icon } from '@fluentui/react/lib/Icon';
import { Text } from '@fluentui/react/lib/Text';
import { Link } from '@fluentui/react/lib/Link';
import { IconButton } from '@fluentui/react/lib/Button';
import { ProgressIndicator } from '@fluentui/react/lib/ProgressIndicator';
import { Spinner, SpinnerSize } from '@fluentui/react/lib/Spinner';
import { Persona, PersonaSize } from '@fluentui/react/lib/Persona';

import { classNamesFunction } from '@fluentui/react/lib/Utilities';

import { Card } from './../Card';
import {
  NotificationCardClassNames,
  NotificationCardProps,
  NotificationCardStyleProps
} from './NotificationCard.types';

const getClassNames = classNamesFunction<NotificationCardStyleProps, NotificationCardClassNames>();

export const NotificationCardBase: React.FunctionComponent = (props: NotificationCardProps) => {
  const {
    className,
    theme,
    styles,
    isNew,
    notificationType,
    message,
    timestamp,
    heading,
    subHeading,
    actionLinks,
    hasCloseButton,
    hasSnoozeButton,
    iconProps,
    persona,
    spinner,
    progressStatus,
    percentComplete
  } = props;
  const classNames = getClassNames(styles, {
    theme,
    className,
    isNew,
    notificationType
  });

  const cardRef = React.createRef<HTMLDivElement>();

  const onSnooze = React.useCallback(() => props.onSnooze?.(), [props.onSnooze]);

  const onDismiss = React.useCallback(() => props.onDismiss?.(), [props.onDismiss]);

  const onMouseEnter = React.useCallback(
    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => props.onMouseEnter?.(event),
    [props.onMouseEnter]
  );

  const onMouseLeave = React.useCallback(
    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => props.onMouseLeave?.(event),
    [props.onMouseLeave]
  );

  return (
    <Card
      ref={cardRef}
      className={classNames.root}
      width={308}
      onMouseEnter={onMouseEnter}
      onMouseLeave={onMouseLeave}
    >
      <div className={classNames.imageWrapper}>
        {(iconProps || notificationType === 'Meeting' || (notificationType === 'Progress' && !spinner)) && (
          <Icon
            className={classNames.icon}
            iconName={
              (notificationType === 'Meeting' && 'Event') ||
              (notificationType === 'Progress' && 'CloudUpload')
            }
            {...iconProps}
          />
        )}
        {spinner && <Spinner className={classNames.icon} size={SpinnerSize.medium} />}
        {persona && <Persona className={classNames.persona} size={PersonaSize.size32} {...persona} />}
      </div>

      <div className={classNames.timeDismissWrapper}>
        {timestamp && <div className={classNames.timestamp}>{timestamp}</div>}
        {hasCloseButton && (
          <IconButton
            className={classNames.closeButton}
            title={'Close'}
            ariaLabel={'Close'}
            iconProps={{ iconName: 'ChromeClose' }}
            onClick={onDismiss}
            styles={{
              icon: {
                fontSize: theme.fonts.small.fontSize
              }
            }}
          />
        )}

        {hasSnoozeButton && (
          <IconButton
            className={classNames.closeButton}
            title={'Snooze'}
            ariaLabel={'Snooze'}
            iconProps={{ iconName: 'AlarmClock' }}
            onClick={onSnooze}
          />
        )}
      </div>

      <div className={classNames.contentWrapper}>
        <div className={classNames.cardHeadingWrapper}>
          <label className={classNames.cardHeading}>
            {/* Will probably end up being Mention or Attribution with v8 update. */}
            {notificationType === 'Peer' && <Icon className={classNames.peerIcon} iconName="Accounts" />}

            {heading}
          </label>
          {subHeading && <span className={classNames.cardSubHeading}>{subHeading}</span>}
        </div>
        {message && !spinner && (
          <Text className={classNames.messageWrapper} variant={'medium'}>
            {message}
          </Text>
        )}

        {notificationType === 'Progress' && !spinner && (
          <ProgressIndicator percentComplete={percentComplete} />
        )}

        {progressStatus && !spinner && <span className={classNames.cardSubHeading}>{progressStatus}</span>}

        {notificationType === 'Progress' && spinner && (
          <Text className={classNames.messageWrapper} variant={'medium'}>
            {message}
          </Text>
        )}

        {actionLinks?.map(({ link, text }) => (
          <Link key={text} className={classNames.actionButtons} href={link}>
            {text}
          </Link>
        ))}
      </div>
    </Card>
  );
};
