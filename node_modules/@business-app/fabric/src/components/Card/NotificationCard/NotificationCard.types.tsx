/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import { IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';
import { IIconProps } from '@fluentui/react/lib/Icon';
import { IPersonaSharedProps } from '@fluentui/react/lib/Persona';

import { CardProps } from './../Card.types';

interface BaseNotificationCardProps extends CardProps {
  /**
   * @type {ITheme}
   * @description THe theme object for Office components, typically set at the App level but can be changed to component level theme
   */
  theme?: ITheme;

  /**
   * @type {IStyleFunctionOrObject}
   * @description Styles object for altering styles, merges with default styles of the notification card
   */
  styles?: IStyleFunctionOrObject<Pick<NotificationCardProps, 'theme'>, NotificationCardClassNames>;

  /**
   * @type {boolean}
   * @description Defines if the notification is new, allowing for altered styles
   */
  isNew?: boolean;

  /**
   * @type {string}
   * @description String for the heading
   */
  heading: string;

  /**
   * @type {string}
   * @description String for the subheading
   */
  subHeading?: string;

  /**
   * @type {string}
   * @description String for the body message, is capped at two lines of text
   */
  message?: string;

  /**
   * @type {string}
   * @description String for a meeting notification time span
   */
  meetingTime?: string;

  /**
   * @type {string}
   * @description String for a meeting notification location
   */
  meetingLocation?: string;

  /**
   * @type {string}
   * @description Time string for the notification, does not appear is some cases
   */
  timestamp?: string;

  /**
   * @type {IIconProps}
   * @description Icon for the notification, not used for a Peer or an Alias notification
   */
  iconProps?: IIconProps;

  /**
   * @type {IPersonaSharedProps}
   * @description Persona props for a Peer and Alias notification
   */
  persona?: Pick<IPersonaSharedProps, 'imageUrl' | 'imageInitials' | 'presence'>;

  /**
   * @type {boolean}
   * @description Adds the close button to the notification card
   */
  hasCloseButton?: boolean;

  /**
   * @type {()=>{}}
   * @description Basic function for when the close button is clicked
   */
  onDismiss?: () => void;

  /**
   * @type {boolean}
   * @description Adds the snooze button to the notification card
   */
  hasSnoozeButton?: boolean;

  /**
   * @type {()=>{}}
   * @description Basic function for when the snooze button is clicked
   */
  onSnooze?: () => void;

  /**
   * @type {boolean}
   * @description Sets the type of the indeterminate progress from a bar to a spinner
   */
  spinner?: boolean;

  /**
   * @type {string}
   * @description String for the progress status of a Progress notification
   */
  progressStatus?: string;

  /**
   * @type {number}
   * @description Progress percentage of a Progress notification, when not used, progress is as `indeterminate` progress indicator
   */
  percentComplete?: number;

  /**
   * @type {object}
   * @description Adds up to two action links at the bottom body of the notification
   */
  actionLinks?: [
    {
      text: string;
      link: string;
    },
    {
      text: string;
      link: string;
    }?
  ];
}

type ConditionalNotificationProps =
  | {
      notificationType: 'Status';
      persona?: never;
      hasSnoozeButton?: never;
      spinner?: never;
      progressStatus?: never;
      percentComplete?: never;
    }
  | {
      notificationType: 'Peer';
      iconProps?: never;
      hasSnoozeButton?: boolean;
      spinner?: never;
      progressStatus?: never;
      percentComplete?: never;
    }
  | {
      notificationType: 'Alias';
      iconProps?: never;
      hasSnoozeButton?: never;
      spinner?: never;
      progressStatus?: never;
      percentComplete?: never;
    }
  | {
      notificationType: 'Meeting';
      meetingTime: string;
      meetingLocation: string;
      persona?: never;
      hasSnoozeButton?: boolean;
      subHeading?: never;
      message?: never;
      iconProps?: IIconProps;
      spinner?: never;
      progressStatus?: never;
      percentComplete?: never;
    }
  | {
      notificationType: 'Progress';
      progressStatus?: string;
      iconProps?: IIconProps;
      persona?: never;
      subHeading?: never;
      hasSnoozeButton?: never;
    };

export type NotificationCardProps = BaseNotificationCardProps & ConditionalNotificationProps;

export type NotificationCardStyleProps = Pick<
  NotificationCardProps,
  'theme' | 'className' | 'notificationType' | 'isNew'
>;

export interface NotificationCardClassNames {
  root: IStyle;
  timeDismissWrapper: IStyle;
  closeButton: IStyle;
  peerIcon: IStyle;
  icon: IStyle;
  persona: IStyle;
  imageWrapper: IStyle;
  contentWrapper: IStyle;
  cardHeadingWrapper: IStyle;
  cardHeading: IStyle;
  cardSubHeading: IStyle;
  messageWrapper: IStyle;
  actionButtons: IStyle;
  timestamp: IStyle;
}
