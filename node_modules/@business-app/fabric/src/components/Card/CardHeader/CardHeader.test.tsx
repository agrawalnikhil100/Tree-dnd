/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import 'jest';

import * as Enzyme from 'enzyme';
import * as React from 'react';

import { IconButton } from '@fluentui/react/lib/Button';
import { Label } from '@fluentui/react/lib/Label';

import { CardHeader } from './';

describe('CardHeaderBase', () => {
  it('Basic rendering of the Card Header', () => {
    const wrapper = Enzyme.mount(<CardHeader title={'Title'} />);

    // One title Label component
    const findLabel = wrapper.find(Label);
    expect(findLabel.length).toBe(1);

    // The contextual menu icon button is not rendered by default
    const contextualMenuIconWrapper = wrapper.find(IconButton);
    expect(contextualMenuIconWrapper.length).toBe(0);

    wrapper.unmount();
  });

  it('Contextual menu gets rendered if ContextualMenuProps are provided', () => {
    const wrapper = Enzyme.mount(
      <CardHeader
        title={'Title'}
        contextualMenuProps={{
          items: [
            {
              key: 'newItem',
              text: 'New',
              onClick: () => alert('New clicked')
            },
            {
              key: 'rename',
              text: 'Rename',
              onClick: () => alert('Rename clicked')
            }
          ]
        }}
      />
    );

    const contextualMenuIconWrapper = wrapper.find(IconButton);

    // ContextualMenu should get rendered
    expect(contextualMenuIconWrapper.length).toBe(1);

    // The 'MoreVertical' icon gets rendered as the contextual menu icon
    expect(contextualMenuIconWrapper.props().menuIconProps.iconName).toBe('MoreVertical');

    wrapper.unmount();
  });

  it('The action links component gets rendered when the renderActionLinks prop is passed', () => {
    const ActionLinks = () => {
      return (
        <>
          <IconButton iconProps={{ iconName: 'Attach' }} />
          <IconButton iconProps={{ iconName: 'Add' }} />
        </>
      );
    };

    const wrapper = Enzyme.mount(<CardHeader title={'Title'} renderActionLinks={() => <ActionLinks />} />);

    // The action links component gets rendered
    expect(wrapper.find(ActionLinks).length).toBe(1);

    wrapper.unmount();
  });
});
