/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as React from 'react';

import { CommandBarButton, IButtonProps, IconButton } from '@fluentui/react/lib/Button';
import { FontIcon } from '@fluentui/react/lib/Icon';
import { Label } from '@fluentui/react/lib/Label';
import { ILinkProps, Link } from '@fluentui/react/lib/Link';
import { classNamesFunction, css } from '@fluentui/react/lib/Utilities';

import { ActionItemType, CardHeaderProps, CardHeaderStyleProps, CardHeaderStyles } from './CardHeader.types';

const getClassNames = classNamesFunction<CardHeaderStyleProps, CardHeaderStyles>();

export const CardHeaderBase = (props: CardHeaderProps) => {
  const {
    actionItemProps,
    contextualMenuAriaLabel,
    contextualMenuProps,
    renderActionLinks,
    styles,
    subTitle,
    subTitleIconProps,
    title,
    titleIconProps,
    onRenderTitle,
    onRenderSubTitle
  } = props;
  const classNames = getClassNames(styles, props);
  const actionItems: JSX.Element[] = [];

  actionItemProps?.forEach(item => {
    switch (item.type) {
      case ActionItemType.Link:
        actionItems.push(
          <Link
            key={item.props.title}
            className={css(classNames.actionMenuItem, classNames.actionMenuLink)}
            {...(item.props as ILinkProps)}
          >
            {item.props.title}
          </Link>
        );
        break;
      case ActionItemType.Button:
        actionItems.push(
          <CommandBarButton
            key={item.props.title}
            className={css(classNames.actionMenuItem, classNames.actionMenuButton)}
            {...(item.props as IButtonProps)}
          />
        );
        break;
      case ActionItemType.ContextualMenu:
        actionItems.push(
          <CommandBarButton
            key={item.props.title}
            className={css(classNames.actionMenuItem)}
            {...(item.props as IButtonProps)}
          />
        );
        break;
      default:
        // eslint-disable-next-line no-console
        console.log(
          'You managed to select a component type that is currently ',
          'unavailable for the ActionItems.',
          'Available ActionItems include Links, Buttons, and/or ContextualMenus'
        );
        break;
    }
  });

  const shouldRenderTitle = title || onRenderTitle;
  const shouldRenderSubTitle = subTitle || onRenderSubTitle;
  const shouldRenderSubContainer = shouldRenderSubTitle || subTitleIconProps;

  return (
    <div className={classNames.headerContainer}>
      {titleIconProps && <FontIcon className={classNames.titleIcon} {...titleIconProps} />}

      {(shouldRenderTitle || shouldRenderSubContainer) && (
        <div className={classNames.titleContainer}>
          {shouldRenderTitle && (onRenderTitle?.() || <Label className={classNames.title}>{title}</Label>)}
          {shouldRenderSubContainer && (
            <span className={classNames.subTitleContainer}>
              {subTitleIconProps && <FontIcon className={classNames.subTitleIcon} {...subTitleIconProps} />}
              {shouldRenderSubTitle &&
                (onRenderSubTitle?.() || <Label className={classNames.subTitle}>{subTitle}</Label>)}
            </span>
          )}
        </div>
      )}

      <div className={classNames.actionMenuContainer}>
        {renderActionLinks?.()}

        {actionItems}

        {contextualMenuProps && (
          <IconButton
            className={classNames.actionMenuButton}
            menuIconProps={{ iconName: 'MoreVertical' }}
            menuProps={contextualMenuProps}
            ariaLabel={contextualMenuAriaLabel}
          />
        )}
      </div>
    </div>
  );
};
