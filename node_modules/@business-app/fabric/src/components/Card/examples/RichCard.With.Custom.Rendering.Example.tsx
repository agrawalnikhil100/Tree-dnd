/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as React from 'react';

import { DefaultButton, IconButton, PrimaryButton } from '@fluentui/react/lib/Button';
import { ContextualMenuItemType } from '@fluentui/react/lib/ContextualMenu';

import { CardHeaderProps } from '@business-app/fabric/lib/components/Card/CardHeader/CardHeader.types';
import { RichCard } from '@business-app/fabric/lib/components/Card/RichCard';

export class RichCardWithCustomRenderingExample extends React.Component {
  public render() {
    return (
      <RichCard
        height={300}
        width={300}
        headerProps={getHeaderProps()}
        renderContentArea={renderContentArea}
        renderFooter={renderFooter}
        styles={{ footer: { padding: 5 } }}
      />
    );
  }
}

function renderContentArea(): JSX.Element {
  return (
    <img
      style={{ width: '100%' }}
      src={'https://i.imgur.com/B83RUSb.jpg'}
      alt="placeholder image for RichCard example"
    />
  );
}

function getHeaderProps(): CardHeaderProps {
  return {
    title: 'Card title',
    contextualMenuAriaLabel: 'Menu',
    contextualMenuProps: {
      items: [
        {
          key: 'newItem',
          text: 'New',
          onClick: () => alert('New clicked'),
          ariaLabel: 'New'
        },
        {
          key: 'divider_1',
          itemType: ContextualMenuItemType.Divider
        },
        {
          key: 'rename',
          text: 'Rename',
          ariaLabel: 'Rename',
          onClick: () => alert('Rename clicked')
        },
        {
          key: 'edit',
          text: 'Edit',
          ariaLabel: 'Edit',
          onClick: () => alert('Edit clicked')
        },
        {
          key: 'properties',
          text: 'Properties',
          ariaLabel: 'Properties',
          onClick: () => alert('Properties clicked')
        },
        {
          key: 'linkNoTarget',
          ariaLabel: 'Link with no target',
          text: 'Link same window',
          href: 'http://bing.com'
        }
      ]
    },
    renderActionLinks: () => {
      return (
        <>
          <IconButton aria-label={'Attach'} iconProps={{ iconName: 'Attach' }} />
          <IconButton aria-label={'Add'} iconProps={{ iconName: 'Add' }} />
        </>
      );
    }
  };
}

function renderFooter(): JSX.Element {
  return (
    <>
      <PrimaryButton text={'Done'} style={{ margin: '5px' }} />
      <DefaultButton text={'Cancel'} style={{ margin: '5px' }} />
    </>
  );
}
