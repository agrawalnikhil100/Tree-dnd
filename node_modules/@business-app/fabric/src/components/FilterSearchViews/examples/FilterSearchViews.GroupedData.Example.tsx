/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as React from 'react';

import { FilterSearchViews } from '../index';
import { filters, groupedItems, IDataItem, shouldFilterItem } from './FilterSearchViewsExampleData';
import { IListRenderMethod, renderItem } from './FilterSearchViewsExampleList';

export interface IGroupedListMultipleViewsState {
  amountFiltered: number;
}
export class FilterSearchViewsGroupedDataExample extends React.Component {
  public readonly state: IGroupedListMultipleViewsState = {
    amountFiltered: 0
  };
  public render() {
    return (
      <>
        <FilterSearchViews
          strings={{
            searchBoxPlaceholder: 'Search',
            allItemsFilterItemText: 'All'
          }}
          items={groupedItems}
          shouldFilterItem={shouldFilterItem}
          filters={filters}
          views={[
            {
              key: 'list',
              text: 'List',
              ariaLabel: 'List view',
              iconName: 'List',
              onRenderView: (filteredItems: IDataItem[]) => {
                // Note this is an example code only for announcing the filtered results,
                // production code may not be this predictable.
                const allFiltered =
                  (filteredItems[0]?.children?.length || 0) + (filteredItems[1]?.children?.length || 0);
                if (this.state.amountFiltered !== allFiltered) {
                  this.setState({ amountFiltered: allFiltered });
                }

                return this._renderList(filteredItems, IListRenderMethod.VerticalList);
              }
            },
            {
              key: 'grid',
              text: 'Grid',
              ariaLabel: 'Grid view',
              iconName: 'LargeGrid',
              onRenderView: (filteredItems: IDataItem[]) => {
                // Note this is an example code only for announcing the filtered results,
                // production code may not be this predictable.
                const allFiltered =
                  (filteredItems[0]?.children?.length || 0) + (filteredItems[1]?.children?.length || 0);
                if (this.state.amountFiltered !== allFiltered) {
                  this.setState({ amountFiltered: allFiltered });
                }

                return this._renderList(filteredItems, IListRenderMethod.Grid);
              }
            }
          ]}
        />
        <div
          aria-live="assertive"
          aria-atomic="true"
          style={{ overflow: 'hidden', position: 'absolute', top: -1000, left: -1000, width: 0, height: 0 }}
        >
          {this.state.amountFiltered + ' items shown'}
        </div>
      </>
    );
  }

  private _renderList(filteredItems: IDataItem[], renderMethod: IListRenderMethod) {
    return <>{filteredItems.map((item, index) => renderItem(item, index, renderMethod))}</>;
  }
}
