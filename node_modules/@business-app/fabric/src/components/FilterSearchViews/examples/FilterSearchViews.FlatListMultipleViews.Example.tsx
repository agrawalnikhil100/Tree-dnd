/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as React from 'react';

import { Toggle } from '@fluentui/react/lib/Toggle';

import { FilterSearchViews, IView } from '../index';
import { filters, flatItems, IDataItem, shouldFilterItem } from './FilterSearchViewsExampleData';
import { IListRenderMethod, renderItem } from './FilterSearchViewsExampleList';
import { Announced } from '@fluentui/react/lib/Announced';

export interface IFlatListMultipleViewsState {
  includeHorizontalList: boolean;
  includeGrid: boolean;
  amountFiltered: number;
}

export class FilterSearchViewsFlatListMultipleViewsExample extends React.Component<
  {},
  IFlatListMultipleViewsState
> {
  public readonly state: IFlatListMultipleViewsState = {
    includeHorizontalList: true,
    includeGrid: true,
    amountFiltered: 0
  };

  public render() {
    const { includeHorizontalList, includeGrid } = this.state;
    const views: Array<IView<IDataItem>> = [
      {
        key: 'verticalList',
        text: 'Vertical List',
        ariaLabel: 'Vertical list view',
        iconName: 'AlignVerticalBottom',
        onRenderView: filteredItems => {
          if (this.state.amountFiltered !== filteredItems.length) {
            this.setState({ amountFiltered: filteredItems.length });
          }
          return this._renderList(filteredItems, IListRenderMethod.VerticalList);
        }
      }
    ];

    if (includeHorizontalList) {
      views.push({
        key: 'horizontalList',
        text: 'Horizontal List',
        ariaLabel: 'Horizontal list view',
        iconName: 'AlignHorizontalLeft',
        onRenderView: filteredItems => {
          if (this.state.amountFiltered !== filteredItems.length) {
            this.setState({ amountFiltered: filteredItems.length });
          }
          return this._renderList(filteredItems, IListRenderMethod.HorizontalList);
        }
      });
    }

    if (includeGrid) {
      views.push({
        key: 'grid',
        text: 'Grid',
        ariaLabel: 'Grid view',
        iconName: 'GridViewMedium',
        onRenderView: (filteredItems: IDataItem[]) => {
          if (this.state.amountFiltered !== filteredItems.length) {
            this.setState({ amountFiltered: filteredItems.length });
          }
          return this._renderList(filteredItems, IListRenderMethod.Grid);
        }
      });
    }

    return (
      <>
        <Toggle
          checked={includeHorizontalList}
          onChange={this._onHorizontalToggleChange}
          label={'Include Horizontal List'}
        />
        <Toggle
          checked={includeGrid}
          onChange={this._onGridToggleChange}
          label={'Include Grid'}
          styles={{
            root: {
              marginBottom: 12
            }
          }}
        />

        <FilterSearchViews
          strings={{
            searchBoxPlaceholder: 'Search',
            allItemsFilterItemText: 'All'
          }}
          items={flatItems}
          shouldFilterItem={shouldFilterItem}
          filters={filters}
          views={views}
        />
        <div
          aria-live="assertive"
          aria-atomic="true"
          style={{ overflow: 'hidden', position: 'absolute', top: -1000, left: -1000, width: 0, height: 0 }}
        >
          {this.state.amountFiltered + ' items shown of ' + flatItems.length}
        </div>
      </>
    );
  }

  private _renderList(filteredItems: IDataItem[], renderMethod: IListRenderMethod) {
    return (
      <div
        style={{
          display: 'flex',
          flexDirection: renderMethod === IListRenderMethod.VerticalList ? 'column' : 'row',
          flexWrap: renderMethod === IListRenderMethod.Grid ? 'wrap' : 'initial',
          overflowX: renderMethod === IListRenderMethod.HorizontalList ? 'auto' : 'initial'
        }}
      >
        {filteredItems.map((item, index) => renderItem(item, index, renderMethod))}
      </div>
    );
  }

  private _onHorizontalToggleChange = (_: React.MouseEvent<HTMLElement>, checked: boolean) => {
    this.setState({ includeHorizontalList: checked });
  };

  private _onGridToggleChange = (_: React.MouseEvent<HTMLElement>, checked: boolean) => {
    this.setState({ includeGrid: checked });
  };
}
