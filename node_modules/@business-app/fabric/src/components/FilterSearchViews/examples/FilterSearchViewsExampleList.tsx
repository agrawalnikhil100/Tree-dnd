/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as React from 'react';

import { Icon } from '@fluentui/react/lib/Icon';
import { ILabelStyles, Label } from '@fluentui/react/lib/Label';
import { IStyle } from '@fluentui/react/lib/Styling';

import { IDataItem } from './FilterSearchViewsExampleData';

export enum IListRenderMethod {
  VerticalList,
  HorizontalList,
  Grid
}

export interface IFilterSearchViewsExampleListProps {
  filteredItems: IDataItem[];
  renderMethod: IListRenderMethod;
}

/**
 * Renders an item in the list. Handles logic of rendering an item and its children.
 * @param item Item to render
 * @param index Index of item in list
 * @param renderAsGrid Whether to render the leaf items as a grid
 * @param useFloatForGrid Whether to use float for the grid. This is important for when the data source is flat versus
 * nested.
 */
export const renderItem = (item: IDataItem, index: number, renderMethod: IListRenderMethod) => {
  if (item.children) {
    return (
      <div key={item.id}>
        <Label styles={getHeaderStyles(index)}>{item.text}</Label>
        <div style={{ display: 'flex', flexWrap: 'wrap', alignItems: 'center' }}>
          {item.children.map((child: IDataItem) => renderItem(child, index, renderMethod))}
        </div>
      </div>
    );
  }

  let itemContainerStyles: React.CSSProperties;
  let iconStyles: IStyle;
  if (renderMethod === IListRenderMethod.VerticalList) {
    itemContainerStyles = verticalListItemContainerStyles;
    iconStyles = listIconStyles;
  } else if (renderMethod === IListRenderMethod.HorizontalList) {
    itemContainerStyles = horizontalListItemContainerStyles;
    iconStyles = listIconStyles;
  } else if (renderMethod === IListRenderMethod.Grid) {
    itemContainerStyles = gridContainerStyles;
    iconStyles = gridIconStyles;
  }

  return (
    <div key={item.id} style={itemContainerStyles}>
      <Icon iconName={item.iconName} styles={{ root: iconStyles }} />
      <Label>{item.text}</Label>
    </div>
  );
};

const getHeaderStyles = (index: number): ILabelStyles => ({
  root: {
    backgroundColor: '#eaeaea',
    paddingLeft: 8,
    marginTop: index > 0 ? 8 : 0
  }
});

const baseListItemContainerStyles: React.CSSProperties = {
  display: 'flex',
  flexDirection: 'row',
  alignItems: 'center',
  height: 32,
  float: 'initial',
  padding: '0px 8px'
};

const verticalListItemContainerStyles: React.CSSProperties = {
  ...baseListItemContainerStyles,
  justifyContent: 'initial',
  width: '100%',
  height: 32
};

const horizontalListItemContainerStyles: React.CSSProperties = {
  ...baseListItemContainerStyles,
  justifyContent: 'center',
  flex: '0 0 10%',
  height: 72
};

const gridContainerStyles: React.CSSProperties = {
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  justifyContent: 'center',
  width: '20%',
  height: 100,
  paddingLeft: 0
};

const listIconStyles: IStyle = {
  marginBottom: 0,
  marginRight: 8
};

const gridIconStyles: IStyle = {
  marginBottom: 8,
  marginRight: 0
};
