/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import { IBaseProps, IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';

import { IFilterItem } from '../FilterSearchBox/FilterSearchBox.types';

/**
 * Base interface for an item
 */
export interface IItem {
  /**
   * Items children
   */
  children?: IItem[];
}

export interface IView<T extends IItem = IItem> {
  /**
   * Unique key of the view.
   */
  key: string;

  /**
   * Name of the Office Fabric icon to represent your view.
   */
  iconName: string;

  /**
   * Accessible label.
   */
  ariaLabel?: string;

  /**
   * Display text for the view.
   * This will be used in a contextual menu if there are three or more views provided.
   */
  text: string;

  /**
   * Callback to render the list of filtered items
   */
  onRenderView: (filteredItems: T[], searchText: string, selectedFilter: IFilterItem) => JSX.Element;
}

export interface IFilterSearchViews {
  /**
   * Focus the component. This will focus the search box.
   */
  readonly focus: () => void;

  /**
   * Dismiss the menu from the button
   */
  readonly dismissMenu: () => void;
}

export type IRetrieveFilterButtonIconName = (selectedFilterKey: string | null) => string;

export interface IFilterSearchViewsProps<T extends IItem = IItem> extends IBaseProps<IFilterSearchViews> {
  /**
   * Call to provide customized styling that will layer on top of the variant rules.
   */
  readonly styles?: IStyleFunctionOrObject<IFilterSearchViewsStyleProps, IFilterSearchViewsStyles>;

  /**
   * Theme provided by High-Order Component.
   */
  readonly theme?: ITheme;

  /**
   * The various localized strings the component requires.
   */
  readonly strings: {
    /**
     * Placeholder for SearchBox
     */
    readonly searchBoxPlaceholder: string;

    /**
     *  Optional string that will be passed to SearchBox clear button title text
     */
    readonly searchBoxClearButtonTitle?: string;

    /**
     * Display text for the 'All' default filter that will show all items
     */
    readonly allItemsFilterItemText: string;

    /**
     * If provided, a tool tip will appear on the filter button.
     */
    readonly filterButtonTooltipText?: string;
  };

  /**
   * The list of items to render.
   */
  readonly items: T[];

  /**
   * The list of filters on which to apply to the list of items.
   * NOTE: A filter of 'All' will be added to the beginning of the list provided here.
   */
  readonly filters?: IFilterItem[];

  /**
   * Used as key for the automatically added 'All' filter.
   * If not provided, uses a default key.
   */
  readonly allFilterItemKey?: string;

  /**
   * The views in which present the list of filtered items.
   */
  readonly views: Array<IView<T>>;

  /**
   * String or function to retreive a string.
   * Optional function to retrieve the filter button icon name provided the selected filter.
   * If a string is provided or returned from the function,
   * the filter button will show this icon rather than the text of the selected filter.
   */
  readonly filterButtonIconName?: string | IRetrieveFilterButtonIconName;

  /**
   * Callback to determine whether an item should be filtered based on the current search text and selected filter.
   * NOTE: For items that contain children, children will be filtered before calling the item for the item itself.
   */
  readonly shouldFilterItem: (item: T, searchText: string, selectedFilter: IFilterItem) => boolean;

  /**
   * Default search text.
   */
  readonly defaultSearchText?: string;

  /**
   * Default selected filter key.
   */
  readonly defaultSelectedFilterKey?: string;

  /**
   * Default selected view key
   */
  readonly defaultSelectedViewKey?: string;

  /**
   * Called when the search text changes.
   */
  readonly onChangeSearchText?: (newSearchText: string) => void;

  /**
   * Called when the selected filter changes.
   */
  readonly onChangeFilter?: (filterKey: string) => void;

  /**
   * Called when the view changes
   */
  readonly onChangeView?: (viewKey: string) => void;

  /**
   * To Display Refresh Button
   */
  refreshButtonProps?: JSX.Element;
}

export type IFilterSearchViewsStyleProps = Required<Pick<IFilterSearchViewsProps, 'theme'>>;

export interface IFilterSearchViewsStyles {
  /**
   * Styles for the root element.
   */
  readonly root?: IStyle;

  /**
   * Styles for the container around the SearchBox and view picker button.
   */
  readonly searchBoxViewPickerContainer?: IStyle;

  /**
   * Styles for the view picker button root element.
   */
  readonly viewPickerButton?: IStyle;

  /**
   * Styles for the FilterSearchBox root element.
   */
  readonly filterSearchBox?: IStyle;
}

export interface IFilterSearchViewsState {
  /**
   * Current search text
   */
  searchText: string;

  /**
   * `key` of the selected filter
   */
  selectedFilterKey: string;

  /**
   * `key` of the selected view that will be rendered.
   */
  selectedViewKey: string;
}
