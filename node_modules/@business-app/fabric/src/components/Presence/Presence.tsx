/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as React from 'react';
import {
  PersonaCoinForWithAccordionProps,
  PresenceBaseStyleProps,
  PresenceProps,
  PresenceStrings,
  PresenceStyleProps,
  PresenceStyles,
  PresentUser,
  User
} from './Presence.types';
import { PersonaAccordionPanel } from './PersonaAccordionPanel';
import { PersonaAccordionPanelProps } from './PersonaAccordionPanel.types';
import { getPresenceStyles } from './Presence.styles';
import { classNamesFunction, styled } from '@fluentui/react/lib/Utilities';
import { Facepile, IFacepilePersona, IFacepileProps, OverflowButtonType } from '@fluentui/react/lib/Facepile';
import { Persona, PersonaSize } from '@fluentui/react/lib/Persona';
import { Callout, DirectionalHint } from '@fluentui/react/lib/Callout';
import { FocusZone, FocusZoneDirection } from '@fluentui/react/lib/FocusZone';
import { List } from '@fluentui/react/lib/List';
import { ITooltipProps, TooltipDelay, TooltipHost } from '@fluentui/react/lib/Tooltip';
import { DefaultButton } from '@fluentui/react/lib/Button';

const getClassNames = classNamesFunction<PresenceStyleProps, Required<PresenceStyles>>();

const DefaultMaxDisplayableUsers = 2;

export const PresenceBase = (props: PresenceProps & PresenceBaseStyleProps) => {
  const [showCallout, setShowCallout] = React.useState(false);
  const [overFlowButtonTarget, setOverFlowButtonTarget] = React.useState(undefined);
  const presentPersonas = props.presentUsers.map(user => ({ data: user }));
  const maxDisplayableUsers = props.maxDisplayableUsers || DefaultMaxDisplayableUsers;

  const styles = getClassNames(props.styles, {
    theme: props.theme!,
    showAccordion: props.showAccordion
  });

  const onRenderPersona = props.showAccordion
    ? onRenderPersonaCoinForWithAccordion(props.strings, props.signedInUser)
    : onRenderPersonaCoinForInlineAuthorPersona();

  const facepileProps: IFacepileProps = {
    personas: presentPersonas.slice(0, maxDisplayableUsers),
    overflowPersonas: presentPersonas.slice(maxDisplayableUsers),
    personaSize: PersonaSize.size24,
    maxDisplayablePersonas: maxDisplayableUsers,
    // Overriding OnRenderPersonaCoin doesn't work when there is only one item. onRenderPersona is a way around that.
    onRenderPersona: onRenderPersona,
    onRenderPersonaCoin: onRenderPersona,
    overflowButtonProps: {
      ['aria-haspopup']: true,
      ariaLabel: props.strings.overflowButtonAriaLabel
    },
    ariaLabel: props.strings.ariaLabel,
    overflowButtonType: OverflowButtonType.descriptive
  };

  if (facepileProps.overflowPersonas.length > 0) {
    facepileProps.overflowButtonProps.onClick = e => {
      e.stopPropagation();
      setOverFlowButtonTarget(e.currentTarget);
      setShowCallout(!showCallout);
    };
  }

  return (
    <>
      <Facepile {...facepileProps} />
      {facepileProps.overflowPersonas.length > 0 && (
        <Callout
          hidden={!showCallout}
          role={'dialog'}
          isBeakVisible={true}
          target={overFlowButtonTarget}
          onDismiss={() => setShowCallout(false)}
          directionalHint={DirectionalHint.bottomCenter}
          setInitialFocus={true}
        >
          <FocusZone direction={FocusZoneDirection.vertical} className={styles.overFlowListContent}>
            <List
              items={facepileProps.overflowPersonas}
              onRenderCell={onRenderPersonaCoinForWithAccordion(
                props.strings,
                props.signedInUser,
                true,
                props.showAccordion
              )}
            />
          </FocusZone>
        </Callout>
      )}
    </>
  );
};

const onRenderPersonaCoinForInlineAuthorPersona = () => (props: IFacepilePersona) => {
  return <PresencePersona {...(props.data as PresentUser)} />;
};

export const PresencePersona = (props: PresentUser) => {
  const personaCommonProps = {
    imageUrl: props.imageUrl,
    text: props.displayName
  };

  const tooltipProps: ITooltipProps = {
    onRenderContent: () => (
      <Persona
        {...personaCommonProps}
        size={PersonaSize.size32}
        showSecondaryText={true}
        secondaryText={props.presenceContext}
      />
    )
  };

  return (
    <TooltipHost
      key={props.key}
      tooltipProps={tooltipProps}
      delay={TooltipDelay.zero}
      directionalHint={DirectionalHint.bottomCenter}
    >
      <Persona {...personaCommonProps} hidePersonaDetails={true} size={PersonaSize.size24} key={props.key} />
    </TooltipHost>
  );
};

const onRenderPersonaCoinForWithAccordion = (
  strings: PresenceStrings,
  signedInUser?: User,
  isOverflowItem?: boolean,
  isCollapsible?: boolean
) => (props: IFacepilePersona) => {
  const authorPersonaProps: PersonaCoinForWithAccordionProps = {
    presentUser: props.data as PresentUser,
    strings,
    signedInUser,
    isOverflowItem,
    isCollapsible
  };
  return <PersonaCoinForWithAccordion {...authorPersonaProps} />;
};

export const PersonaCoinForWithAccordionBase = (
  props: PersonaCoinForWithAccordionProps & PresenceBaseStyleProps
) => {
  const [showCallout, setShowCallout] = React.useState(false);
  const personaRef = React.useRef(null);

  const personaAccordionPanelProps: PersonaAccordionPanelProps = {
    showActionItemsAlways: !props.isOverflowItem,
    isCollapsible: props.isCollapsible,
    presentUser: props.presentUser,
    signedInUser: props.signedInUser,
    strings: props.strings
  };
  const styles = getClassNames(props.styles, {
    theme: props.theme!,
    showAccordion: false,
    isSelected: showCallout
  });

  return props.isOverflowItem ? (
    <PersonaAccordionPanel {...personaAccordionPanelProps} />
  ) : (
    <>
      <div ref={personaRef} key={props.presentUser.key}>
        <DefaultButton
          key={props.presentUser.key}
          aria-haspopup={showCallout}
          className={styles.commandBarPersonaButton}
          onClick={() => setShowCallout(!showCallout)}
          ariaLabel={props.presentUser.displayName}
        >
          <Persona
            imageUrl={props.presentUser.imageUrl}
            text={props.presentUser.displayName}
            hidePersonaDetails={true}
            size={PersonaSize.size24}
            key={props.presentUser?.key}
          />
        </DefaultButton>
      </div>
      <Callout
        hidden={!showCallout}
        role={'dialog'}
        isBeakVisible={true}
        target={personaRef.current}
        onDismiss={() => setShowCallout(false)}
        directionalHint={DirectionalHint.bottomCenter}
        setInitialFocus={true}
      >
        <FocusZone direction={FocusZoneDirection.vertical} role="menu">
          <PersonaAccordionPanel {...personaAccordionPanelProps} />
        </FocusZone>
      </Callout>
    </>
  );
};

const PersonaCoinForWithAccordion = styled(PersonaCoinForWithAccordionBase, getPresenceStyles);

/**
 * Facepile for showing users present on a resource, with additional context and contact info.
 */
export const Presence = styled(PresenceBase, getPresenceStyles);
