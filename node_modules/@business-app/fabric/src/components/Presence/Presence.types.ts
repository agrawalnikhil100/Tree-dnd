/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import { IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';

/**
 * Props for the Presence component.
 */
export interface PresenceProps {
  /**
   * List of users who are present on the given resource.
   */
  presentUsers: PresentUser[];

  /**
   * The user who is currently signed in.
   */
  signedInUser?: User;

  /**
   * Whether or not the accordion containing contact actions should be shown.
   */
  showAccordion?: boolean;

  /**
   * Localized strings needed by the component.
   */
  strings: PresenceStrings;

  /**
   * The max number of users to display before overflowing to a "+X" list.
   * @default 2
   */
  maxDisplayableUsers?: number;
}

/**
 * Represents a user who is present on a given resource.
 */
export interface PresentUser {
  /**
   * The user's AAD user ID.
   */
  userId: string;

  /**
   * Name to display for the user.
   */
  displayName: string;

  /**
   * The user's profile image.
   */
  imageUrl?: string;

  /**
   * The user's email address.
   */
  email?: string;

  /**
   * A unique key to use for React components for this user.
   */
  key?: string;

  /**
   * Contextual information about the user's presence, such as 'Viewing Screen X' or 'Editing Topic Y'.
   */
  presenceContext?: string;
}

/**
 * Represents the user who is signed in to the service.
 */
export interface User {
  /**
   * The user's AAD user ID.
   */
  userId?: string;

  /**
   * The user's AAD tenant ID.
   */
  tenantId?: string;

  /**
   * Name to display for the user.
   */
  displayName?: string;

  /**
   * The user's email address.
   */
  email?: string;

  /**
   * The user's profile image.
   */
  imageUrl?: string;
}

/**
 * Localized strings used by the component.
 */
export interface PresenceStrings {
  /**
   * The aria label for the whole component, such as 'Users present at resource X'.
   */
  ariaLabel: string;

  /**
   * The aria label for the "+X" overflow button, such as '4 more users'.
   */
  overflowButtonAriaLabel: string;

  /**
   * The text for the 'Start Teams chat' button. Required only for showAccordion: true.
   */
  startTeamsChat?: string;

  /**
   * The text for the 'Send email' button. Required only for showAccordion: true.
   */
  sendEmail?: string;

  /**
   * The text for the 'Open [Teams chat] in desktop' button. Required only for showAccordion: true.
   */
  openInDesktop?: string;

  /**
   * The text for the 'Open [Teams chat] in browser' button. Required only for showAccordion: true.
   */
  openInBrowser?: string;
}

export interface PersonaCoinForWithAccordionProps {
  presentUser: PresentUser;
  signedInUser?: User;
  isOverflowItem?: boolean;
  isCollapsible?: boolean;
  strings: PresenceStrings;
}

export interface PresenceBaseStyleProps {
  theme?: ITheme;
  showAccordion?: boolean;
  isSelected?: boolean;
  styles?: IStyleFunctionOrObject<PresenceStyleProps, PresenceStyles>;
}

export type PresenceStyleProps = Required<Pick<PresenceBaseStyleProps, 'theme' | 'showAccordion'>> &
  Pick<PresenceBaseStyleProps, 'isSelected'>;

export interface PresenceStyles {
  commandBarPersonaButton?: IStyle;
  overFlowListContent?: IStyle;
}
