/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as React from 'react';
import { getPersonaAccordionPanelStyles } from './PersonaAccordionPanel.styles';
import { classNamesFunction, styled } from '@fluentui/react/lib/Utilities';
import { IProcessedStyleSet } from '@fluentui/react/lib/Styling';
import {
  EmailActionButtonProps,
  LinkTemplates,
  openUrlInNewTab,
  PersonaAccordionPanelBaseStyleProps,
  PersonaAccordionPanelProps,
  PersonaAccordionPanelStyleProps,
  PersonaAccordionPanelStyles,
  PersonaAccordionTitleButtonProps,
  TeamsActionButtonProps
} from './PersonaAccordionPanel.types';
import { PresenceStrings, PresentUser, User } from './Presence.types';
import { Stack } from '@fluentui/react/lib/Stack';
import { Separator } from '@fluentui/react/lib/Separator';
import { DefaultButton } from '@fluentui/react/lib/Button';
import { Persona, PersonaSize } from '@fluentui/react/lib/Persona';
import { Icon } from '@fluentui/react/lib/Icon';
import { DirectionalHint, IContextualMenuProps } from '@fluentui/react/lib/ContextualMenu';

const getClassNames = classNamesFunction<
  PersonaAccordionPanelStyleProps,
  Required<PersonaAccordionPanelStyles>
>();

export const PersonaAccordionPanelBase = (
  props: PersonaAccordionPanelProps & PersonaAccordionPanelBaseStyleProps
) => {
  const [showActions, setShowActions] = React.useState(props.showActionItemsAlways);

  const styles = getClassNames(props.styles, { theme: props.theme! });

  const personaClickCallback = props.isCollapsible
    ? () => {
        setShowActions(!showActions);
      }
    : () => void 0;

  return (
    <Stack className={styles.PersonaActionsStack} horizontalAlign="start">
      <PersonaAccordionTitleButton onPersonaClick={personaClickCallback} {...props} />
      {showActions && (
        <>
          <Separator className={styles.separator} />
          <TeamsActionButton {...props} />
          <EmailActionButton {...props} />
        </>
      )}
    </Stack>
  );
};

export const PersonaAccordionTitleButton = (props: PersonaAccordionTitleButtonProps) => {
  const [isOpen, setIsOpen] = React.useState(false);
  const styles = getClassNames(props.styles, { theme: props.theme! });
  return (
    <DefaultButton
      className={styles.personaTitleButton}
      onClick={() => {
        setIsOpen(!isOpen);
        props.onPersonaClick();
      }}
      key={'presentUser'}
    >
      <Persona
        imageUrl={props.presentUser.imageUrl}
        text={props.presentUser.displayName}
        showSecondaryText={true}
        secondaryText={props.presentUser.presenceContext}
        size={PersonaSize.size32}
      />
      {props.isCollapsible && <Icon iconName={isOpen ? 'ChevronUp' : 'ChevronDown'} />}
    </DefaultButton>
  );
};

export const TeamsActionButton = (props: TeamsActionButtonProps) => {
  const styles = getClassNames(props.styles, { theme: props.theme! });
  return (
    <DefaultButton
      className={styles.actionButton}
      key={'startTeamsChat'}
      menuProps={getTeamsMenuProps(props.signedInUser, props.presentUser, props.strings, styles)}
      menuIconProps={{ iconName: 'chevronRight' }}
    >
      <Icon className={styles.icon} iconName="TeamsLogo" />
      <span className={styles.actionButtonText}>{props.strings.startTeamsChat}</span>
    </DefaultButton>
  );
};

export const EmailActionButton = (props: EmailActionButtonProps) => {
  const onClickCallBack = () => {
    location.href = 'mailto:' + props.presentUser?.email ?? '';
  };
  const styles = getClassNames(props.styles, { theme: props.theme! });

  return (
    <DefaultButton className={styles.actionButton} onClick={onClickCallBack} key={'email'}>
      <Icon className={styles.icon} iconName="Mail" />
      <span className={styles.actionButtonText}>{props.strings.sendEmail}</span>
    </DefaultButton>
  );
};

const getTeamsMenuProps = (
  signedInUser: User,
  presentUser: PresentUser,
  strings: PresenceStrings,
  styles: IProcessedStyleSet<PersonaAccordionPanelStyles>
): IContextualMenuProps => {
  // reference: https://www.mail-signatures.com/articles/teams-deep-links-in-email-signatures/
  const teamsInDesktopAppChatLink: string = LinkTemplates.teamsDesktopAppChatLink(presentUser.email);
  // reference: https://techcommunity.microsoft.com/t5/microsoft-teams/link-deeplink-to-chat-with-a-user/m-p/284213/highlight/true#M20316
  const teamsInBrowserChatLink: string = LinkTemplates.teamsBrowserChatLink(
    signedInUser?.tenantId,
    signedInUser?.userId,
    presentUser.userId
  );

  return {
    isSubMenu: true,
    directionalHint: DirectionalHint.rightCenter,
    items: [
      {
        key: 'openInBrowser',
        iconProps: { iconName: 'TeamsLogo', className: styles.teamsIcon },
        text: strings.openInBrowser,
        onClick: () => openUrlInNewTab(teamsInBrowserChatLink),
        className: styles.subMenuActionButton
      },
      {
        key: 'openInDesktop',
        iconProps: { iconName: 'TeamsLogo', className: styles.teamsIcon },
        text: strings.openInDesktop,
        onClick: () => openUrlInNewTab(teamsInDesktopAppChatLink),
        className: styles.subMenuActionButton
      }
    ]
  };
};

/**
 * Panel that pops up with details and (optionally) actions for each user.
 */
export const PersonaAccordionPanel = styled(PersonaAccordionPanelBase, getPersonaAccordionPanelStyles);
