/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import { IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';
import { PresenceStrings, PresentUser, User } from './Presence.types';

/**
 * Props for PersonaAccordionPanel
 */
export interface PersonaAccordionPanelProps {
  /**
   * User whose resource presence is being displayed.
   */
  presentUser?: PresentUser;

  /**
   * User who is signed in.
   */
  signedInUser?: User;

  /**
   * Whether or not action items should always be shown.
   */
  showActionItemsAlways?: boolean;

  /**
   * Whether or not the accordion is expandable/collapsible.
   */
  isCollapsible?: boolean;

  /**
   * Localized string resources used by components.
   */
  strings: PresenceStrings;
}

export interface PersonaAccordionPanelBaseStyleProps {
  theme?: ITheme;
  styles?: IStyleFunctionOrObject<PersonaAccordionPanelStyleProps, PersonaAccordionPanelStyles>;
}

export type PersonaAccordionPanelStyleProps = Required<Pick<PersonaAccordionPanelBaseStyleProps, 'theme'>>;

export interface PersonaAccordionPanelStyles {
  PersonaActionsStack?: IStyle;
  personaTitleButton?: IStyle;
  separator?: IStyle;
  actionButton?: IStyle;
  subMenuActionButton?: IStyle;
  icon?: IStyle;
  teamsIcon?: IStyle;
  actionButtonText?: IStyle;
  teamsActionButtonSpan?: IStyle;
  TeamsMenuStack?: IStyle;
}

export interface PersonaAccordionTitleButtonProps extends PersonaAccordionPanelBaseStyleProps {
  onPersonaClick: () => void;
  isCollapsible?: boolean;
  presentUser?: PresentUser;
  strings: PresenceStrings;
}

export interface TeamsActionButtonProps extends PersonaAccordionPanelBaseStyleProps {
  presentUser?: PresentUser;
  signedInUser?: User;
  strings: PresenceStrings;
}

export interface EmailActionButtonProps extends PersonaAccordionPanelBaseStyleProps {
  presentUser?: PresentUser;
  strings: PresenceStrings;
}

export type TemplateFunctionInput = Array<string | number | object>;
export type TemplateFunction = (...values: TemplateFunctionInput) => string;

export function template(strings: TemplateStringsArray, ...keys: Array<number | string>): TemplateFunction {
  return (...values: TemplateFunctionInput): string => {
    const dict = values[values.length - 1] || {};
    const result = [strings[0]];
    keys.forEach((key, i) => {
      const value = typeof key === 'number' ? values[key] : dict[key];
      result.push(value, strings[i + 1]);
    });
    return result.join('');
  };
}

export const LinkTemplates: { [name: string]: TemplateFunction } = {
  teamsDesktopAppChatLink: template`https://teams.microsoft.com/l/chat/0/0?users=${0}`,
  teamsBrowserChatLink: template`https://teams.microsoft.com/_?tenantId=${0}#/conversations/19:${1}_${2}@unq.gbl.spaces?ctx=chat`
};

export function openUrlInNewTab(url: string): void {
  window.open(url, '_blank');
}
