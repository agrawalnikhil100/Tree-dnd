/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as React from 'react';
import { shallow } from 'enzyme';
import { PersonaAccordionPanel } from './PersonaAccordionPanel';
import { PersonaCoinForWithAccordionBase, PresenceBase, PresencePersona } from './Presence';
import { PersonaCoinForWithAccordionProps, PresenceProps } from './Presence.types';
import { getMockPresentUsers, MockPresenceStrings } from './PresenceMockData';
import { Facepile } from '@fluentui/react/lib/Facepile';
import { List } from '@fluentui/react/lib/List';
import { TooltipHost } from '@fluentui/react/lib/Tooltip';
import { Persona } from '@fluentui/react/lib/Persona';
import { DefaultButton } from '@fluentui/react/lib/Button';
import { Callout } from '@fluentui/react/lib/Callout';

describe('Facepile for currently present users', () => {
  let props: PresenceProps;
  const mockPersonaCoinForWithAccordionProps: PersonaCoinForWithAccordionProps = {
    presentUser: getMockPresentUsers()[0],
    strings: MockPresenceStrings
  };

  beforeEach(() => {
    props = {
      presentUsers: getMockPresentUsers(1),
      strings: MockPresenceStrings
    };
  });
  afterEach(() => {
    jest.clearAllMocks();
  });

  it('Should verify the rendering of inline facepile', () => {
    const component = shallow(<PresenceBase {...props} />);
    expect(component.find(Facepile).length).toBe(1);
    expect(component.find(Facepile).props().personas.length).toBe(1);
    expect(component.find(Facepile).props().personas).toMatchSnapshot();
    expect(component.find(Facepile).props()).toMatchSnapshot();
    expect(component.find(List).length).toBe(0);
  });

  it('Should verify custom rendering of personas inside inline facepile', () => {
    const component = shallow(<PresencePersona {...getMockPresentUsers()[0]} />);
    expect(component.find(TooltipHost).length).toBe(1);
    const toolTipHost = component.find(TooltipHost);
    expect(component.find(Persona).length).toBe(1);
    const personaProps = component.find(Persona).props();
    expect(personaProps.text).not.toBe(null);
    expect(personaProps.hidePersonaDetails).toBe(true);
  });

  it('Should verify the rendering of command bar facepile', () => {
    props.showAccordion = true;
    const component = shallow(<PresenceBase {...props} />);
    expect(component.find(Facepile).length).toBe(1);
    expect(component.find(Facepile).props().personas.length).toBe(1);
    expect(component.find(Facepile).props().personas).toMatchSnapshot();
    expect(component.find(Facepile).props()).toMatchSnapshot();
    expect(component.find(List).length).toBe(0);
  });

  it('Should verify custom rendering of personas inside command bar facepile', () => {
    const component = shallow(<PersonaCoinForWithAccordionBase {...mockPersonaCoinForWithAccordionProps} />);
    expect(component.find(DefaultButton).length).toBe(1);
    expect(component.find(Persona).length).toBe(1);
    const personaProps = component.find(Persona).props();
    expect(personaProps.text).not.toBe(null);
    expect(personaProps.hidePersonaDetails).toBe(true);
  });

  it('Should verify clicking persona inside command bar facepile opens up persona accordion panel', () => {
    const component = shallow(<PersonaCoinForWithAccordionBase {...mockPersonaCoinForWithAccordionProps} />);
    expect(component.find(DefaultButton).length).toBe(1);
    const personaButton = component.find(DefaultButton);
    personaButton.simulate('Click');
    expect(component.find(Callout).length).toBe(1);
    expect(component.find(PersonaAccordionPanel).length).toBe(1);
  });

  it('Should verify facepile shows overflow callout with list of user personas', () => {
    props.presentUsers = getMockPresentUsers(4);
    const component = shallow(<PresenceBase {...props} />);
    expect(component.find(Facepile).length).toBe(1);
    expect(component.find(List).length).toBe(1);
  });
});
