/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import 'jest';
import * as React from 'react';
import * as ReactTestUtils from 'react-dom/test-utils';
import { IInputComponentProps, simulateInput } from '../../utilities/tests';
import { IntegerField, NaturalNumberField } from './NumericalField';

describe('IntegerField', () => {
  const AdaptedIntegerField = (props: IInputComponentProps<number>) => (
    <IntegerField value={props.value} onBlurred={props.onChanged} />
  );

  it('should allow integers to be input', () => {
    expect(simulateInput(AdaptedIntegerField, 321, '1234')).toEqual({
      hasBeenChanged: true,
      lastValue: 1234
    });

    expect(simulateInput(AdaptedIntegerField, 321, '-1234')).toEqual({
      hasBeenChanged: true,
      lastValue: -1234
    });

    expect(simulateInput(AdaptedIntegerField, 321, '-12.0')).toEqual({
      hasBeenChanged: true,
      lastValue: -12
    });

    expect(simulateInput(AdaptedIntegerField, 321, '0')).toEqual({
      hasBeenChanged: true,
      lastValue: 0
    });
  });

  it('should never emit onChanged if set to a non-integer value as its first action', () => {
    expect(simulateInput(AdaptedIntegerField, 321, 'hello')).toEqual({
      hasBeenChanged: false
    });

    expect(simulateInput(AdaptedIntegerField, 321, '12.34')).toEqual({
      hasBeenChanged: false
    });
  });

  it('should revert back to the previous value if non-integer input is given', () => {
    expect(simulateInput(AdaptedIntegerField, 321, '1234', 'hello')).toEqual({
      hasBeenChanged: true,
      lastValue: 1234
    });

    expect(simulateInput(AdaptedIntegerField, 321, '1', '12', '12.', '12.3', '12.34')).toEqual({
      hasBeenChanged: true,
      lastValue: 12
    });
  });

  it('should allow for comma-separated values', () => {
    expect(simulateInput(AdaptedIntegerField, 321, '123,456,789')).toEqual({
      hasBeenChanged: true,
      lastValue: 123456789
    });
  });

  it('should preserve 0 input', () => {
    const nfRef = React.createRef<NaturalNumberField>();
    ReactTestUtils.renderIntoDocument(<NaturalNumberField ref={nfRef} value={0} />);
    const nfElement = ReactTestUtils.findRenderedDOMComponentWithTag(nfRef.current, 'input') as Element;
    ReactTestUtils.Simulate.blur(nfElement);
    expect(nfRef.current.state.formattedValue).toEqual('0');
  });
});

describe('NaturalNumberField', () => {
  const AdaptedNaturalNumberField = (props: IInputComponentProps<number>) => (
    <NaturalNumberField value={props.value} onBlurred={props.onChanged} />
  );

  it('should allow natural numbers to be input', () => {
    expect(simulateInput(AdaptedNaturalNumberField, 321, '1234')).toEqual({
      hasBeenChanged: true,
      lastValue: 1234
    });

    expect(simulateInput(AdaptedNaturalNumberField, 321, '12.0')).toEqual({
      hasBeenChanged: true,
      lastValue: 12
    });

    expect(simulateInput(AdaptedNaturalNumberField, 321, '0')).toEqual({
      hasBeenChanged: true,
      lastValue: 0
    });
  });

  it('should never emit onChanged if set to a non-natural value as its first action', () => {
    expect(simulateInput(AdaptedNaturalNumberField, 321, 'hello')).toEqual({
      hasBeenChanged: false
    });

    expect(simulateInput(AdaptedNaturalNumberField, 321, '12.34')).toEqual({
      hasBeenChanged: false
    });

    expect(simulateInput(AdaptedNaturalNumberField, 321, '-1234')).toEqual({
      hasBeenChanged: false
    });
  });

  it('should revert back to the previous value if non-natural input is given', () => {
    expect(simulateInput(AdaptedNaturalNumberField, 321, '1234', 'hello')).toEqual({
      hasBeenChanged: true,
      lastValue: 1234
    });

    expect(simulateInput(AdaptedNaturalNumberField, 321, '1', '12', '12.3', '12.34')).toEqual({
      hasBeenChanged: true,
      lastValue: 12
    });

    expect(simulateInput(AdaptedNaturalNumberField, 321, '1', '12', '-12', '-123')).toEqual({
      hasBeenChanged: true,
      lastValue: 12
    });
  });

  it('should allow for comma-separated values', () => {
    expect(simulateInput(AdaptedNaturalNumberField, 321, '123,456,789')).toEqual({
      hasBeenChanged: true,
      lastValue: 123456789
    });
  });
});
