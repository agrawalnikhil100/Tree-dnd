/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { Toggle } from '@fluentui/react/lib/Toggle';
import * as React from 'react';
import { NaturalNumberField, NumberField } from '../';

export interface INumberFieldExampleState {
  readonly currentValue: number | undefined;
  readonly currentPrecision: number | undefined;
  readonly formatValue: boolean;
}

export class NumberFieldExample extends React.Component<{}, INumberFieldExampleState> {
  constructor(props: {}) {
    super(props);

    this.state = {
      currentValue: 1234.56,
      currentPrecision: undefined,
      formatValue: true
    };
  }

  public render(): JSX.Element {
    return (
      <div style={{ display: 'flex', flexDirection: 'column' }}>
        <Toggle
          label="Format value"
          defaultChecked={this.state.formatValue}
          onChanged={checked => this.setState({ formatValue: checked })}
        />
        <div style={{ display: 'flex' }}>
          <NumberField
            value={this.state.currentValue}
            onBlurred={this.onValueChanged}
            maxPrecision={this.state.currentPrecision}
            formatValue={this.state.formatValue}
            textFieldProps={{
              label: 'Value: ',
              styles: { root: { marginRight: '8px ', minWidth: '300px' } }
            }}
          />
          <NaturalNumberField
            value={this.state.currentPrecision}
            onBlurred={this.onPrecisionChanged}
            formatValue={this.state.formatValue}
            textFieldProps={{ label: 'Max precision: ' }}
          />
        </div>
        <p>Last valid value: {this.state.currentValue}</p>
      </div>
    );
  }

  private onValueChanged = (newValue: number | undefined) => {
    this.setState({
      currentValue: newValue
    });
  };

  private onPrecisionChanged = (newPrecision: number | undefined) => {
    this.setState({
      currentPrecision: newPrecision,
      currentValue: Number(this.state.currentValue.toFixed(newPrecision))
    });
  };
}
