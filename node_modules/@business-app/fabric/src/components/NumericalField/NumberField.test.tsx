/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import 'jest';
import * as React from 'react';
import { IInputComponentProps, simulateInput } from '../../utilities/tests';
import { NumberField } from './NumberField';

describe('NumberField', () => {
  const AdaptedNumberField = (props: IInputComponentProps<number>) => (
    <NumberField value={props.value} onBlurred={props.onChanged} />
  );

  it('should allow numbers to be input', () => {
    expect(simulateInput(AdaptedNumberField, 321, '1234')).toEqual({
      hasBeenChanged: true,
      lastValue: 1234
    });

    expect(simulateInput(AdaptedNumberField, 321, '-1234')).toEqual({
      hasBeenChanged: true,
      lastValue: -1234
    });

    expect(simulateInput(AdaptedNumberField, 321, '12.34')).toEqual({
      hasBeenChanged: true,
      lastValue: 12.34
    });

    expect(simulateInput(AdaptedNumberField, 321, '0')).toEqual({
      hasBeenChanged: true,
      lastValue: 0
    });
  });

  it('should never emit onChanged if set to a non-numerical value as its first action', () => {
    expect(simulateInput(AdaptedNumberField, 321, 'hello')).toEqual({
      hasBeenChanged: false
    });
  });

  it('should revert back to the previous value if non-numerical input is given', () => {
    expect(simulateInput(AdaptedNumberField, 321, '1234', 'hello')).toEqual({
      hasBeenChanged: true,
      lastValue: 1234
    });

    expect(
      simulateInput(
        AdaptedNumberField,
        321,
        '1',
        '12',
        '123',
        '123g',
        'h123g',
        'h123',
        'h125',
        'h25',
        '25',
        '2f5'
      )
    ).toEqual({
      hasBeenChanged: true,
      lastValue: 25
    });
  });

  it('should allow for comma-separated values', () => {
    expect(simulateInput(AdaptedNumberField, 321, '123,456,789')).toEqual({
      hasBeenChanged: true,
      lastValue: 123456789
    });
  });

  describe('maxPrecision', () => {
    const PrecisionNumberField = (maxPrecision: number) => (props: IInputComponentProps<number>) => (
      <NumberField value={props.value} onBlurred={props.onChanged} maxPrecision={maxPrecision} />
    );

    it('should not allow for values with greater precision than max precision', () => {
      expect(simulateInput(PrecisionNumberField(4), 123, '123.12', '123.1234', '123.123456')).toEqual({
        hasBeenChanged: true,
        lastValue: 123.1234
      });

      expect(simulateInput(PrecisionNumberField(6), 0.12, '.123', '.123456', '.123456789')).toEqual({
        hasBeenChanged: true,
        lastValue: 0.123456
      });
    });

    it('should not allow for fractional components if provided with a precision of zero', () => {
      expect(simulateInput(PrecisionNumberField(0), 0, '123', '123.12', '123.1234', '123.123456')).toEqual({
        hasBeenChanged: true,
        lastValue: 123
      });
    });
  });
});
