/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { DefaultButton, IButton } from '@fluentui/react/lib/Button';
import { Checkbox } from '@fluentui/react/lib/Checkbox';
import { Dropdown } from '@fluentui/react/lib/Dropdown';
import { Modal } from '@fluentui/react/lib/Modal';
import { Overlay } from '@fluentui/react/lib/Overlay';
import { Spinner, SpinnerSize } from '@fluentui/react/lib/Spinner';
import { mergeStyles } from '@fluentui/react/lib/Styling';
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { SettingsExplorer } from '../SettingsExplorer';
import { SettingsItem } from '../SettingsItem';
import { SettingsPage } from '../SettingsPage';
import { dateFormatOptions, languageOptions, timeFormatOptions } from './ExampleInput';

interface ISettingsExplorerExampleState {
  modalOpen: boolean;
  asyncSettingsData: string;
}

const dropdownOptions = [
  { key: 'pug', text: 'pug' },
  { key: 'poodle', text: 'poodle' },
  { key: 'cocker spaniel', text: 'cocker spaniel' },
  { key: 'samoyed', text: 'samoyed' }
];

const asyncSettingPageId = 'asyncSettingPage';

export class SettingsExplorerBasicExample extends React.Component<{}, ISettingsExplorerExampleState> {
  constructor(props: {}) {
    super(props);
    this.state = {
      modalOpen: false,
      asyncSettingsData: ''
    };
  }
  public readonly buttonRef = React.createRef<IButton>();

  public render(): JSX.Element {
    return (
      <div>
        <DefaultButton
          onClick={() => this._openSettingsExplorer(true)}
          text="One Tiered"
          className={mergeStyles({
            width: 200
          })}
        />

        <Modal
          isOpen={this.state.modalOpen}
          onDismiss={() => this._openSettingsExplorer(false)}
          closeButtonAriaLabel="Cancel"
        >
          <SettingsExplorer
            name={'General Settings'}
            saveButtonProps={{
              onClick: () => {
                alert('save clicked');
              },
              text: 'Save'
            }}
            cancelButtonProps={{
              onClick: () => {
                this._openSettingsExplorer(false);
              },
              text: 'Discard'
            }}
            exitButtonProps={{
              onClick: () => this._openSettingsExplorer(false),
              ariaLabel: 'Clear'
            }}
            onPageSelected={id => {
              if (id === asyncSettingPageId) {
                this.loadAsyncSetting();
              }
            }}
            {...this.props}
          >
            <SettingsPage name={'Language and time'}>
              <SettingsItem>
                <Dropdown label={'Language'} options={languageOptions} defaultSelectedKey={'en-US'} />
              </SettingsItem>
              <SettingsItem>
                <Dropdown label={'Date format'} options={dateFormatOptions} defaultSelectedKey={'M/D/YYYY'} />
              </SettingsItem>
              <SettingsItem>
                <Dropdown
                  label={'Time format'}
                  options={timeFormatOptions}
                  defaultSelectedKey={'1:01 AM - 11:59 PM'}
                />
              </SettingsItem>
              <SettingsItem>
                <Dropdown label={'Current timezone'} options={dropdownOptions} defaultSelectedKey={'pug'} />
              </SettingsItem>
            </SettingsPage>
            <SettingsPage name={'Disabled Page'} disabled={true}>
              <SettingsItem name={'Disabled setting'}>
                <p>You should never be able to see this.</p>
              </SettingsItem>
            </SettingsPage>
            <SettingsPage name={'Async Setting'} id={asyncSettingPageId}>
              {this.state.asyncSettingsData ? (
                <>
                  <p>{this.state.asyncSettingsData}</p>
                  <DefaultButton
                    ariaLabel={'Refresh'}
                    componentRef={this.buttonRef}
                    onClick={() => {
                      this.setState(
                        {
                          asyncSettingsData: ''
                        },
                        () => {
                          this.loadAsyncSetting();
                        }
                      );
                    }}
                  >
                    Refresh
                  </DefaultButton>
                </>
              ) : (
                <Overlay
                  styles={{
                    root: {
                      backgroundColor: '#ffffff',
                      opacity: 0.7,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center'
                    }
                  }}
                >
                  <Spinner size={SpinnerSize.large} label={'Loading'} />
                </Overlay>
              )}
            </SettingsPage>
            <SettingsPage name={'Notifications'}>
              <SettingsItem name={'Newsletter'}>
                <Dropdown
                  label={'Choose your country/region:'}
                  options={dropdownOptions}
                  defaultValue={'pug'}
                />
                <br />
                <Checkbox label={'Send me the latest PowerApps updates, tips, and offers'} />
              </SettingsItem>
              <SettingsItem name={'App usage emails'}>
                <Checkbox label={'Check here to receive app usage emails'} />
              </SettingsItem>
            </SettingsPage>
          </SettingsExplorer>
        </Modal>
      </div>
    );
  }

  private loadAsyncSetting = () => {
    setTimeout(() => {
      this.setState({
        asyncSettingsData: 'The quick brown fox jumps over the lazy asynchronous page.'
      });
      this.buttonRef.current.focus();
    }, 2000);
  };

  private _openSettingsExplorer = (status: boolean) => {
    this.setState({ modalOpen: status });
  };
}
