/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as Enzyme from 'enzyme';
import 'jest';
import { DefaultButton, IconButton, PrimaryButton } from '@fluentui/react/lib/Button';
import { Label } from '@fluentui/react/lib/Label';
import * as React from 'react';
import { ExplorerPanel } from './ExplorerPanel';
import { SettingsExplorerBase } from './SettingsExplorer.base';
import { ISettingsExplorerProps, ISettingsExplorerState } from './SettingsExplorer.types';
import { SettingsItem } from './SettingsItem';
import { SettingsPage } from './SettingsPage';

describe('Settings component with children', () => {
  let SettingsExplorerProps: ISettingsExplorerProps;
  let wrapper: Enzyme.ShallowWrapper<
    React.PropsWithChildren<ISettingsExplorerProps>,
    ISettingsExplorerState,
    SettingsExplorerBase
  >;
  let mountedWrapper: Enzyme.ReactWrapper<
    React.PropsWithChildren<ISettingsExplorerProps>,
    ISettingsExplorerState,
    SettingsExplorerBase
  >;
  const onSaveButtonClick = jest.fn();
  const onCancelButtonClick = jest.fn();
  const onExitButtonClick = jest.fn();
  const onPageSelected = jest.fn();

  beforeEach(() => {
    SettingsExplorerProps = {
      name: 'General Settings',
      saveButtonProps: {
        onClick: onSaveButtonClick,
        text: 'Save'
      },
      cancelButtonProps: {
        onClick: onCancelButtonClick,
        text: 'Cancel'
      },
      exitButtonProps: {
        onClick: onExitButtonClick,
        ariaLabel: 'Exit'
      }
    };
    wrapper = Enzyme.shallow(
      <SettingsExplorerBase {...SettingsExplorerProps}>
        <SettingsPage name={'First'} />
        <SettingsPage name={'Second'} />
      </SettingsExplorerBase>
    );
  });

  it('should initialize the state to default select the first element in the list if no initial id is provided', () => {
    expect(wrapper.state()).toHaveProperty('selectedKey');
    expect(wrapper.state().selectedKey).toBe('0');
  });

  it('should initialize the state to default select the first non-disabled element in the list if no id is provided', () => {
    wrapper = Enzyme.shallow(
      <SettingsExplorerBase {...SettingsExplorerProps}>
        <SettingsPage name={'First'} id="id1" disabled={true} />
        <SettingsPage name={'Second'} id="id2" />
      </SettingsExplorerBase>
    );
    expect(wrapper.state()).toHaveProperty('selectedKey');
    expect(wrapper.state().selectedKey).toBe('id2');
  });

  it('should initialize the state to default select the initialSelected page if provided', () => {
    SettingsExplorerProps.initialSelectedPageId = 'id2';
    mountedWrapper = Enzyme.mount(
      <SettingsExplorerBase {...SettingsExplorerProps}>
        <SettingsPage name={'First'} id="id1" />
        <SettingsPage name={'Second'} id="id2" />
        <SettingsPage name={'Third'} id="id3" />
      </SettingsExplorerBase>
    );
    expect(mountedWrapper.state()).toHaveProperty('selectedKey');
    expect(mountedWrapper.state().selectedKey).toBe('id2');
  });

  it('should update the current selected key on button click of different key', () => {
    const lastButton = mountedWrapper.find(ExplorerPanel).find({ text: 'Second' }).first();
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    lastButton.props().onClick({} as React.MouseEvent<any>);
    expect(mountedWrapper.state().selectedKey).toBe('id2');
  });

  it('should allow a custom key prop to override the index-based key', () => {
    const firstKey = 'firstKey';
    mountedWrapper = Enzyme.mount(
      <SettingsExplorerBase {...SettingsExplorerProps}>
        <SettingsPage name={'First'} id={firstKey} />
        <SettingsPage name={'Second'} />
      </SettingsExplorerBase>
    );
    expect(mountedWrapper.state().selectedKey).toBe(firstKey);
  });

  it('should render a single side panel', () => {
    expect(mountedWrapper.find(ExplorerPanel)).toHaveLength(1);
  });

  it('should render the same number of side panel buttons as there are child props', () => {
    const panelButtons = mountedWrapper.find(ExplorerPanel).find(DefaultButton);
    expect(panelButtons.exists()).toBeTruthy();
    expect(panelButtons).toHaveLength(React.Children.count(mountedWrapper.props().children));
  });

  it('should render panel buttons with the same names as the child props', () => {
    const sidePanel = mountedWrapper.find(ExplorerPanel);
    expect(sidePanel.find({ text: 'First' }).exists()).toBeTruthy();
    expect(sidePanel.find({ text: 'Second' }).exists()).toBeTruthy();
  });

  it('should render a footer with a save and cancel button', () => {
    mountedWrapper = Enzyme.mount(
      <SettingsExplorerBase {...SettingsExplorerProps}>
        <SettingsPage name={'First'} id="id1" disabled={true} />
        <SettingsPage name={'Second'} id="id2" />
      </SettingsExplorerBase>
    );

    const pageContents = mountedWrapper.find(SettingsPage);
    expect(pageContents.exists()).toBeTruthy();
    expect(pageContents.find(PrimaryButton).exists()).toBeTruthy();
    expect(pageContents.find(DefaultButton).exists()).toBeTruthy();
    expect(pageContents.find({ text: 'Save' }).exists()).toBeTruthy();
    expect(pageContents.find({ text: 'Cancel' }).exists()).toBeTruthy();
  });

  it('should call onPageSelected for when a page is selected', () => {
    const firstKey = 'id1';
    const secondKey = 'id2';

    mountedWrapper = Enzyme.mount(
      <SettingsExplorerBase {...SettingsExplorerProps} onPageSelected={onPageSelected}>
        <SettingsPage name={'First'} id={firstKey} />
        <SettingsPage name={'Second'} id={secondKey} />
      </SettingsExplorerBase>
    );
    // initial page selection callback
    expect(onPageSelected).toHaveBeenCalledWith(firstKey);

    const sidePanel = mountedWrapper.find(ExplorerPanel);
    sidePanel
      .find(DefaultButton)
      .last()
      .props()
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      .onClick({} as React.MouseEvent<any>);

    // page selection callback
    expect(onPageSelected).toHaveBeenCalledWith(secondKey);
  });

  it('should call save and cancel when corresponding buttons are clicked', () => {
    const buttons = mountedWrapper.find(SettingsPage).find(DefaultButton);
    expect(buttons).toHaveLength(2);

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    buttons.forEach(button => button.props().onClick({} as React.MouseEvent<any>));

    expect(onSaveButtonClick).toHaveBeenCalled();
    expect(onCancelButtonClick).toHaveBeenCalled();
  });

  it('should render a close button to exit the explorer', () => {
    const pageHeader = mountedWrapper.find(SettingsPage);
    expect(pageHeader.exists()).toBeTruthy();
    const exitButton = pageHeader.find(IconButton);
    expect(exitButton.exists()).toBeTruthy();
    expect(exitButton.find({ ariaLabel: 'Exit' }).exists()).toBeTruthy();

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    exitButton.props().onClick({} as React.MouseEvent<any>);
    expect(onExitButtonClick).toHaveBeenCalled();
  });

  it('should only have a single settings page being rendered at a time', () => {
    const pageContents = mountedWrapper.find(SettingsPage);
    expect(pageContents.exists()).toBeTruthy();

    const sidePanel = mountedWrapper.find(ExplorerPanel);
    sidePanel
      .find(DefaultButton)
      .last()
      .props()
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      .onClick({} as React.MouseEvent<any>);
    expect(pageContents.find(SettingsPage)).toHaveLength(1);
  });

  it('should render the children of each settings page', () => {
    mountedWrapper = Enzyme.mount(
      <SettingsExplorerBase {...SettingsExplorerProps}>
        <SettingsPage name={'First'}>
          <SettingsItem name={'Settings Page with label'}>
            <Label>some text</Label>
          </SettingsItem>
        </SettingsPage>
        <SettingsPage name={'Second'} />
      </SettingsExplorerBase>
    );

    const label = mountedWrapper.find(SettingsPage).find(SettingsPage).find(SettingsItem).find(Label);
    expect(label.exists()).toBeTruthy();
  });
});
