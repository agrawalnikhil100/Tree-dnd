/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as Enzyme from 'enzyme';
import 'jest';
import * as React from 'react';
import { ExplorerPanel } from './ExplorerPanel';
import { SettingsExplorer } from './SettingsExplorer';
import { ISettingsExplorerProps } from './SettingsExplorer.types';
import { SettingsPage } from './SettingsPage';
import { TwoTierSettingsExplorerBase } from './TwoTierSettingsExplorer.base';

const TwoTierSettingsExplorerProps: ISettingsExplorerProps = {
  name: 'General Settings',
  saveButtonProps: {
    onClick: () => null,
    text: 'Save'
  },
  cancelButtonProps: {
    onClick: () => null,
    text: 'Cancel'
  },
  exitButtonProps: {
    onClick: () => null,
    ariaLabel: 'Exit'
  }
};

let wrapper: Enzyme.ShallowWrapper<ISettingsExplorerProps>;

describe('Two tiered settings component', () => {
  beforeEach(() => {
    wrapper = Enzyme.shallow(
      <TwoTierSettingsExplorerBase {...TwoTierSettingsExplorerProps}>
        <SettingsExplorer name={'First'}>
          <SettingsPage name={'a'} />
          <SettingsPage name={'b'} />
        </SettingsExplorer>
        <SettingsExplorer name={'Second'}>
          <SettingsPage name={'c'} />
          <SettingsPage name={'d'} />
        </SettingsExplorer>
      </TwoTierSettingsExplorerBase>
    );
  });

  it('should render as expected', () => {
    expect(wrapper).toMatchSnapshot();
  });
});

describe('Two tiered settings component with custom key props', () => {
  beforeEach(() => {
    wrapper = Enzyme.shallow(
      <TwoTierSettingsExplorerBase {...TwoTierSettingsExplorerProps}>
        <SettingsExplorer name={'First'} id={'First'}>
          <SettingsPage name={'a'} id={'a'} />
          <SettingsPage name={'b'} />
        </SettingsExplorer>
        <SettingsExplorer name={'Second'} id={'Second'}>
          <SettingsPage name={'c'} />
          <SettingsPage name={'d'} id={'a'} />
        </SettingsExplorer>
      </TwoTierSettingsExplorerBase>
    );
  });

  it('should render as expected', () => {
    expect(wrapper).toMatchSnapshot();
  });
});
