/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import * as React from 'react';
import { ISettingsPageProps } from './SettingsPage.types';
import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import { IButtonStyles } from '@fluentui/react/lib/Button';
import { IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';

export interface IExplorerPanelProps {
  /**
   * List of pages that will populate the buttons (tabs) in the panel.
   */
  pageList: ISettingsPageProps[];

  /**
   * Key of the currently selected page.
   */
  selectedKey: number | string;

  /**
   * Ref of the parent div, used for calculating when the window has grown enough for the panel to un-collapse.
   */
  parentRef: React.MutableRefObject<HTMLDivElement>;

  /**
   * Callback function for clicking on any button in the pageList.
   */
  handleClick: (index: number) => void;

  /**
   * Header text for the ExplorerPanel.
   */
  header?: string;

  /**
   * Prevents the panel from collapsing on resize events.
   */
  disableCollapsing?: boolean;

  /**
   * Call to provide customized styling that will layer on top of the variant rules.
   */
  styles?: IStyleFunctionOrObject<IExplorerPanelStyleProps, IExplorerPanelStyles>;

  /**
   * Theme provided by High-Order Component.
   */
  theme?: ITheme;
}

export interface IExplorerPanelStyles {
  /**
   * Style for the root container div element.
   */
  root: IStyle;

  /**
   * Style for the header container div element.
   */
  header: IStyle;

  /**
   * Style for the button for the currently selected page.
   */
  selectedButton: IStyle;

  /**
   * Style for the buttons for all the pages not currently open.
   */
  notSelectedButton: IStyle;

  /**
   * Styling for the subComponents.
   */
  subComponentStyles: IExplorerPanelSubComponentStyles;
}

export type IExplorerPanelStyleProps = Pick<IExplorerPanelProps, 'theme'> & {
  /**
   * Whether the panel is expanded or collapsed.
   */
  isCollapsed: boolean;
};

export interface IExplorerPanelSubComponentStyles {
  /**
   * Styling for the buttons.
   */
  buttonStyles: IStyleFunctionOrObject<{}, IButtonStyles>;
}
