/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { ExplorerPanel } from './ExplorerPanel';
import { ISettingsPageProps } from './SettingsPage.types';
import {
  ISettingsExplorerProps,
  ISettingsExplorerStyleProps,
  ITwoTierSettingsExplorerStyles,
  SettingsPageInfo
} from './SettingsExplorer.types';

const getClassNames = classNamesFunction<ISettingsExplorerStyleProps, ITwoTierSettingsExplorerStyles>();

export const TwoTierSettingsExplorerBase: React.FunctionComponent<ISettingsExplorerProps> = props => {
  const {
    name,
    disablePanelCollapsing,
    styles,
    theme,
    children,
    saveButtonProps,
    cancelButtonProps,
    exitButtonProps
  } = props;
  const classnames = getClassNames(styles, { theme });
  const [primarySelectedIndex, setPrimarySelectedIndex] = React.useState(0);
  const ref = React.useRef<HTMLDivElement>();

  const primaryPages = React.useMemo(
    () =>
      React.Children.map(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        React.Children.toArray(children as any),
        (page, index: number) => {
          const key = page?.props?.id ?? index.toString();
          const settingsPage: SettingsPageInfo = { name: page?.props?.name, id: key, page };
          return settingsPage;
        }
      ),
    [children]
  );

  let selectedPage: JSX.Element = primaryPages?.[primarySelectedIndex]?.page;
  const addedProps: Partial<ISettingsPageProps> = {
    saveButtonProps,
    cancelButtonProps,
    exitButtonProps
  };
  if (React.isValidElement(selectedPage)) {
    selectedPage = React.cloneElement(
      selectedPage,
      addedProps,
      (selectedPage?.props as React.PropsWithChildren<{}>)?.children
    );
  }

  return (
    <div className={classnames.root} ref={ref}>
      <ExplorerPanel
        parentRef={ref}
        header={name}
        pageList={primaryPages}
        selectedKey={primaryPages[primarySelectedIndex].id}
        handleClick={setPrimarySelectedIndex}
        disableCollapsing={disablePanelCollapsing}
      />
      <div className={classnames.pageContainer}>{selectedPage}</div>
    </div>
  );
};
