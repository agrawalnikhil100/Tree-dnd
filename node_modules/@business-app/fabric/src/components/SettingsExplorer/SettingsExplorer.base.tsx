/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IProcessedStyleSet, mergeStyles } from '@fluentui/react/lib/Styling';
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { ExplorerPanel } from './ExplorerPanel';
import { SettingsPage } from './SettingsPage';
import { ISettingsPageProps } from './SettingsPage.types';
import {
  ISettingsExplorerProps,
  ISettingsExplorerState,
  ISettingsExplorerStyleProps,
  ISettingsExplorerStyles,
  SettingsPageInfo
} from './SettingsExplorer.types';

const getClassNames = classNamesFunction<ISettingsExplorerStyleProps, ISettingsExplorerStyles>();

export class SettingsExplorerBase extends React.PureComponent<
  ISettingsExplorerProps,
  ISettingsExplorerState
> {
  private _classnames: IProcessedStyleSet<ISettingsExplorerStyles>;
  private _ref = React.createRef<HTMLDivElement>();

  constructor(props: ISettingsExplorerProps) {
    super(props);
    const pages = this._getPageList(this.props.children);
    let initialKey: string;
    if (props.initialSelectedPageId) {
      initialKey = props.initialSelectedPageId;
    } else {
      if (pages && pages.length) {
        // find first enabled page
        for (const page of pages) {
          if (page.id && page.disabled !== true) {
            initialKey = page.id;
            break;
          }
        }
      }
    }

    this.state = { selectedKey: initialKey };
  }

  public componentDidMount() {
    if (this.props.onPageSelected) {
      this.props.onPageSelected(this.state.selectedKey);
    }
  }

  public render() {
    const { styles, theme } = this.props;
    this._classnames = getClassNames(styles, { theme });
    const pageList = this._getPageList(this.props.children);

    return (
      pageList &&
      pageList.length && (
        <div className={this._classnames.root} ref={this._ref}>
          {this._renderCategoriesPanel(pageList)}
          {this._renderPageContents(pageList)}
        </div>
      )
    );
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  private _getPageList(settingsPages: any): SettingsPageInfo[] {
    return React.Children.map<SettingsPageInfo, React.Component<ISettingsPageProps>>(
      React.Children.toArray(settingsPages),
      (page, index) => {
        const itemKey = page.props.id || index.toString();
        const pageInfo: SettingsPageInfo = { ...page.props, id: itemKey, page };
        return pageInfo;
      }
    );
  }

  private _renderCategoriesPanel(pageList: SettingsPageInfo[]) {
    return (
      <ExplorerPanel
        parentRef={this._ref}
        header={this.props.name}
        pageList={pageList}
        selectedKey={this.state.selectedKey}
        handleClick={this._onPageSelected}
        disableCollapsing={this.props.disablePanelCollapsing}
      />
    );
  }

  private _renderPageContents(pageList: SettingsPageInfo[]) {
    const { saveButtonProps, cancelButtonProps, exitButtonProps } = this.props;

    const index = pageList?.map(page => page.id)?.indexOf(this.state.selectedKey);
    const selectedItem = pageList?.[index];

    return (
      <div className={this._classnames.pageContainer}>
        <SettingsPage
          name={selectedItem?.name}
          saveButtonProps={saveButtonProps}
          cancelButtonProps={cancelButtonProps}
          exitButtonProps={exitButtonProps}
          {...selectedItem?.page?.props}
        />
      </div>
    );
  }

  private _onPageSelected = (index: number) => {
    const pageList = this._getPageList(this.props.children);
    const key = pageList[index].id;
    if (this.props.onPageSelected) {
      this.props.onPageSelected(key);
    }
    this.setState({ selectedKey: key });
  };
}
