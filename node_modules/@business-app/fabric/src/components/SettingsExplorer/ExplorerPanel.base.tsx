/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import { DefaultButton } from '@fluentui/react/lib/Button';
import { FocusZone } from '@fluentui/react/lib/FocusZone';
import * as React from 'react';
import { IExplorerPanelProps, IExplorerPanelStyleProps, IExplorerPanelStyles } from './ExplorerPanel.types';
import { minWidth } from './ExplorerPanel.styles';

const getClassNames = classNamesFunction<IExplorerPanelStyleProps, IExplorerPanelStyles>();

export const ExplorerPanelBase: React.FunctionComponent<IExplorerPanelProps> = props => {
  const { disableCollapsing, parentRef, selectedKey, handleClick, pageList, header, styles, theme } = props;
  const [isCollapsed, setIsCollapsed] = React.useState(false);
  const ref = React.useRef<HTMLDivElement>();
  const boundaryWidthRef = React.useRef(0);
  const classNames = getClassNames(styles, { theme, isCollapsed });

  React.useEffect(() => {
    if (disableCollapsing) {
      return undefined;
    }

    const handleResize = () => {
      if (!ref.current || !parentRef.current) {
        return;
      }

      const parentWidth = parentRef.current.getBoundingClientRect().width;
      const boundaryWidth = boundaryWidthRef.current;
      if (boundaryWidth === 0) {
        // First time through, use panel width to decide whether to collapse
        const width = ref.current.getBoundingClientRect().width;
        if (width < minWidth) {
          setIsCollapsed(true);
          boundaryWidthRef.current = parentWidth;
        }
      } else {
        // After the first collapse, use parent width to decide
        setIsCollapsed(parentWidth <= boundaryWidthRef.current);
      }
    };
    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [disableCollapsing]);

  return (
    <FocusZone className={classNames.root} direction={0} allowFocusRoot={true}>
      <div role="menu" ref={ref}>
        {!isCollapsed && <h3 className={classNames.header}>{header}</h3>}
        {pageList.map((item, index) => {
          const selected = selectedKey.toString() === item.id;
          return (
            <DefaultButton
              styles={classNames.subComponentStyles.buttonStyles({})}
              title={isCollapsed ? item.name : undefined}
              onClick={() => handleClick(index)}
              className={selected ? classNames.selectedButton : classNames.notSelectedButton}
              key={item.id}
              text={item.name}
              disabled={item.disabled}
              aria-current={selected ? 'true' : undefined}
              role="menuitem"
            />
          );
        })}
      </div>
    </FocusZone>
  );
};
