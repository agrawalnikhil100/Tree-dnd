/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as Enzyme from 'enzyme';
import 'jest';
import { CommandBarButton } from '@fluentui/react/lib/Button';
import { getTheme } from '@fluentui/react/lib/Styling';
import { IRenderFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { ISidebar, ISidebarItemProps, ISidebarProps, Sidebar, SidebarButton } from '.';

describe('Sidebar', () => {
  let sidebarButtonExampleProps: ISidebarProps;
  let sidebarAccordionExampleProps: ISidebarProps;
  const TestButton = CommandBarButton;

  beforeEach(() => {
    sidebarButtonExampleProps = {
      collapsible: false,
      id: '1',
      theme: getTheme(),
      items: [
        {
          key: 'basic-example-item1',
          name: 'Item 1',
          iconProps: { iconName: 'BuildQueue' },
          active: false
        },
        {
          key: 'basic-example-item2',
          name: 'Item 2',
          iconProps: { iconName: 'Bullseye' },
          active: true
        }
      ]
    };

    sidebarAccordionExampleProps = {
      collapsible: false,
      id: '2',
      theme: getTheme(),
      items: [
        {
          key: 'basic-example-accordion1',
          name: 'More Stuff Here',
          iconProps: { iconName: 'Code' },
          items: [
            {
              key: 'basic-example-accordion1-link1',
              name: 'Inner Link 1',
              iconProps: { iconName: 'Mail' },
              active: false
            }
          ]
        },
        {
          key: 'basic-example-accordion2',
          name: 'More Stuff Here Not Active',
          iconProps: { iconName: 'Crown' },
          items: [
            {
              key: 'basic-example-accordion2-link1',
              name: 'Inner Link 1',
              iconProps: { iconName: 'DiamondSolid' },
              active: false
            },
            {
              key: 'basic-example-accordion2-link2',
              name: 'Inner Link 2',
              iconProps: { iconName: 'DeliveryTruck' },
              active: false
            }
          ]
        }
      ]
    };
  });

  it('should render the component', () => {
    const wrapper = Enzyme.shallow(<Sidebar collapsible={false} id={'1'} theme={getTheme()} items={[]} />);
    expect(wrapper.find('.ba-Sidebar').length).toBe(1);
  });

  it('should render the component with buttons', () => {
    const wrapper = Enzyme.shallow(<Sidebar {...sidebarButtonExampleProps} />);
    expect(wrapper.find(SidebarButton).length).toBe(2);
  });

  it('should render the component with accordion', () => {
    const wrapper = Enzyme.shallow(<Sidebar {...sidebarAccordionExampleProps} />);
    expect(wrapper.find('.ba-SidebarAccordion').length).toBe(2);
  });

  it('should not null ref when clicking accordion', () => {
    const wrapper = Enzyme.mount(<Sidebar {...sidebarAccordionExampleProps} />);
    expect(wrapper.find('.ba-SidebarAccordion').length).toBe(2);

    const accordionButtonContainers = wrapper.find('DefaultButton');
    expect(accordionButtonContainers.length).toBe(2);

    const accordionButtonContainer = accordionButtonContainers.at(0);
    expect(accordionButtonContainer.prop('aria-expanded')).toBe(false);

    const accordionButton = accordionButtonContainer.find('button');
    expect(accordionButton.length).toBe(1);
    accordionButton.simulate('click');

    expect(wrapper.find('DefaultButton').at(0).prop('aria-expanded')).toBe(true);

    accordionButton.simulate('click');

    expect(wrapper.find('DefaultButton').at(0).prop('aria-expanded')).toBe(false);

    wrapper.unmount();
  });

  it('should render the component with context menu when collapsed', () => {
    const wrapper = Enzyme.shallow(<Sidebar {...sidebarAccordionExampleProps} />);

    (wrapper.instance() as Sidebar).setCollapsed(true);
    wrapper.update();

    expect(wrapper.find('.ba-SidebarContextualMenuButton').length).toBe(2);
  });

  it('should render the component using default button', () => {
    const wrapper = Enzyme.shallow(
      <Sidebar
        collapsible={false}
        id={'1'}
        theme={getTheme()}
        defaultButton={TestButton}
        items={[
          {
            key: 'basic-example-item1',
            name: 'Item 1',
            iconProps: { iconName: 'BuildQueue' },
            active: false
          },
          {
            key: 'basic-example-item2',
            name: 'Item 2',
            iconProps: { iconName: 'Bullseye' },
            active: true
          }
        ]}
      />
    );
    expect(wrapper.find(TestButton).length).toBe(2);
  });

  it('should render the component item with custom buttons', () => {
    const wrapper = Enzyme.shallow(
      <Sidebar
        collapsible={false}
        id={'1'}
        theme={getTheme()}
        items={[
          {
            key: 'basic-example-item1',
            name: 'Item 1',
            iconProps: { iconName: 'BuildQueue' },
            active: false,
            buttonAs: TestButton
          },
          {
            key: 'basic-example-item2',
            name: 'Item 2',
            iconProps: { iconName: 'Bullseye' },
            active: true
          }
        ]}
      />
    );
    expect(wrapper.find(TestButton).length).toBe(1);
    expect(wrapper.find(SidebarButton).length).toBe(1);
  });

  it('should render the component item with custom buttons', () => {
    const wrapper = Enzyme.shallow(
      <Sidebar
        collapsible={false}
        id={'1'}
        theme={getTheme()}
        items={[
          {
            key: 'basic-example-item1',
            name: 'Item 1',
            iconProps: { iconName: 'BuildQueue' },
            active: false,
            onRender: item => {
              return (
                <div key={item.key}>
                  <TestButton text={item.name} iconProps={item.iconProps} checked={item.active} />
                </div>
              );
            }
          },
          {
            key: 'basic-example-item2',
            name: 'Item 2',
            iconProps: { iconName: 'Bullseye' },
            active: true
          }
        ]}
      />
    );
    expect(wrapper.find(TestButton).length).toBe(1);
    expect(wrapper.find(SidebarButton).length).toBe(1);
  });

  it('should fire onCollapseChanged only on setting the collapsed state only if it changes the state', () => {
    let sidebarHandle: ISidebar;
    const testProps: ISidebarProps = {
      ...sidebarAccordionExampleProps,
      onCollapseChanged: jest.fn(),
      componentRef: sb => (sidebarHandle = sb)
    };
    const wrapper = Enzyme.mount(<Sidebar {...testProps} />);

    sidebarHandle.setCollapsed(false);

    expect(wrapper.props().onCollapseChanged).not.toBeCalled();

    sidebarHandle.setCollapsed(true);

    expect(wrapper.props().onCollapseChanged).toBeCalled();

    wrapper.unmount();
  });

  it('should dismiss submenu after clicking on an item in the collapsed state', () => {
    const dismissMock = jest.fn();
    const onClickEventMock = { defaultPrevented: false };

    const wrapper = Enzyme.shallow(<Sidebar {...sidebarAccordionExampleProps} />);
    (wrapper.instance() as Sidebar).setCollapsed(true);
    wrapper.update();

    const contextualMenuButton = wrapper.find(SidebarButton).filter({ title: 'More Stuff Here' });

    const { onRender, ...submenuItem } = contextualMenuButton.props().menuProps.items[1];
    const subMenuButton = Enzyme.shallow(
      (onRender as IRenderFunction<ISidebarItemProps>)(submenuItem, dismissMock)
    ).find(SidebarButton);
    subMenuButton.simulate('click', onClickEventMock);

    expect(dismissMock).toHaveBeenCalled();
  });

  it('should render the component item with custom header', () => {
    const customElementId = 'customElementId1';
    const wrapper = Enzyme.shallow(
      <Sidebar
        collapsible={false}
        id={'1'}
        theme={getTheme()}
        items={[
          {
            key: 'basic-example-item2',
            name: 'Item 2',
            iconProps: { iconName: 'Bullseye' },
            active: true
          }
        ]}
        renderCustomHeader={(isCollapsed: boolean) => {
          return <div id={customElementId}>Custom Element</div>;
        }}
      />
    );
    expect(wrapper.find({ id: customElementId }).length).toBe(1);
  });

  it('should render the component item without custom header', () => {
    const customElementId = 'customElementId1';
    const wrapper = Enzyme.shallow(
      <Sidebar
        collapsible={false}
        id={'1'}
        theme={getTheme()}
        items={[
          {
            key: 'basic-example-item2',
            name: 'Item 2',
            iconProps: { iconName: 'Bullseye' },
            active: true
          }
        ]}
      />
    );
    expect(wrapper.find({ id: customElementId }).length).toBe(0);
  });
});
