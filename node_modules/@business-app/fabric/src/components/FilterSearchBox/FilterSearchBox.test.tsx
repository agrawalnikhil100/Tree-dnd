/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { mount, ReactWrapper } from 'enzyme';
import * as React from 'react';

import { DefaultButton } from '@fluentui/react/lib/Button';
import { SearchBox } from '@fluentui/react/lib/SearchBox';
import { TooltipHost } from '@fluentui/react/lib/Tooltip';

import { FilterSearchBox, IFilterItem, IFilterSearchBox, IFilterSearchBoxProps } from './';
import { IFilterSearchBoxState } from './FilterSearchBox.base';

const strings = { searchBoxPlaceholder: 'Search', filterButtonTooltipText: 'Tooltip text' };
const filters: IFilterItem[] = [
  { key: 'a', text: 'A' },
  { key: 'b', text: 'B' }
];

type FilterSearchBoxWrapper = ReactWrapper<IFilterSearchBoxProps, IFilterSearchBoxState>;

function getState(wrapper: FilterSearchBoxWrapper): IFilterSearchBoxState {
  const filterSearchChild = wrapper.childAt(0).childAt(0);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return (filterSearchChild.instance() as any).state;
}

interface IVerifyStateExpectedValues {
  isFilterMenuOpen: boolean;
  isHovering: boolean;
  isSearchBoxActive: boolean;
}

function verifyState(wrapper: FilterSearchBoxWrapper, expectedValues: IVerifyStateExpectedValues) {
  const state = getState(wrapper);
  expect(state.isFilterMenuOpen).toEqual(expectedValues.isFilterMenuOpen);
  expect(state.isHovering).toEqual(expectedValues.isHovering);
  expect(state.isSearchBoxActive).toEqual(expectedValues.isSearchBoxActive);
}

describe('FilterSearchBox', () => {
  it('onSearchTextChange is called when typing in text box', () => {
    const onSearchTextChange = jest.fn();
    const wrapper: FilterSearchBoxWrapper = mount(
      <FilterSearchBox strings={strings} searchText={'test'} onSearchTextChange={onSearchTextChange} />
    );

    // Find the search box
    const input = wrapper.find('input');
    expect(input.length).toBe(1);

    const mockEventObject = { target: { value: 'a' } };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    input.props().onInput(mockEventObject as any);

    expect(onSearchTextChange).toBeCalledWith(mockEventObject, 'a');

    wrapper.unmount();
  });

  it('active states update as appropriate', () => {
    const wrapper: FilterSearchBoxWrapper = mount(
      <FilterSearchBox
        strings={strings}
        searchText={'test'}
        onSearchTextChange={jest.fn()}
        filters={filters}
        selectedFilterKey={filters[0].key}
        onFilterChange={jest.fn()}
        styles={{
          root: 'test-root',
          searchBox: 'test-search',
          filterButtonRootInTooltipHost: 'test-filter-btn'
        }}
      />
    );

    // Verify initial state.
    verifyState(wrapper, {
      isFilterMenuOpen: false,
      isHovering: false,
      isSearchBoxActive: false
    });

    // Find the search box and focus
    const searchBox = wrapper.find(SearchBox);
    expect(searchBox.length).toBe(1);
    searchBox.props().onFocus(null);
    verifyState(wrapper, {
      isFilterMenuOpen: false,
      isHovering: false,
      isSearchBoxActive: true
    });
    searchBox.props().onBlur(null);
    verifyState(wrapper, {
      isFilterMenuOpen: false,
      isHovering: false,
      isSearchBoxActive: false
    });

    // Hover over the container
    const root = wrapper.find('.test-root');
    root.props().onMouseEnter(null);
    verifyState(wrapper, {
      isFilterMenuOpen: false,
      isHovering: true,
      isSearchBoxActive: false
    });
    root.props().onMouseLeave(null);
    verifyState(wrapper, {
      isFilterMenuOpen: false,
      isHovering: false,
      isSearchBoxActive: false
    });

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mockClickEvent = { preventDefault: jest.fn(), stopPropagation: jest.fn(), nativeEvent: {} } as any;

    // Open the context menu
    const filterButton = wrapper.find('.test-filter-btn');
    filterButton.props().onClick(mockClickEvent);
    verifyState(wrapper, {
      isFilterMenuOpen: true,
      isHovering: false,
      isSearchBoxActive: false
    });

    wrapper.unmount();
  });

  it('applies styles to tooltiphost and button as appropriate', () => {
    const testStrings = { ...strings };
    const wrapper: FilterSearchBoxWrapper = mount(
      <FilterSearchBox
        strings={testStrings}
        searchText={'test'}
        onSearchTextChange={jest.fn()}
        filters={filters}
        selectedFilterKey={filters[0].key}
        onFilterChange={jest.fn()}
        styles={{
          filterButtonRoot: 'filter-button-root',
          filterButtonRootInTooltipHost: 'filter-button-tooltip-root',
          tooltipHost: 'tooltip-host'
        }}
      />
    );

    expect(wrapper.find('.filter-button-root').length).toBe(0);
    expect(wrapper.find('.filter-button-tooltip-root').length).toBe(1);
    expect(wrapper.find('.tooltip-host').length).toBe(1);

    testStrings.filterButtonTooltipText = null;
    wrapper.setProps({
      strings: testStrings
    });

    expect(wrapper.find('.filter-button-root').length).toBe(1);
    expect(wrapper.find('.filter-button-tooltip-root').length).toBe(0);
    expect(wrapper.find('.tooltip-host').length).toBe(0);

    wrapper.unmount();
  });

  it('applies styles to inputfield as appropriate', () => {
    const wrapper: FilterSearchBoxWrapper = mount(
      <FilterSearchBox
        strings={strings}
        searchText={'test'}
        onSearchTextChange={jest.fn()}
        filters={filters}
        selectedFilterKey={filters[0].key}
        onFilterChange={jest.fn()}
        styles={{
          searchBoxField: 'search-box-field'
        }}
      />
    );

    expect(wrapper.find('.search-box-field').length).toBe(1);
    expect(wrapper.find('.search-box-field').name()).toBe('input');

    wrapper.unmount();
  });

  it('testing defaultButton tooltip is not rendered when tooltipText does not exist', () => {
    const stringObject = { searchBoxPlaceholder: 'Search' };
    const wrapper: FilterSearchBoxWrapper = mount(
      <FilterSearchBox
        strings={stringObject}
        searchText={'test'}
        onSearchTextChange={jest.fn()}
        filters={filters}
        selectedFilterKey={filters[0].key}
        styles={{
          filterButtonRoot: 'test-filter-btn'
        }}
      />
    );

    // Verify tooltip is not rendered
    const tooltip = wrapper.find(TooltipHost);
    expect(tooltip.length).toBe(0);

    const filterButton = wrapper.find(DefaultButton);
    const filterButtonStyles = filterButton.props().styles.root as string[];
    expect(filterButtonStyles[1]).toBeDefined();

    wrapper.unmount();
  });

  it('calls onFilterChange when a filter is clicked', () => {
    const onFilterChange = jest.fn();
    const wrapper: FilterSearchBoxWrapper = mount(
      <FilterSearchBox
        strings={strings}
        searchText={'test'}
        onSearchTextChange={jest.fn()}
        filters={filters}
        selectedFilterKey={filters[0].key}
        onFilterChange={onFilterChange}
      />
    );

    const filterButton = wrapper.find(DefaultButton);
    expect(filterButton.length).toEqual(1);
    filterButton.prop('menuProps').onItemClick(null, filters[1]);

    expect(onFilterChange).toBeCalledWith(filters[1].key);

    wrapper.unmount();
  });

  it('sets checked appropriately', () => {
    const wrapper: FilterSearchBoxWrapper = mount(
      <FilterSearchBox
        strings={strings}
        searchText={'test'}
        onSearchTextChange={jest.fn()}
        filters={filters}
        selectedFilterKey={filters[0].key}
        onFilterChange={jest.fn()}
      />
    );

    let filterButton = wrapper.find(DefaultButton);
    expect(filterButton.length).toEqual(1);
    let menuItems = filterButton.prop('menuProps').items;
    expect(menuItems.length).toEqual(filters.length);
    expect(menuItems[0].checked).toBeTruthy();
    expect(menuItems[1].checked).toBeFalsy();

    wrapper.setProps({
      selectedFilterKey: filters[1].key
    });

    filterButton = wrapper.find(DefaultButton);
    menuItems = filterButton.prop('menuProps').items;
    expect(menuItems.length).toEqual(filters.length);
    expect(menuItems[0].checked).toBeFalsy();
    expect(menuItems[1].checked).toBeTruthy();

    wrapper.unmount();
  });

  it('renders filterButtonIconName prop correctly', () => {
    const wrapper: FilterSearchBoxWrapper = mount(
      <FilterSearchBox
        strings={strings}
        searchText={'test'}
        onSearchTextChange={jest.fn()}
        filters={filters}
        selectedFilterKey={filters[0].key}
        onFilterChange={jest.fn()}
      />
    );

    let filterButton = wrapper.find(DefaultButton);
    expect(filterButton.length).toEqual(1);
    expect(filterButton.prop('text')).toEqual(filters[0].text);
    expect(filterButton.prop('iconProps')).toBeUndefined();

    wrapper.setProps({
      filterButtonIconName: 'Filter'
    });

    filterButton = wrapper.find(DefaultButton);
    expect(filterButton.length).toEqual(1);
    expect(filterButton.prop('text')).toEqual('');
    const iconProps = filterButton.prop('iconProps');
    expect(iconProps).toBeTruthy();
    expect(iconProps.iconName).toEqual('Filter');

    wrapper.unmount();
  });

  it('renders selected filter text correctly', () => {
    const wrapper: FilterSearchBoxWrapper = mount(
      <FilterSearchBox
        strings={strings}
        searchText={'test'}
        onSearchTextChange={jest.fn()}
        filters={filters}
        selectedFilterKey={filters[0].key}
        onFilterChange={jest.fn()}
      />
    );

    let filterButton = wrapper.find(DefaultButton);
    expect(filterButton.length).toEqual(1);
    expect(filterButton.prop('text')).toEqual(filters[0].text);

    wrapper.setProps({
      selectedFilterKey: filters[1].key
    });

    filterButton = wrapper.find(DefaultButton);
    expect(filterButton.length).toEqual(1);
    expect(filterButton.prop('text')).toEqual(filters[1].text);
  });

  it('consumes strings correctly', () => {
    const wrapper: FilterSearchBoxWrapper = mount(
      <FilterSearchBox
        strings={{
          searchBoxPlaceholder: 'Search placeholder',
          searchBoxClearButtonTitle: 'Search clear button tooltip',
          filterButtonTooltipText: 'Filter button tooltip'
        }}
        searchText={''}
        onSearchTextChange={jest.fn()}
        filters={filters}
        selectedFilterKey={filters[0].key}
        onFilterChange={jest.fn()}
      />
    );

    const searchbox = wrapper.find(SearchBox);
    expect(searchbox.length).toBe(1);
    expect(searchbox.prop('placeholder')).toBe('Search placeholder');
    expect(searchbox.prop('clearButtonProps').title).toBe('Search clear button tooltip');

    const tooltip = wrapper.find(TooltipHost);
    expect(tooltip.length).toBe(1);
    expect(tooltip.prop('content')).toBe('Filter button tooltip');

    wrapper.unmount();
  });

  it('focuses search box when focus is called on componentRef', () => {
    const ref = React.createRef<IFilterSearchBox>();
    const wrapper: FilterSearchBoxWrapper = mount(
      <FilterSearchBox
        strings={strings}
        searchText={'test'}
        onSearchTextChange={jest.fn()}
        filters={filters}
        selectedFilterKey={filters[0].key}
        onFilterChange={jest.fn()}
        componentRef={ref}
      />
    );

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const instance: any = wrapper.childAt(0).childAt(0).instance();
    const focusFn = jest.fn();
    instance._searchBoxRef.current.focus = focusFn;

    expect(ref.current).toBeTruthy();
    expect(ref.current.focus).toBeDefined();
    ref.current.focus();
    expect(focusFn).toHaveBeenCalled();

    wrapper.unmount();
  });

  it('dissmisses menu on Button when dismissmenu is called on componentRef', () => {
    const ref = React.createRef<IFilterSearchBox>();
    const wrapper: FilterSearchBoxWrapper = mount(
      <FilterSearchBox
        strings={strings}
        searchText={'test'}
        onSearchTextChange={jest.fn()}
        filters={filters}
        selectedFilterKey={filters[0].key}
        onFilterChange={jest.fn()}
        componentRef={ref}
      />
    );

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const instance: any = wrapper.childAt(0).childAt(0).instance();
    const dismissFn = jest.fn();
    instance._filterButtonRef.current.dismissMenu = dismissFn;

    expect(ref.current).toBeTruthy();
    expect(ref.current.dismissMenu).toBeDefined();
    ref.current.dismissMenu();
    expect(dismissFn).toHaveBeenCalled();

    wrapper.unmount();
  });

  it('does not render filter selection when less than two filters are provided', () => {
    const wrapper: FilterSearchBoxWrapper = mount(
      <FilterSearchBox strings={strings} searchText={'test'} onSearchTextChange={jest.fn()} />
    );

    let filterButton = wrapper.find(DefaultButton);
    expect(filterButton.length).toEqual(0);

    wrapper.setProps({
      filters: [filters[0]],
      selectedFilterKey: filters[0].key
    });

    filterButton = wrapper.find(DefaultButton);
    expect(filterButton.length).toEqual(0);

    wrapper.setProps({
      filters
    });

    filterButton = wrapper.find(DefaultButton);
    expect(filterButton.length).toEqual(1);
  });

  it('Should pass searchText onto the Fabric SearchBox component', () => {
    const wrapper: FilterSearchBoxWrapper = mount(
      <FilterSearchBox strings={strings} searchText={'test'} onSearchTextChange={jest.fn()} />
    );

    expect(wrapper.find(SearchBox).props().value).toEqual('test');
    wrapper.setProps({ searchText: 'new' });
    expect(wrapper.find(SearchBox).props().value).toEqual('new');
  });
});
