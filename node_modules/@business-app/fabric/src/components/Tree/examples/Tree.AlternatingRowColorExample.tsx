/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';
import { mergeStyleSets } from '@fluentui/react/lib/Styling';
import * as React from 'react';
import { Tree } from '../Tree';
import { ITreeItem } from '../Tree.types';
import { produceItemsWithIcons } from './Tree.Example.Data';

export interface ITreeAlternatingRowColorExampleStates {
  selection?: { [key: string]: boolean };
}

export class TreeAlternatingRowColorExample extends React.Component<
  {},
  ITreeAlternatingRowColorExampleStates
> {
  constructor(props: {}) {
    super(props);

    this.state = {
      selection: {}
    };
  }
  public render(): JSX.Element {
    return (
      <div className={exampleStyles.exampleContainer}>
        <Tree
          items={produceItemsWithIcons}
          strings={{
            listAriaLabel: 'test',
            moreCommandsAriaLabel: 'More Command'
          }}
          getItemCommands={this._getCommands}
          getItemStyle={this._getItemStyle}
        />
      </div>
    );
  }

  private _getItemStyle = (item: ITreeItem, isSelected: boolean, isExpanded: boolean, index: number) => {
    const styles = customizedStyles;

    if (isSelected) {
      return styles.oddRow;
    } else if (index % 2 === 1) {
      return styles.oddRow;
    } else {
      return styles.evenRow;
    }
  };

  private _getCommands = (): IContextualMenuItem[] => {
    const { selection } = this.state;

    const keys: string[] = ['newItem', 'share', 'mobile'];

    const items: IContextualMenuItem[] = [
      {
        key: keys[0],
        text: 'News',
        canCheck: true,
        isChecked: selection![keys[0]],
        onClick: this._onToggleSelect,
        icon: 'Add'
      },
      {
        key: keys[1],
        text: 'Share',
        canCheck: true,
        isChecked: selection![keys[1]],
        onClick: this._onToggleSelect,
        icon: 'Mail'
      },
      {
        key: keys[2],
        text: 'Mobile',
        canCheck: true,
        isChecked: selection![keys[2]],
        onClick: this._onToggleSelect,
        icon: 'Calendar'
      }
    ];

    return items;
  };

  private _onToggleSelect = (ev?: React.MouseEvent<HTMLButtonElement>, item?: IContextualMenuItem): void => {
    const { selection } = this.state;

    if (ev.preventDefault) {
      ev.preventDefault();
    }

    selection![item!.key] = !selection![item!.key];

    this.setState({
      selection: selection
    });
  };
}

const exampleStyles = mergeStyleSets({
  exampleContainer: {
    // 'display: flex' is important for the Tree to layout correctly.
    display: 'flex',
    flexDirection: 'column',
    width: 320,
    height: 320,
    userSelect: 'none'
  }
});

const customizedStyles = mergeStyleSets({
  oddRow: {},
  evenRow: {
    backgroundColor: '#FBFBFB'
  },
  selectedRow: {
    backgroundColor: '#DCDCDC'
  }
});
