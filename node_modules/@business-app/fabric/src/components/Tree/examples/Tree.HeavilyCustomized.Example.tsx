/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { DefaultButton } from '@fluentui/react/lib/Button';
import { Announced } from '@fluentui/react/lib/Announced';
import { IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';
import { mergeStyleSets } from '@fluentui/react/lib/Styling';
import { Toggle } from '@fluentui/react/lib/Toggle';
import * as React from 'react';
import { Tree } from '../Tree';
import { ITreeItem, SelectionType } from '../Tree.types';
import { cloneSet, getFolderKeys } from './Tree.Example.Data';

export interface ITreeExampleState {
  useShortWidth: boolean;
  items: ITreeItem[];
  selectedItemKeys: Set<string>;
  expandedItemKeys: Set<string>;
  announcedMessage: string;
}

const oddRowColor = '#CCDDCC';
const evenRowColor = '#D4E4D4';
const hoveredRowColor = '#CCEECC';
const selectedRowColor = '#AACCAA';
const hoveredMenuButtonColor = '#DAFBDA';
const openMenuButtonColor = '#DDFFDD';

export class TreeHeavilyCustomizedExample extends React.Component<{}, ITreeExampleState> {
  constructor(props: undefined) {
    super(props);
    const items: ITreeItem[] = [
      {
        label: 'Category A',
        key: '0',
        isFolder: true,
        level: 0,
        setSize: 2,
        indexInParent: 0,
        disableSelection: true
      },
      {
        label: 'Item 1',
        key: '1',
        level: 1,
        setSize: 4,
        indexInParent: 0
      },
      {
        label: 'Item 2',
        key: '2',
        isFolder: true,
        level: 1,
        setSize: 4,
        indexInParent: 1
      },
      {
        label: 'Subitem 1',
        key: '3',
        level: 2,
        setSize: 2,
        indexInParent: 0
      },
      {
        label: 'Subitem 2',
        key: '4',
        level: 2,
        setSize: 2,
        indexInParent: 1
      },
      {
        label: 'Item 3',
        key: '5',
        level: 1,
        setSize: 4,
        indexInParent: 2
      },
      {
        label: 'Subcategory A',
        key: '6',
        isFolder: true,
        level: 1,
        setSize: 4,
        indexInParent: 3,
        disableSelection: true
      },
      {
        label: 'Item 1',
        key: '7',
        level: 2,
        setSize: 2,
        indexInParent: 0
      },
      {
        label: 'Item 2',
        key: '8',
        level: 2,
        setSize: 2,
        indexInParent: 1
      },
      {
        label: 'Category B',
        key: '9',
        isFolder: true,
        level: 0,
        setSize: 2,
        indexInParent: 1,
        disableSelection: true
      },
      {
        label: 'Item with a really rather unreasonably long name, actually',
        key: '10',
        level: 1,
        setSize: 1,
        indexInParent: 0
      }
    ];

    this.state = {
      useShortWidth: false,
      items: items,
      selectedItemKeys: new Set<string>(),
      expandedItemKeys: new Set<string>(),
      announcedMessage: ''
    };
  }

  public render(): JSX.Element {
    const { useShortWidth, selectedItemKeys, expandedItemKeys } = this.state;

    return (
      <div className={exampleStyles.exampleContainer}>
        <div>
          <p>
            This example demonstrates a hypothetical case where "categories" aren't selectable and don't have
            menu options, and either categories or items can have children.
          </p>
          <p>
            In addition, the tree styles are heavily customized (alternating rows with custom colors and
            custom menu button colors -- I hope you like the color green!).
          </p>
        </div>
        <Toggle
          label="Narrow width"
          checked={useShortWidth}
          onChange={this._onChangeWidthToggle}
          onText="Narrow"
          offText="Wide"
        />
        <div className={exampleStyles.controls}>
          <DefaultButton onClick={this._onClickExpandAll}>{'Expand all'}</DefaultButton>
          <DefaultButton onClick={this._onClickCollapseAll}>{'Collapse all'}</DefaultButton>
          <DefaultButton onClick={this._onClickClearSelection}>{'Clear selection'}</DefaultButton>
        </div>
        <div style={{ width: useShortWidth ? '200px' : '280px', height: 320 }}>
          <Tree
            items={this.state.items}
            strings={{
              listAriaLabel: 'test',
              moreCommandsAriaLabel: 'More Command'
            }}
            selectedItemKeys={selectedItemKeys}
            expandedItemKeys={expandedItemKeys}
            onItemExpand={this._onItemExpand}
            onItemCollapse={this._onItemCollapsed}
            onItemSelected={this._onItemSelected}
            getItemHasCommands={this._getHasCommands}
            getItemCommands={this._getCommands}
            getItemStyle={this._getItemStyle}
            styles={{
              menuButton: {
                flex: '0 0 auto',
                // Menu button should be hidden by default.
                // We will show it in the following cases, though: a row is hovered, a row is selected, or the menu is open.
                visibility: 'hidden',
                position: 'sticky',
                right: 0
              },
              menuButtonSelectedRowClosedMenu: {
                backgroundColor: selectedRowColor,
                selectors: {
                  ':hover': {
                    backgroundColor: hoveredMenuButtonColor
                  }
                }
              },
              menuButtonSelectedRowOpenMenu: {
                backgroundColor: openMenuButtonColor
              },
              menuButtonUnselectedRowClosedMenu: {
                backgroundColor: hoveredRowColor,
                selectors: {
                  ':hover': {
                    backgroundColor: hoveredMenuButtonColor
                  }
                }
              },
              menuButtonUnselectedRowOpenMenu: {
                backgroundColor: openMenuButtonColor
              }
            }}
          />
          <Announced message={this.state.announcedMessage} />
        </div>
      </div>
    );
  }

  private _onChangeWidthToggle = (ev, useShortWidth: boolean) => {
    this.setState({ useShortWidth });
  };

  private _onClickExpandAll = () => {
    this.setState(prev => {
      return {
        expandedItemKeys: getFolderKeys(prev.items)
      };
    });
    this.setState({ announcedMessage: 'All items expanded' });
  };

  private _onClickCollapseAll = () => {
    this.setState({ expandedItemKeys: new Set<string>(), announcedMessage: 'All items collapsed' });
  };

  private _onClickClearSelection = () => {
    this.setState({ selectedItemKeys: new Set<string>(), announcedMessage: 'All items cleared' });
  };

  private _getItemStyle = (item: ITreeItem, isSelected: boolean, isExpanded: boolean, index: number) => {
    // Simply changing the tree color scheme can be accomplished
    // via the styles prop without the need for this callback.
    // Even providing special styling for nodes with selection disabled
    // (like the categories in this example) can be achieved via the styles props.
    // However, we're also changing styles based off the item index here,
    // and that cannot be achieved via the styles prop.
    const styles = customizedStyles;
    if (isSelected) {
      return styles.selectedRow;
    } else if ((index + 1) % 2 === 1) {
      return item.disableSelection ? styles.unselectableOddRow : styles.oddRow;
    } else {
      return item.disableSelection ? styles.unselectableEvenRow : styles.evenRow;
    }
  };

  private _onItemSelected = (
    item: ITreeItem,
    type,
    isSelected: boolean,
    isExpanded: boolean,
    index: number
  ): void => {
    let selectedItemKeys: Set<string>;

    if (type === SelectionType.Toggle) {
      selectedItemKeys = cloneSet(this.state.selectedItemKeys);

      if (selectedItemKeys.has(item.key)) {
        selectedItemKeys.delete(item.key);
      } else {
        selectedItemKeys.add(item.key);
      }
    } else {
      selectedItemKeys = new Set<string>();
      selectedItemKeys.add(item.key);
    }

    this.setState({ selectedItemKeys });
  };

  private _onItemExpand = (item: ITreeItem, index: number): void => {
    this.setState(prev => {
      const set = cloneSet(prev.expandedItemKeys);
      set.add(item.key);

      return { expandedItemKeys: set };
    });
  };

  private _onItemCollapsed = (item: ITreeItem, index: number): void => {
    this.setState(prev => {
      const set = cloneSet(prev.expandedItemKeys);
      set.delete(item.key);

      return { expandedItemKeys: set };
    });
  };

  private _getCommands = (item: ITreeItem): IContextualMenuItem[] => {
    if (item.disableSelection) {
      return [];
    }

    const items: IContextualMenuItem[] = [
      {
        key: 'New',
        text: 'New',
        iconProps: { iconName: 'Add' }
      },
      {
        key: 'Mail',
        text: 'Mail',
        iconProps: { iconName: 'Mail' }
      },
      {
        key: 'Calendar',
        text: 'Calendar',
        iconProps: { iconName: 'Calendar' }
      }
    ];

    return items;
  };

  private _getHasCommands = (item: ITreeItem): boolean => {
    return !item.disableSelection;
  };
}

const exampleStyles = mergeStyleSets({
  exampleContainer: {
    // 'display: flex' is important for the Tree to layout correctly.
    display: 'flex',
    flexDirection: 'column',
    width: 320,
    height: 500,
    userSelect: 'none'
  },
  controls: {
    display: 'flex',
    flexDirection: 'row'
  }
});

const customizedStyles = mergeStyleSets({
  unselectableOddRow: {
    backgroundColor: oddRowColor,
    fontWeight: 'bold',
    selectors: {
      ':hover': {
        backgroundColor: oddRowColor
      }
    }
  },
  oddRow: {
    backgroundColor: oddRowColor,
    selectors: {
      ':hover': {
        backgroundColor: hoveredRowColor
      }
    }
  },
  unselectableEvenRow: {
    backgroundColor: evenRowColor,
    fontWeight: 'bold',
    selectors: {
      ':hover': {
        backgroundColor: evenRowColor
      }
    }
  },
  evenRow: {
    backgroundColor: evenRowColor,
    selectors: {
      ':hover': {
        backgroundColor: hoveredRowColor
      }
    }
  },
  selectedRow: {
    backgroundColor: selectedRowColor
  }
});
