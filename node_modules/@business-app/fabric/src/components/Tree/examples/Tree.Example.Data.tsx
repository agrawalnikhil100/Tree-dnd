/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { ITreeItem } from '../Tree.types';

export const produceItems: ITreeItem[] = [
  {
    label: 'Fruits',
    key: 'fruits',
    isFolder: true,
    level: 0,
    setSize: 2,
    indexInParent: 0
  },
  {
    label: 'Apples',
    key: 'apples',
    isFolder: true,
    level: 1,
    setSize: 0,
    indexInParent: 0
  },
  {
    label: 'Granny Smith',
    key: 'granny smith',
    level: 2,
    setSize: 2,
    indexInParent: 0
  },
  {
    label: 'Red Delicious',
    key: 'red delicious',
    level: 2,
    setSize: 2,
    indexInParent: 1
  },
  {
    label: 'Vegetables',
    key: 'vegetables',
    isFolder: true,
    level: 0,
    setSize: 2,
    indexInParent: 1
  },
  {
    label: 'Carrots',
    key: 'carrots',
    level: 1,
    setSize: 3,
    indexInParent: 0
  },
  {
    label: 'Cucumbers',
    key: 'cucumbers',
    level: 1,
    setSize: 3,
    indexInParent: 1
  },
  {
    label: 'Lettuce',
    key: 'lettuce',
    level: 1,
    setSize: 3,
    indexInParent: 2
  }
];

export const produceItemsWithIcons: ITreeItem[] = produceItems.map(item => {
  return {
    ...item,
    iconProps: { iconName: 'Info' }
  };
});

export function getFolderKeys(items: ITreeItem[]): Set<string> {
  const folderKeys = new Set<string>();

  items.forEach(item => {
    if (item.isFolder) {
      folderKeys.add(item.key);
    }
  });

  return folderKeys;
}

export function cloneSet(set: Set<string>): Set<string> {
  const newSet = new Set<string>();
  set.forEach(key => newSet.add(key));
  return newSet;
}
