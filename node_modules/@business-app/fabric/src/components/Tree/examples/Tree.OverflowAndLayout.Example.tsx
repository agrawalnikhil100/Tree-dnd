/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { DefaultButton } from '@fluentui/react/lib/Button';
import { Announced } from '@fluentui/react/lib/Announced';
import { IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';
import { Dropdown } from '@fluentui/react/lib/Dropdown';
import { mergeStyleSets } from '@fluentui/react/lib/Styling';
import { TextField } from '@fluentui/react/lib/TextField';
import { Toggle } from '@fluentui/react/lib/Toggle';
import * as React from 'react';
import { Tree } from '../Tree';
import { ITreeItem } from '../Tree.types';
import { cloneSet, getFolderKeys, produceItemsWithIcons } from './Tree.Example.Data';

export enum CommandSetting {
  None,
  Some,
  All
}

export interface ITreeOverflowAndLayoutExampleState {
  commands: CommandSetting;
  containerWidth: string;
  containerHeight: string;
  longText: boolean;
  items: ITreeItem[];
  longItems: ITreeItem[];
  expandedItemKeys: Set<string>;
  selection?: { [key: string]: boolean };
  announcedMessage: string;
}

export class TreeOverflowAndLayoutExample extends React.Component<{}, ITreeOverflowAndLayoutExampleState> {
  constructor(props: {}) {
    super(props);

    this.state = {
      commands: CommandSetting.All,
      containerWidth: '280px',
      containerHeight: '260px',
      longText: true,
      items: produceItemsWithIcons,
      longItems: produceItemsWithIcons.map(item => ({
        ...item,
        label:
          item.label.indexOf('Cucumber') >= 0
            ? 'CucumbersCucumbersCucumbersCucumbersCucumbers CucumbersCucumbersCucumbersCucumbersCucumbers'
            : item.label
      })),
      expandedItemKeys: new Set<string>(),
      selection: {},
      announcedMessage: ''
    };
  }

  public render(): JSX.Element {
    const { containerWidth, containerHeight, items, longItems, expandedItemKeys, longText } = this.state;
    return (
      <div className={exampleStyles.root}>
        <div className={exampleStyles.optionRow}>
          <TextField
            className={exampleStyles.option}
            onChange={(ev, value) => this.setState({ containerWidth: value })}
            label={'Container Width (eg 100% or 280px)'}
            defaultValue={containerWidth}
          />
          <TextField
            className={exampleStyles.option}
            onChange={(ev, value) => this.setState({ containerHeight: value })}
            label={'Container Height (eg 100% or 320px)'}
            defaultValue={containerHeight}
          />
        </div>
        <div className={exampleStyles.optionRow}>
          <Dropdown
            label={'Contextual menu buttons on rows'}
            defaultSelectedKey={CommandSetting.All}
            className={exampleStyles.option}
            options={[
              {
                key: CommandSetting.None,
                text: 'None'
              },
              {
                key: CommandSetting.Some,
                text: 'Some'
              },
              {
                key: CommandSetting.All,
                text: 'All'
              }
            ]}
            onChange={(ev, option) => this.setState({ commands: option.key as CommandSetting })}
          />
          <Toggle
            className={exampleStyles.option}
            onChange={(ev, checked) => this.setState({ longText: checked })}
            defaultChecked={longText}
            onText={'On'}
            offText={'Off'}
            label={'Long text'}
          />
        </div>
        <div
          style={{ width: containerWidth, height: containerHeight, border: '1px solid gray' }}
          className={exampleStyles.treeContainer}
        >
          <div className={exampleStyles.optionRow}>
            <DefaultButton onClick={this._onClickExpandAll}>{'Expand all'}</DefaultButton>
            <DefaultButton onClick={this._onClickCollapseAll}>{'Collapse all'}</DefaultButton>
          </div>
          <Tree
            items={longText ? longItems : items}
            expandedItemKeys={expandedItemKeys}
            strings={{
              listAriaLabel: 'test',
              moreCommandsAriaLabel: 'More Command'
            }}
            onItemExpand={this._onItemExpand}
            onItemCollapse={this._onItemCollapsed}
            getItemCommands={this._getCommands}
            getItemHasCommands={this._getItemHasCommands}
          />
        </div>
        <Announced message={this.state.announcedMessage} />
      </div>
    );
  }

  private _onClickExpandAll = () => {
    this.setState(prev => {
      return {
        expandedItemKeys: getFolderKeys(prev.items)
      };
    });
    this.setState({ announcedMessage: 'All items expanded' });
  };

  private _onClickCollapseAll = () => {
    this.setState({ expandedItemKeys: new Set<string>(), announcedMessage: 'All items collapsed' });
  };

  private _onItemExpand = (item: ITreeItem, index: number): void => {
    this.setState(prev => {
      const set = cloneSet(prev.expandedItemKeys);
      set.add(item.key);

      return { expandedItemKeys: set };
    });
  };

  private _onItemCollapsed = (item: ITreeItem, index: number): void => {
    this.setState(prev => {
      const set = cloneSet(prev.expandedItemKeys);
      set.delete(item.key);

      return { expandedItemKeys: set };
    });
  };

  private _getItemHasCommands = (item: ITreeItem): boolean => {
    const { commands } = this.state;

    if (commands === CommandSetting.None) {
      return false;
    } else if (commands === CommandSetting.All) {
      return true;
    } else {
      return item.label.toLowerCase().indexOf('a') !== -1;
    }
  };

  private _getCommands = (): IContextualMenuItem[] => {
    const { selection } = this.state;

    const keys: string[] = ['newItem', 'share', 'mobile'];

    const items: IContextualMenuItem[] = [
      {
        key: keys[0],
        text: 'News',
        canCheck: true,
        isChecked: selection![keys[0]],
        onClick: this._onToggleSelect,
        icon: 'Add'
      },
      {
        key: keys[1],
        text: 'Share',
        canCheck: true,
        isChecked: selection![keys[1]],
        onClick: this._onToggleSelect,
        icon: 'Mail'
      },
      {
        key: keys[2],
        text: 'Mobile',
        canCheck: true,
        isChecked: selection![keys[2]],
        onClick: this._onToggleSelect,
        icon: 'Calendar'
      }
    ];

    return items;
  };

  private _onToggleSelect = (ev?: React.MouseEvent<HTMLButtonElement>, item?: IContextualMenuItem): void => {
    const { selection } = this.state;

    if (ev.preventDefault) {
      ev.preventDefault();
    }

    selection![item!.key] = !selection![item!.key];

    this.setState({
      selection: selection
    });
  };
}

const exampleStyles = mergeStyleSets({
  root: {
    userSelect: 'none'
  },
  option: {
    marginRight: 32
  },
  optionRow: {
    display: 'flex',
    flexDirection: 'row'
  },
  treeContainer: {
    display: 'flex',
    flexDirection: 'column'
  }
});
