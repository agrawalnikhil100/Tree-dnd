/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { mergeStyleSets } from '@fluentui/react/lib/Styling';
import * as React from 'react';
import { ShimmeredTree } from '../ShimmeredTree';
import { IShimmeredTreeItem } from '../ShimmeredTree.types';
import { ITreeItem } from '../Tree.types';

export const ShimmeredTreeBasicExample: React.FC<{}> = (props: {}) => {
  const treeItems: ITreeItem[] = React.useMemo(() => {
    const items: Array<ITreeItem | IShimmeredTreeItem> = [];

    items.push({
      key: 'folder',
      label: 'Folder 1',
      setSize: 11,
      level: 0,
      isFolder: true,
      indexInParent: 0,
      iconProps: {
        iconName: 'OpenFolderHorizontal'
      }
    });

    for (let i = 0; i < 5; i++) {
      items.push({
        isShimmered: true,
        key: `shimmered- + ${i.toString()}`,
        label: '',
        level: 1,
        setSize: 5,
        indexInParent: i,
        disableFocus: true,
        disableSelection: true
      });
    }

    for (let i = 0; i < 10; i++) {
      if (i < 5) {
        const item: ITreeItem = {
          key: i.toString(),
          label: `Record ${(i + 1).toString()}`,
          level: 0,
          setSize: 11,
          indexInParent: i + 1,
          iconProps: {
            iconName: 'Page'
          }
        };

        items.push(item);
      } else {
        const shimmeredItem: IShimmeredTreeItem = {
          isShimmered: true,
          key: i.toString(),
          label: '',
          level: 0,
          setSize: 10,
          indexInParent: i,
          disableFocus: true,
          disableSelection: true
        };

        items.push(shimmeredItem);
      }
    }

    return items;
  }, []);

  return (
    <>
      <div className={exampleStyles.exampleContainer}>
        <ShimmeredTree
          items={treeItems}
          styles={treeStyles}
          strings={{ moreCommandsAriaLabel: '', listAriaLabel: '' }}
        />
      </div>
    </>
  );
};

const exampleStyles = mergeStyleSets({
  exampleContainer: {
    // 'display: flex' is important for the Tree to layout correctly.
    display: 'flex',
    // Just an example to prove that row direction also works for the Tree.
    flexDirection: 'row',
    width: 320,
    height: 200,
    userSelect: 'none'
  }
});

const treeStyles = {
  root: {
    background: 'white'
  }
};
