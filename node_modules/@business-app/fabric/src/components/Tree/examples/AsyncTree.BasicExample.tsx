/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { Toggle } from '@fluentui/react/lib/Toggle';
import { mergeStyleSets } from '@fluentui/react/lib/Styling';
import * as React from 'react';
import { AsyncTree } from '../AsyncTree';
import { IAsyncTreeProps } from '../AsyncTree.types';

const wait = (ms: number): Promise<void> => new Promise((r, j) => setTimeout(r, ms));

const strings = {
  listAriaLabel: 'list',
  moreCommandsAriaLabel: 'more commands'
};

export const AsyncTreeBasicExample: React.FC = () => {
  const throwErrorsRef = React.useRef(false);

  const onResolveItems: IAsyncTreeProps['onResolveItems'] = React.useCallback(async item => {
    await wait(1500);

    if (throwErrorsRef.current) {
      throw new Error('this is an error');
    }

    const items = [];
    if (item === null) {
      for (let i = 0; i < 10; i++) {
        items.push({
          key: i.toString(),
          label: i.toString()
        });
      }
    } else {
      for (let i = 0; i < 10; i++) {
        items.push({
          key: item.key + '/' + i.toString(),
          label: item.label + '/' + i.toString(),
          isFolder: i % 2 === 0
        });
      }
    }

    return [items, null];
  }, []);

  const onToggleChange = React.useCallback((ev, checked) => {
    throwErrorsRef.current = checked;
  }, []);

  return (
    <>
      <div>
        <Toggle label={'Throw errors'} defaultChecked={throwErrorsRef.current} onChange={onToggleChange} />
      </div>
      <div className={exampleStyles.exampleContainer}>
        <AsyncTree onResolveItems={onResolveItems} strings={strings} />
      </div>
    </>
  );
};

const exampleStyles = mergeStyleSets({
  exampleContainer: {
    // 'display: flex' is important for the Tree to layout correctly.
    display: 'flex',
    // Just an example to prove that row direction also works for the Tree.
    flexDirection: 'row',
    width: 320,
    height: 200,
    userSelect: 'none'
  }
});
