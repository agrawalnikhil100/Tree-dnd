/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { DefaultButton } from '@fluentui/react/lib/Button';
import { Announced } from '@fluentui/react/lib/Announced';
import { IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';
import { mergeStyleSets } from '@fluentui/react/lib/Styling';
import { Toggle } from '@fluentui/react/lib/Toggle';
import * as React from 'react';
import { Tree } from '../Tree';
import { ITreeItem, SelectionType } from '../Tree.types';
import { cloneSet, getFolderKeys, produceItemsWithIcons } from './Tree.Example.Data';

export interface IControlledTreeExampleState {
  items: ITreeItem[];
  selectedItemKeys: Set<string>;
  expandedItemKeys: Set<string>;
  selection?: { [key: string]: boolean };
  customRender: boolean;
  announcedMessage: string;
}

export class TreeControlledExample extends React.Component<{}, IControlledTreeExampleState> {
  constructor(props: {}) {
    super(props);

    this.state = {
      items: produceItemsWithIcons,
      selectedItemKeys: new Set<string>(),
      expandedItemKeys: new Set<string>(),
      selection: {},
      customRender: false,
      announcedMessage: ''
    };
  }

  public render(): JSX.Element {
    const { items, selectedItemKeys, expandedItemKeys, customRender } = this.state;
    return (
      <div className={exampleStyles.exampleContainer}>
        <Toggle
          label="Custom Item Render"
          checked={customRender}
          onChange={(ev, value) => this.setState({ customRender: value })}
          onText="On (try selecting an item)"
          offText="Off"
        />
        <div className={exampleStyles.controls}>
          <DefaultButton onClick={this._onClickExpandAll}>{'Expand all'}</DefaultButton>
          <DefaultButton onClick={this._onClickCollapseAll}>{'Collapse all'}</DefaultButton>
          <DefaultButton onClick={this._onClickClearSelection}>{'Clear selection'}</DefaultButton>
        </div>
        <Tree
          items={items}
          selectedItemKeys={selectedItemKeys}
          expandedItemKeys={expandedItemKeys}
          strings={{
            listAriaLabel: 'test',
            moreCommandsAriaLabel: 'More Command'
          }}
          onItemExpand={this._onItemExpand}
          onItemCollapse={this._onItemCollapsed}
          onItemSelected={this._onItemSelected}
          getItemCommands={this._getCommands}
          onRenderItemContainer={this.state.customRender ? this.onRenderItem : undefined}
        />
        <Announced message={this.state.announcedMessage} />
      </div>
    );
  }

  private onRenderItem(
    item: ITreeItem,
    isSelected: boolean,
    isExpanded: boolean,
    index: number,
    defaultItemRender: () => JSX.Element
  ): JSX.Element {
    return (
      <div className={exampleStyles.itemContainer}>
        <div className={exampleStyles.selectionIndicator}>{isSelected ? 'ðŸ‘‰' : ''}</div>
        {defaultItemRender()}
      </div>
    );
  }

  private _onClickExpandAll = () => {
    this.setState(prev => {
      return {
        expandedItemKeys: getFolderKeys(prev.items)
      };
    });
    this.setState({ announcedMessage: 'All items expanded' });
  };

  private _onClickCollapseAll = () => {
    this.setState({ expandedItemKeys: new Set<string>(), announcedMessage: 'All items collapsed' });
  };

  private _onClickClearSelection = () => {
    this.setState({ selectedItemKeys: new Set<string>(), announcedMessage: 'All items cleared' });
  };

  private _onItemSelected = (
    item: ITreeItem,
    type,
    isSelected: boolean,
    isExpanded: boolean,
    index: number
  ): void => {
    let selectedItemKeys: Set<string>;

    if (type === SelectionType.Toggle) {
      selectedItemKeys = cloneSet(this.state.selectedItemKeys);

      if (selectedItemKeys.has(item.key)) {
        selectedItemKeys.delete(item.key);
      } else {
        selectedItemKeys.add(item.key);
      }
    } else {
      selectedItemKeys = new Set<string>();
      selectedItemKeys.add(item.key);
    }

    this.setState({ selectedItemKeys });
  };

  private _onItemExpand = (item: ITreeItem, index: number): void => {
    this.setState(prev => {
      const set = cloneSet(prev.expandedItemKeys);
      set.add(item.key);

      return { expandedItemKeys: set };
    });
  };

  private _onItemCollapsed = (item: ITreeItem, index: number): void => {
    this.setState(prev => {
      const set = cloneSet(prev.expandedItemKeys);
      set.delete(item.key);

      return { expandedItemKeys: set };
    });
  };

  private _getCommands = (): IContextualMenuItem[] => {
    const { selection } = this.state;

    const keys: string[] = ['newItem', 'share', 'mobile'];

    const items: IContextualMenuItem[] = [
      {
        key: keys[0],
        text: 'News',
        canCheck: true,
        isChecked: selection![keys[0]],
        onClick: this._onToggleSelect,
        icon: 'Add'
      },
      {
        key: keys[1],
        text: 'Share',
        canCheck: true,
        isChecked: selection![keys[1]],
        onClick: this._onToggleSelect,
        icon: 'Mail'
      },
      {
        key: keys[2],
        text: 'Mobile',
        canCheck: true,
        isChecked: selection![keys[2]],
        onClick: this._onToggleSelect,
        icon: 'Calendar'
      }
    ];

    return items;
  };

  private _onToggleSelect = (ev?: React.MouseEvent<HTMLButtonElement>, item?: IContextualMenuItem): void => {
    const { selection } = this.state;

    if (ev.preventDefault) {
      ev.preventDefault();
    }

    selection![item!.key] = !selection![item!.key];

    this.setState({
      selection: selection
    });
  };
}

const exampleStyles = mergeStyleSets({
  exampleContainer: {
    // 'display: flex' is important for the Tree to layout correctly.
    display: 'flex',
    flexDirection: 'column',
    width: 320,
    height: 320,
    userSelect: 'none'
  },
  controls: {
    display: 'flex',
    flexDirection: 'row'
  },
  itemContainer: {
    display: 'flex',
    flexDirection: 'row'
  },
  selectionIndicator: {
    width: 16,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center'
  }
});
