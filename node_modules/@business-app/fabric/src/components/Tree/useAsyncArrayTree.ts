/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as React from 'react';
import {
  IAsyncTreeItem,
  IErrorTreeSubItem,
  ILoadingTreeSubItem,
  ILoadMoreTreeSubItem
} from './AsyncTree.types';
import { IArrayTree, useArrayTree } from './useArrayTree';

export interface IAsyncArrayTree<TTreeItem extends IAsyncTreeItem>
  extends IArrayTree<TTreeItem | ILoadingTreeSubItem | ILoadMoreTreeSubItem | IErrorTreeSubItem> {
  load(item: TTreeItem): void;
  loadMore(item: TTreeItem, continuationToken: string): void;
}

export function useAsyncArrayTree<TTreeItem extends IAsyncTreeItem>(
  topLevelItems: TTreeItem[] = [],
  onLoadChildren: (
    item: TTreeItem,
    continuationToken?: string
  ) => Promise<
    [
      Array<Omit<TTreeItem, 'level' | 'isLoading' | 'hasLoaded' | 'canLoadMore' | 'loadingError'>>,
      string | null
    ]
  >,
  loadingSubItemFactory?: (parent: TTreeItem) => ILoadingTreeSubItem,
  loadMoreSubItemFactory?: (parent: TTreeItem, onLoadMoreClick: () => void) => ILoadMoreTreeSubItem,
  errorSubItemFactory?: (parent: TTreeItem, onRetryClick: () => void) => IErrorTreeSubItem
): IAsyncArrayTree<TTreeItem> {
  const { appendChildrenTo, remove, replace, refresh, ...rest } = useArrayTree<
    TTreeItem | ILoadingTreeSubItem | ILoadMoreTreeSubItem | IErrorTreeSubItem
  >(topLevelItems);

  const augmentChildren = React.useCallback(
    (
      item: IAsyncTreeItem,
      children: Array<
        Omit<IAsyncTreeItem, 'level' | 'isLoading' | 'hasLoaded' | 'canLoadMore' | 'loadingError'>
      >
    ) => {
      return children.map(child => {
        const augmentedItem: TTreeItem = child as TTreeItem;

        augmentedItem.level = item !== null ? item.level + 1 : 0;
        augmentedItem.isFolder = child.isFolder === undefined ? true : child.isFolder;
        augmentedItem.isLoading = false;
        augmentedItem.hasLoaded = false;
        augmentedItem.canLoadMore = false;
        augmentedItem.loadingError = null;

        return augmentedItem;
      });
    },
    []
  );

  const load = React.useCallback(
    async (item: TTreeItem | null, continuationToken?: string | null) => {
      if (item !== null && (item.isLoading || (item.hasLoaded && !item.canLoadMore && !item.loadingError))) {
        throw new Error('item');
      }

      if (item !== null && !item.canLoadMore && continuationToken) {
        throw new Error('item');
      }

      if (item !== null) {
        item.isLoading = true;
        item.loadingError = null;
      }

      const loadingSubItem: ILoadingTreeSubItem | null = loadingSubItemFactory
        ? loadingSubItemFactory(item)
        : null;

      if (loadingSubItem !== null) {
        appendChildrenTo(item, [loadingSubItem]);
      }

      try {
        const [children, newContinuationToken] = await onLoadChildren(item, continuationToken);

        if (item !== null) {
          item.isLoading = false;
          item.hasLoaded = true;
          item.canLoadMore = newContinuationToken !== null;
          item.loadingError = null;
        }

        if (loadingSubItem !== null) {
          remove(loadingSubItem);
        }

        // If the item has no children, mark it as a leaf.
        if (children.length === 0) {
          item.isFolder = false;
          refresh();
          return;
        }

        const loadMoreSubItem: ILoadMoreTreeSubItem | null =
          newContinuationToken !== null && loadMoreSubItemFactory !== undefined
            ? loadMoreSubItemFactory(item, () => {
                remove(loadMoreSubItem);
                load(item, newContinuationToken);
              })
            : null;

        appendChildrenTo(item, [
          ...(augmentChildren(item, children) as TTreeItem[]),
          ...(loadMoreSubItem !== null ? [loadMoreSubItem] : [])
        ]);
      } catch (e) {
        if (item !== null) {
          item.isLoading = false;
          item.hasLoaded = true;
          item.loadingError = e;
        }

        const errorSubItem: IErrorTreeSubItem | null = errorSubItemFactory
          ? errorSubItemFactory(item, () => {
              remove(errorSubItem);
              load(item, continuationToken);
            })
          : null;

        if (loadingSubItem !== null && errorSubItem !== null) {
          replace(loadingSubItem, errorSubItem);
        } else if (loadingSubItem !== null) {
          remove(loadingSubItem);
        } else if (errorSubItem !== null) {
          appendChildrenTo(item, [errorSubItem]);
        }
      }
    },
    [onLoadChildren, appendChildrenTo, remove, refresh]
  );

  const loadMore = React.useCallback(
    async (item: TTreeItem | null, continuationToken: string) => {
      if (continuationToken === '') {
        throw new Error('continuationToken');
      }

      load(item, continuationToken);
    },
    [load]
  );

  return {
    load,
    loadMore,
    remove,
    replace,
    appendChildrenTo,
    refresh,
    ...rest
  };
}
