/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { getFocusStyle, IStyle } from '@fluentui/react/lib/Styling';
import { TreeAutomationSelectors } from './Tree.selectors';
import { ITreeStyleProps, ITreeStyles } from './Tree.types';

const buttonHighContrastFocus = {
  left: -2,
  top: -2,
  bottom: -2,
  right: -2,
  border: 'none',
  outlineColor: 'ButtonText'
};

export const getStyles = (props: ITreeStyleProps): ITreeStyles => {
  const { className, theme, nodeHeight, iconWidth } = props;
  const { palette } = theme;

  const sharedIconContainerStyle: IStyle = {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    height: '100%',
    width: iconWidth,
    flex: '0 0 auto'
  };

  const sharedIconStyle: IStyle = {
    flex: '0 0 auto',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    width: '1em',
    height: '1em',
    padding: 0,
    margin: 0
  };

  const blankIconBlockStyle: IStyle = {
    width: iconWidth,
    flex: '0 0 auto'
  };

  // Menu button should be a little smaller than the node to account for borders.
  const menuButtonSize = nodeHeight - 2;

  const backgroundColor = palette.neutralLighter;
  const hoveredRowColor = palette.neutralQuaternaryAlt;
  const selectedRowColor = palette.neutralQuaternary;

  return {
    root: [
      className,
      TreeAutomationSelectors.treeRootClassName,
      {
        display: 'flex',
        boxSizing: 'border-box',
        height: '100%',
        width: '100%',
        backgroundColor: backgroundColor
      }
    ],
    innerRoot: {
      display: 'block',
      position: 'relative',
      flex: '1 1 auto',
      boxSizing: 'border-box'
    },
    focusZone: {},
    scrollView: {
      display: 'flex',
      overflow: 'auto',
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    list: {
      display: 'flex',
      flex: '0 0 auto',
      minWidth: '100%',
      minHeight: '100%',
      selectors: {
        ['& .ms-List-surface']: {
          width: '100%',
          height: '100%'
        }
      }
    },
    item: [
      getFocusStyle(theme, -1, 'relative', buttonHighContrastFocus),
      TreeAutomationSelectors.treeNodeClassName,
      {
        display: 'flex',
        flex: '1 1 auto',
        flexDirection: 'row',
        alignItems: 'center',
        whiteSpace: 'nowrap',
        height: nodeHeight,
        position: 'relative',
        outline: 'none',
        border: '1px solid transparent',
        boxSizing: 'border-box'
      }
    ],
    itemIsSelectable: {
      cursor: 'pointer'
    },
    itemIsNotSelectable: {
      selectors: {
        ':hover': {
          backgroundColor: 'initial'
        }
      }
    },
    itemIsSelected: {
      backgroundColor: selectedRowColor,
      selectors: {
        [`& .${TreeAutomationSelectors.menuButtonClassName}`]: {
          visibility: 'visible'
        }
      }
    },
    itemIsNotSelected: {
      selectors: {
        ':hover': {
          backgroundColor: hoveredRowColor
        },
        [`:hover& .${TreeAutomationSelectors.menuButtonClassName}`]: {
          visibility: 'visible'
        },
        [`& .${TreeAutomationSelectors.openMenuClassName}`]: {
          visibility: 'visible'
        }
      }
    },
    itemLabel: {
      flex: '1 1 auto',
      whiteSpace: 'nowrap',
      maxWidth: '100%',
      marginLeft: '5px',
      outline: 'none',
      marginRight: 12
    },
    expandIconButton: [
      TreeAutomationSelectors.collapseExpandClassName,
      {
        ...sharedIconContainerStyle,
        color: palette.black
      }
    ],
    expandIconButtonEnabled: {
      cursor: 'pointer'
    },
    expandIconButtonDisabled: {
      opacity: 0.4
    },
    expandIcon: {
      ...sharedIconStyle,
      fontSize: 12,
      transition: '0.2s transform',
      transformOrigin: 'center'
    },
    expandIconExpanded: {
      transform: 'rotate(90deg)'
    },
    noExpandIcon: {
      ...blankIconBlockStyle
    },
    levelIndentSpacer: {
      ...blankIconBlockStyle
    },
    menuButton: [
      TreeAutomationSelectors.menuButtonClassName,
      {
        flex: '0 0 auto',
        // Menu button should be hidden by default.
        // We will show it in the following cases, though: a row is hovered, a row is selected, or the menu is open.
        visibility: 'hidden',
        position: 'sticky',
        right: 0,
        width: menuButtonSize,
        height: menuButtonSize,
        fontSize: 16,
        border: 'none',
        cursor: 'pointer',
        selectors: {
          ':hover': {
            color: palette.themePrimary
          }
        }
      }
    ],
    menuButtonSelectedRowClosedMenu: {
      backgroundColor: selectedRowColor,
      selectors: {
        ':hover': {
          backgroundColor: hoveredRowColor
        }
      }
    },
    menuButtonSelectedRowOpenMenu: [
      TreeAutomationSelectors.openMenuClassName,
      {
        color: palette.themePrimary,
        backgroundColor: hoveredRowColor
      }
    ],
    menuButtonUnselectedRowClosedMenu: {
      backgroundColor: hoveredRowColor,
      selectors: {
        ':hover': {
          backgroundColor: selectedRowColor
        }
      }
    },
    menuButtonUnselectedRowOpenMenu: [
      TreeAutomationSelectors.openMenuClassName,
      {
        color: palette.themePrimary,
        backgroundColor: selectedRowColor
      }
    ],
    menuButtonDisabled: {
      color: palette.neutralSecondaryAlt,
      backgroundColor: 'transparent',
      selectors: {
        ':hover': {
          color: palette.neutralSecondaryAlt,
          backgroundColor: 'transparent'
        }
      }
    },
    itemIconContainer: {
      ...sharedIconContainerStyle
    },
    itemIcon: {
      ...sharedIconStyle,
      fontSize: 16
    },
    noItemIcon: {
      flex: '0 0 auto',
      // By default, don't take up any space with the no icon element (some trees may not even have icons).
      width: 0
    }
  };
};
