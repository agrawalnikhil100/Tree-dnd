/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import {
  ComponentPage,
  ExampleCard,
  IComponentDemoPageProps,
  PropertiesTableSet
} from '@fluentui/react-docsite-components';
import * as React from 'react';
import { TreeAlternatingRowColorExample } from './examples/Tree.AlternatingRowColorExample';
import { TreeBasicUncontrolledExample } from './examples/Tree.BasicUncontrolled.Example';
import { TreeControlledExample } from './examples/Tree.Controlled.Example';
import { TreeHeavilyCustomizedExample } from './examples/Tree.HeavilyCustomized.Example';
import { TreeOverflowAndLayoutExample } from './examples/Tree.OverflowAndLayout.Example';

import AsyncTreeBasicExampleCode from '!!raw-loader!../../../src/components/Tree/examples/AsyncTree.BasicExample.tsx';
import AsyncTreePaginationExampleCode from '!!raw-loader!../../../src/components/Tree/examples/AsyncTree.PaginationExample.tsx';
import ShimmeredTreeBasicExampleCode from '!!raw-loader!../../../src/components/Tree/examples/ShimmeredTree.BasicExample.tsx';
import TreeAlternatingRowColorExampleCode from '!!raw-loader!../../../src/components/Tree/examples/Tree.AlternatingRowColorExample.tsx';
import TreeBasicUncontrolledExampleCode from '!!raw-loader!../../../src/components/Tree/examples/Tree.BasicUncontrolled.Example.tsx';
import TreeControlledExampleCode from '!!raw-loader!../../../src/components/Tree/examples/Tree.Controlled.Example.tsx';
import TreeHeavilyCustomizedExampleCode from '!!raw-loader!../../../src/components/Tree/examples/Tree.HeavilyCustomized.Example.tsx';
import TreeOverflowAndLayoutExampleCode from '!!raw-loader!../../../src/components/Tree/examples/Tree.OverflowAndLayout.Example.tsx';
import TreePropertiesTableSet from '!!raw-loader!../../../src/components/Tree/Tree.types.ts';
import { AsyncTreeBasicExample } from './examples/AsyncTree.BasicExample';
import { AsyncTreePaginationExample } from './examples/AsyncTree.PaginationExample';
import { ShimmeredTreeBasicExample } from './examples/ShimmeredTree.BasicExample';

export interface IComponentDemoPageState {
  selection?: { [key: string]: boolean };
}

export class TreePage extends React.Component<IComponentDemoPageProps, IComponentDemoPageState> {
  public state: IComponentDemoPageState = {
    selection: {}
  };

  public render(): JSX.Element {
    return (
      <ComponentPage
        styles={{ navigation: { display: 'none' } }}
        title={'Tree'}
        componentName="TreeExample"
        exampleCards={
          <div>
            <ExampleCard
              title="Basic Uncontrolled Tree (with no contextual menu options)"
              code={TreeBasicUncontrolledExampleCode}
            >
              <TreeBasicUncontrolledExample />
            </ExampleCard>
            <ExampleCard title="Controlled Tree" code={TreeControlledExampleCode}>
              <TreeControlledExample />
            </ExampleCard>
            <ExampleCard title="Alternating Row Color Tree" code={TreeAlternatingRowColorExampleCode}>
              <TreeAlternatingRowColorExample />
            </ExampleCard>
            <ExampleCard title="Heavily Customized Tree" code={TreeHeavilyCustomizedExampleCode}>
              <TreeHeavilyCustomizedExample />
            </ExampleCard>
            <ExampleCard title="Overflow and Layout" code={TreeOverflowAndLayoutExampleCode}>
              <TreeOverflowAndLayoutExample />
            </ExampleCard>
            <ExampleCard title="Lazy loaded" code={AsyncTreeBasicExampleCode}>
              <AsyncTreeBasicExample />
            </ExampleCard>
            <ExampleCard title="Shimmered Tree" code={ShimmeredTreeBasicExampleCode}>
              <ShimmeredTreeBasicExample />
            </ExampleCard>
            <ExampleCard title="Lazy loaded with pagination" code={AsyncTreePaginationExampleCode}>
              <AsyncTreePaginationExample />
            </ExampleCard>
            <ExampleCard title="Shimmered Tree" code={ShimmeredTreeBasicExampleCode}>
              <ShimmeredTreeBasicExample />
            </ExampleCard>
          </div>
        }
        propertiesTables={<PropertiesTableSet sources={[TreePropertiesTableSet]} />}
        overview={
          <div>
            <p>Provides a tree control.</p>
          </div>
        }
        isHeaderVisible={this.props.isHeaderVisible}
      />
    );
  }
}
