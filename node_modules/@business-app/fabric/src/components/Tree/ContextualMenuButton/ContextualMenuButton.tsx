/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { Icon } from '@fluentui/react/lib/Icon';
import { mergeStyles } from '@fluentui/react/lib/Styling';
import { getId } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { IContextualMenuButtonProps } from './ContextualMenuButton.types';

export class ContextualMenuButton extends React.Component<IContextualMenuButtonProps> {
  public _button = React.createRef<HTMLButtonElement>();
  private _contextMenuExpandedId: string = getId('ba-Tree-ContextMenu-Expanded');

  public render(): JSX.Element {
    const {
      ariaLabel,
      className,
      directionalHint,
      disabled,
      iconProps,
      isOpen,
      items,
      menuClosedStyle,
      menuDisabledStyle,
      menuOpenStyle,
      onClick,
      onDismiss,
      onRenderContextualMenu
    } = this.props;

    const buttonStyle = mergeStyles(
      className,
      isOpen ? menuOpenStyle : menuClosedStyle,
      disabled ? menuDisabledStyle : undefined
    );

    return (
      <>
        <button
          ref={this._button}
          className={buttonStyle}
          onClick={onClick}
          onContextMenu={onClick}
          onDoubleClick={this._doubleClickEater}
          disabled={disabled}
          aria-haspopup={true}
          aria-label={ariaLabel}
          aria-expanded={isOpen}
          aria-controls={isOpen ? this._contextMenuExpandedId : null}
          data-is-focusable={false}
        >
          <Icon {...iconProps} />
        </button>
        {isOpen &&
          items &&
          this._button.current &&
          onRenderContextualMenu({
            items: items,
            onDismiss: onDismiss,
            shouldFocusOnMount: true,
            gapSpace: 0,
            directionalHint: directionalHint,
            isBeakVisible: false,
            ariaLabel: ariaLabel,
            target: this._button.current,
            id: this._contextMenuExpandedId
          })}
      </>
    );
  }

  private _doubleClickEater = (ev: React.MouseEvent<HTMLButtonElement>): void => {
    ev.stopPropagation();
    ev.preventDefault();
  };
}
