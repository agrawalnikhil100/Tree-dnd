/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { Shimmer, ShimmerElementType } from '@fluentui/react/lib/Shimmer';
import { IShimmerProps } from '@fluentui/react/lib/Shimmer';
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import {
  IShimmeredTreeItem,
  IShimmeredTreeProps,
  IShimmeredTreeStyleProps,
  IShimmeredTreeStyles
} from './ShimmeredTree.types';
import { Tree } from './Tree';
import { defaultIconWidth } from './Tree.base';
import { ITreeItem } from './Tree.types';

const getClassNames = classNamesFunction<IShimmeredTreeStyleProps, IShimmeredTreeStyles>();

export const ShimmeredTree = (props: IShimmeredTreeProps) => {
  const { onRenderItemLabelContent, shimmerProps, shimmerAs: ShimmerAs, styles, ...rest } = props;

  const { theme, className, iconWidth, nodeHeight } = props;
  const classNames = React.useMemo(
    () =>
      getClassNames(styles, {
        nodeHeight,
        iconWidth,
        className,
        theme: theme!
      }),
    [styles, theme, className, iconWidth, nodeHeight]
  );

  let ShimmerType: React.ComponentType<IShimmerProps> = Shimmer;

  if (ShimmerAs !== undefined) {
    // eslint-disable-next-line @typescript-eslint/no-shadow
    ShimmerType = (props: IShimmerProps) => <ShimmerAs {...props} defaultRender={Shimmer} />;
  }

  const onTreeRenderItemLabelContent = React.useCallback(
    (
      item: ITreeItem,
      isSelected: boolean,
      isExpanded: boolean,
      index: number,
      defaultRender: () => JSX.Element
    ) => {
      const shimmerRender = () => {
        return (
          <ShimmerType
            styles={classNames.subComponentStyles.shimmer}
            shimmerElements={[
              { type: ShimmerElementType.line, width: iconWidth || defaultIconWidth, height: nodeHeight },
              { type: ShimmerElementType.gap, width: 4, height: nodeHeight },
              { type: ShimmerElementType.line, height: nodeHeight }
            ]}
            {...shimmerProps}
          />
        );
      };

      if (onRenderItemLabelContent !== undefined) {
        return onRenderItemLabelContent(item, isSelected, isExpanded, index, shimmerRender);
      }

      if ((item as IShimmeredTreeItem).isShimmered === true) {
        return shimmerRender();
      } else {
        return defaultRender();
      }
    },
    [shimmerProps, ShimmerType, iconWidth, nodeHeight, classNames, onRenderItemLabelContent]
  );

  return <Tree styles={classNames} {...rest} onRenderItemLabelContent={onTreeRenderItemLabelContent} />;
};
