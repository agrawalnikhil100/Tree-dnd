/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { Link } from '@fluentui/react/lib/Link';
import { Spinner } from '@fluentui/react/lib/Spinner';
import * as React from 'react';
import {
  IAsyncTreeItem,
  IAsyncTreeProps,
  IErrorTreeSubItem,
  ILoadingTreeSubItem,
  ILoadMoreTreeSubItem
} from './AsyncTree.types';
import { Tree } from './Tree';
import { defaultIconWidth } from './Tree.base';
import { ITreeItem, ITreeProps } from './Tree.types';
import { useAsyncArrayTree } from './useAsyncArrayTree';

const LoadingSubItemKeySuffix = '-loading';
const LoadMoreSubItemKeySuffix = '-load-more';
const ErrorSubItemKeySuffix = '-error';

export const AsyncTree = (props: IAsyncTreeProps) => {
  const {
    onResolveItems,
    onItemExpand,
    onItemCollapse,
    onItemDoubleClicked,
    onItemKeyDown,
    onItemSelected,
    onRenderContextualMenu,
    onRenderItemContainer,
    onRenderItemLabel,
    onRenderItemLabelContent,
    onRenderExpandIcon,
    ...rest
  } = props;

  const loadingSubItemFactory = React.useCallback(
    (item: IAsyncTreeItem | null): ILoadingTreeSubItem => {
      const { strings } = props;

      return {
        key: (item !== null ? item.key : 'top') + LoadingSubItemKeySuffix,
        label: strings.loadingSubItemLabel || 'Loading...',
        level: item !== null ? item.level + 1 : 0,
        isFolder: false,
        setSize: 1,
        indexInParent: 0,
        disableFocus: true,
        disableSelection: true
      };
    },
    [props.strings]
  );

  const loadMoreSubItemFactory = React.useCallback(
    (item: IAsyncTreeItem | null, onLoadMoreClick: () => void): ILoadMoreTreeSubItem => {
      const { strings } = props;

      return {
        key: (item !== null ? item.key : 'top') + LoadMoreSubItemKeySuffix,
        label: strings.loadMoreSubItemLabel || 'Load more',
        level: item !== null ? item.level + 1 : 0,
        isFolder: false,
        setSize: 1,
        indexInParent: 0,
        disableFocus: true,
        disableSelection: true,
        onLoadMoreClick
      };
    },
    [props.strings]
  );

  const errorSubItemFactory = React.useCallback(
    (item: IAsyncTreeItem, onRetryClick: () => void, e?: Error): IErrorTreeSubItem => {
      return {
        key: (item !== null ? item.key : 'top') + ErrorSubItemKeySuffix,
        label: '',
        level: item !== null ? item.level + 1 : 0,
        isFolder: false,
        setSize: 1,
        indexInParent: 0,
        iconProps: {
          iconName: 'ErrorBadge',
          styles: {
            root: {
              color: 'red'
            }
          }
        },
        disableFocus: true,
        disableSelection: true,
        onRetryClick
      };
    },
    []
  );

  const { items, load, clear } = useAsyncArrayTree<IAsyncTreeItem>(
    [],
    onResolveItems,
    loadingSubItemFactory,
    loadMoreSubItemFactory,
    errorSubItemFactory
  );

  React.useEffect(() => {
    load(null);
    return () => {
      clear();
    };
  }, [load, clear]);

  const onTreeItemExpand = React.useCallback(
    (item: IAsyncTreeItem, index: number) => {
      if (!item.isLoading && !item.hasLoaded) {
        load(item);
      }

      if (onItemExpand !== undefined) {
        onItemExpand(item, index);
      }
    },
    [load, onItemExpand]
  );

  const onTreeRenderLabelContent = React.useCallback(
    (
      item: ITreeItem,
      isSelected: boolean,
      isNodeExpanded: boolean,
      index: number,
      defaultRender: () => JSX.Element
    ) => {
      const { strings } = props;

      const customRender = () => {
        if (isErrorSubItem(item)) {
          return (
            <>
              {strings.errorSubItemLabel || 'Error loading.'}&nbsp;
              <Link onClick={item.onRetryClick}>{strings.errorSubItemRetryLinkText || 'Try again'}</Link>
            </>
          );
        } else if (isLoadMoreSubItem(item)) {
          return <Link onClick={item.onLoadMoreClick}>{defaultRender()}</Link>;
        }

        return defaultRender();
      };

      if (onRenderItemLabelContent !== undefined) {
        return onRenderItemLabelContent(item, isSelected, isNodeExpanded, index, customRender);
      }

      return customRender();
    },
    [load, onRenderItemLabelContent, props.strings]
  );

  const onTreeRenderExpandIcon = React.useCallback(
    (
      item: ITreeItem,
      isSelected: boolean,
      isNodeExpanded: boolean,
      index: number,
      defaultRender: () => JSX.Element
    ) => {
      const customRender = () => {
        if (isLoadingSubItem(item)) {
          return <Spinner styles={{ root: { width: props.iconWidth || defaultIconWidth } }} />;
        } else if (isLoadMoreSubItem(item)) {
          // Remove the indentation reserved for the expand icon.
          return null;
        } else if (isErrorSubItem(item)) {
          // Remove the indentation reserved for the expand icon.
          return null;
        }

        return defaultRender();
      };

      if (onRenderExpandIcon !== undefined) {
        return onRenderExpandIcon(item, isSelected, isNodeExpanded, index, customRender);
      }

      return customRender();
    },
    [onRenderExpandIcon]
  );

  return (
    <Tree
      {...rest}
      onItemExpand={onTreeItemExpand as ITreeProps<ITreeItem>['onItemExpand']}
      onItemCollapse={onItemCollapse as ITreeProps<ITreeItem>['onItemCollapse']}
      onItemDoubleClicked={onItemDoubleClicked as ITreeProps<ITreeItem>['onItemDoubleClicked']}
      onItemKeyDown={onItemKeyDown as ITreeProps<ITreeItem>['onItemKeyDown']}
      onItemSelected={onItemSelected as ITreeProps<ITreeItem>['onItemSelected']}
      onRenderContextualMenu={onRenderContextualMenu as ITreeProps<ITreeItem>['onRenderContextualMenu']}
      onRenderItemContainer={onRenderItemContainer as ITreeProps<ITreeItem>['onRenderItemContainer']}
      onRenderItemLabel={onRenderItemLabel as ITreeProps<ITreeItem>['onRenderItemLabel']}
      onRenderItemLabelContent={onTreeRenderLabelContent as ITreeProps<ITreeItem>['onRenderItemLabelContent']}
      onRenderExpandIcon={onTreeRenderExpandIcon as ITreeProps<ITreeItem>['onRenderExpandIcon']}
      items={items as IAsyncTreeItem[]}
    />
  );
};

function isLoadingSubItem(item: ITreeItem): item is ILoadingTreeSubItem {
  return (
    item.key.substring(Math.max(0, item.key.length - LoadingSubItemKeySuffix.length), item.key.length) ===
    LoadingSubItemKeySuffix
  );
}

function isLoadMoreSubItem(item: ITreeItem): item is ILoadMoreTreeSubItem {
  return (
    item.key.substring(Math.max(0, item.key.length - LoadMoreSubItemKeySuffix.length), item.key.length) ===
    LoadMoreSubItemKeySuffix
  );
}

function isErrorSubItem(item: ITreeItem): item is IErrorTreeSubItem {
  return (
    item.key.substring(Math.max(0, item.key.length - ErrorSubItemKeySuffix.length), item.key.length) ===
    ErrorSubItemKeySuffix
  );
}
