/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */
import {
  AnimationClassNames,
  getGlobalClassNames,
  HighContrastSelector,
  IconFontSizes,
  IStyle,
  ScreenWidthMinXLarge
} from '@fluentui/react/lib/Styling';

import { IPaneStyleProps, IPaneStyles, PaneSize } from './Pane.types';

const GlobalClassNames = {
  root: 'ba-Pane',
  main: 'ba-Pane-main',
  contentInner: 'ba-Pane-contentInner',
  scrollableContent: 'ba-Pane-scrollableContent',
  navigation: 'ba-Pane-navigation',
  commands: 'ba-Pane-commands',
  closeButton: 'ba-Pane-closeButton ba-PaneAction-close',
  header: 'ba-Pane-header',
  headerText: 'ba-Pane-headerText',
  content: 'ba-Pane-content',
  isOpen: 'is-open',
  hasCloseButton: 'ba-Pane--hasCloseButton'
};

const paneWidth = {
  full: '100%',
  sm: 340,
  md: 592,
  lg: 976
};

const paneMargin = {
  auto: 'auto',
  none: 0
};

const sharedPaddingStyles = {
  paddingLeft: '16px',
  paddingRight: '16px'
};

const smallPanelSelectors = {
  width: paneWidth.sm,
  minWidth: paneWidth.sm
};

const mediumPanelSelectors = {
  width: paneWidth.md,
  minWidth: paneWidth.md
};

const largePanelSelectors = {
  width: paneWidth.lg,
  minWidth: paneWidth.lg
};

const getPaneBreakpoints = (type: PaneSize): { [x: string]: IStyle } | undefined => {
  let selectors;
  switch (type) {
    case PaneSize.small:
      selectors = {
        ...smallPanelSelectors
      };
      break;
    case PaneSize.medium:
      selectors = {
        ...mediumPanelSelectors
      };
      break;
    case PaneSize.large:
      selectors = {
        ...largePanelSelectors
      };
      break;
    default:
      break;
  }

  return selectors;
};

export const getStyles = (props: IPaneStyleProps): IPaneStyles => {
  const { className, hasCloseButton, headerClassName, isOpen, theme, type = PaneSize.small } = props;
  const { palette, effects, fonts } = theme;
  const classNames = getGlobalClassNames(GlobalClassNames, theme);

  return {
    root: [
      classNames.root,
      theme.fonts.medium,
      isOpen && classNames.isOpen,
      hasCloseButton && classNames.hasCloseButton,
      {
        pointerEvents: 'auto',
        position: 'relative',
        display: 'flex',
        flexDirection: 'column',
        overflowX: 'hidden',
        overflowY: 'auto',
        top: 0,
        left: 'auto',
        right: 0,
        bottom: 0,
        ...getPaneBreakpoints(type),
        height: '100%',
        backgroundColor: 'rgb(255, 255, 255)',
        borderLeft: `1px solid ${palette.neutralLight}`,
        borderRight: `1px solid ${palette.neutralLight}`,
        boxShadow: 'none',
        WebkitOverflowScrolling: 'touch',
        selectors: {
          [HighContrastSelector]: {
            borderLeft: `3px solid ${palette.neutralLight}`,
            borderRight: `3px solid ${palette.neutralLight}`
          }
        }
      },
      isOpen && AnimationClassNames.slideRightIn40,
      isOpen && AnimationClassNames.slideLeftIn40,
      !isOpen && AnimationClassNames.slideLeftOut40,
      !isOpen && AnimationClassNames.slideRightOut40,
      className
    ],
    closeButton: [
      classNames.closeButton,
      {
        position: 'absolute',
        top: '0px',
        left: 'auto',
        right: '0px',
        marginTop: '14px',
        marginRight: '14px',
        marginBottom: '14px',
        marginLeft: '14px',
        flexShrink: '0',
        color: theme.palette.neutralSecondary,
        fontSize: IconFontSizes.large,
        selectors: {
          [`@media (min-width: ${ScreenWidthMinXLarge}px)`]: {
            marginTop: '14px'
          },
          ':hover': { color: theme.palette.neutralPrimary }
        }
      }
    ],
    contentInner: [
      classNames.contentInner,
      {
        display: 'flex',
        flexDirection: 'column',
        flexGrow: 1,
        overflowY: 'hidden'
      }
    ],
    header: [
      classNames.header,
      sharedPaddingStyles,
      {
        margin: '14px 0',
        flexShrink: 0,
        selectors: {
          [`@media (min-width: ${ScreenWidthMinXLarge}px)`]: {
            marginTop: '14px'
          }
        }
      }
    ],
    headerText: [
      classNames.headerText,
      fonts.xLarge,
      {
        color: palette.neutralPrimary,
        lineHeight: '27px',
        margin: 0,
        overflowWrap: 'break-word',
        wordWrap: 'break-word',
        wordBreak: 'break-word',
        hyphens: 'auto'
      },
      headerClassName
    ],
    scrollableContent: [
      classNames.scrollableContent,
      sharedPaddingStyles,
      {
        overflowY: 'auto'
      }
    ],
    content: [
      classNames.content,
      sharedPaddingStyles,
      {
        marginBottom: 0,
        paddingBottom: 20
      }
    ]
  };
};
