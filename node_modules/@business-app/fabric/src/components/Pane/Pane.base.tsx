/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IconButton } from '@fluentui/react/lib/Button';
import { IProcessedStyleSet } from '@fluentui/react/lib/Styling';
import { classNamesFunction, divProperties, getId, getNativeProps } from '@fluentui/react/lib/Utilities';
import * as React from 'react';

import { IPaneProps, IPaneStyleProps, IPaneStyles } from './Pane.types';

const getClassNames = classNamesFunction<IPaneStyleProps, IPaneStyles>();

function getPaneClassNames(props: IPaneProps) {
  return getClassNames(props.styles!, props);
}

const _onRenderDefaultHeader = (
  props: IPaneProps,
  defaultRender?: (props?: IPaneProps) => JSX.Element | null,
  headerTextId?: string | undefined
): JSX.Element | null => {
  const { headerText, headerTextProps } = props;
  const classNames = getPaneClassNames(props);

  if (headerText) {
    return (
      <div className={classNames.header}>
        <div
          className={classNames.headerText}
          id={headerTextId}
          role="heading"
          aria-level={2}
          {...headerTextProps}
        >
          {headerText}
        </div>
      </div>
    );
  }
  return null;
};

const _onRenderDefaultBody = (props: React.PropsWithChildren<IPaneProps>): JSX.Element => {
  const classNames = getPaneClassNames(props);
  return <div className={classNames.content}>{props.children}</div>;
};

const onRenderNavigation = (
  classNames: IProcessedStyleSet<IPaneStyles>,
  onClick: () => void,
  hasCloseButton?: boolean,
  closeButtonAriaLabel?: string
): JSX.Element | null => {
  if (hasCloseButton) {
    return (
      <IconButton
        className={classNames.closeButton}
        onClick={onClick}
        ariaLabel={closeButtonAriaLabel}
        title={closeButtonAriaLabel}
        iconProps={{ iconName: 'Cancel' }}
      />
    );
  }
  return null;
};

export const PaneBase: React.FunctionComponent<IPaneProps> = (
  props: React.PropsWithChildren<IPaneProps>
): JSX.Element => {
  const {
    headerText,
    isOpen,
    onRenderHeader = _onRenderDefaultHeader,
    onRenderBody = _onRenderDefaultBody,
    onDismiss,
    hasCloseButton,
    closeButtonAriaLabel
  } = props;

  if (!isOpen) {
    return null;
  }

  const id = getId('Pane');
  const headerTextId = headerText && id + '-headerText';
  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties);

  const classNames: IProcessedStyleSet<IPaneStyles> = getPaneClassNames(props);
  const header = onRenderHeader(props, _onRenderDefaultHeader, headerTextId);

  return (
    <div aria-hidden={!isOpen} {...nativeProps} className={classNames.root}>
      <div data-is-visible={true}>
        {onRenderNavigation(classNames, onDismiss, hasCloseButton, closeButtonAriaLabel)}
      </div>
      <div className={classNames.contentInner}>
        {header}
        <div className={classNames.scrollableContent} data-is-scrollable={true}>
          {onRenderBody(props, _onRenderDefaultBody)}
        </div>
      </div>
    </div>
  );
};
