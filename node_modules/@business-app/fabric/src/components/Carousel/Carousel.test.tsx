/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as Enzyme from 'enzyme';
import 'jest';
import { DefaultButton } from '@fluentui/react/lib/Button';
import { setIconOptions } from '@fluentui/react/lib/Styling';
import { getTheme } from '@fluentui/react/lib/Styling';
import * as React from 'react';
import { Carousel, ICarouselProps } from '.';
import { ICarouselState } from './Carousel.types';
import { getMockContent } from './examples/Carousel.Example.Data';

// Suppress icon warnings.
setIconOptions({
  disableWarnings: true
});

describe('Carousel Tests', () => {
  let props: ICarouselProps;

  jest.useFakeTimers();

  beforeEach(() => {
    props = {
      theme: getTheme(),
      items: getMockContent(),
      navPreviousButtonAriaLabel: 'Previous',
      navNextButtonAriaLabel: 'Next',
      indicatorButtonsAriaLabel: 'Item',
      playButtonAriaLabel: 'Play',
      pauseButtonAriaLabel: 'Pause'
    };
    jest.useFakeTimers();
  });

  afterEach(() => {
    jest.clearAllTimers();
  });

  it('should render the component', () => {
    const wrapper = Enzyme.mount<ICarouselProps, ICarouselState>(<Carousel {...props} />);
    expect(wrapper).toMatchSnapshot();
    wrapper.unmount();
  });

  it('should render the component with the wrapper class', () => {
    const wrapper = Enzyme.shallow<ICarouselProps, ICarouselState>(
      <Carousel {...props} className="test-class" />
    );
    expect(wrapper.find('.test-class')).toBeDefined();
    wrapper.unmount();
  });

  it('should play cycle', () => {
    const wrapper = Enzyme.mount<ICarouselProps, ICarouselState>(<Carousel {...props} delay={100} />);
    const carousel = wrapper.childAt(0);
    const state = () => carousel.instance().state as ICarouselState;

    jest.advanceTimersByTime(50);

    expect(state().isAutoplaySuspended).toBeFalsy();
    expect(state().isAutoplayButtonPaused).toBeFalsy();
    expect(state().selectedIndex).toBe(0);

    jest.advanceTimersByTime(100);
    expect(state().selectedIndex).toBe(1);

    jest.advanceTimersByTime(100);
    expect(state().selectedIndex).toBe(2);

    wrapper.setProps({ isAutoPlayDisabled: true });
    jest.advanceTimersByTime(100);
    expect(state().selectedIndex).toBe(2);
    jest.advanceTimersByTime(1000);
    expect(state().selectedIndex).toBe(2);
    wrapper.setProps({ isAutoPlayDisabled: false });

    jest.advanceTimersByTime(100);
    expect(state().selectedIndex).toBe(3);

    jest.advanceTimersByTime(100);
    expect(state().selectedIndex).toBe(0);

    wrapper.unmount();
  });

  it('should show controls and nav', () => {
    const rendered = Enzyme.render<ICarouselProps, ICarouselState>(<Carousel {...props} />);

    expect(rendered.find('.ba-Carousel-tooltipControl').length).toBe(2);
    expect(rendered.find('.ba-Carousel-tooltipControl-previous').length).toBe(1);
    expect(rendered.find('.ba-Carousel-tooltipControl-next').length).toBe(1);

    expect(rendered.find('.ba-Carousel-indicatorsWrapper').length).toBe(1);
  });

  it('should hide controls and nav', () => {
    const rendered = Enzyme.render<ICarouselProps, ICarouselState>(
      <Carousel {...props} hideNavigation={true} hideIndicators={true} />
    );

    expect(rendered.find('.ba-Carousel-tooltipControl').length).toBe(0);
    expect(rendered.find('.ba-Carousel-tooltipControl-previous').length).toBe(0);
    expect(rendered.find('.ba-Carousel-tooltipControl-next').length).toBe(0);

    expect(rendered.find('.ba-Carousel-indicatorsWrapper').length).toBe(0);
  });

  it('should hide play button', () => {
    const renderedHidden = Enzyme.render<ICarouselProps, ICarouselState>(
      <Carousel {...props} hidePlayButton={true} />
    );

    expect(renderedHidden.find('.ba-Carousel-play').length).toBe(0);

    const renderedShown = Enzyme.render<ICarouselProps, ICarouselState>(<Carousel {...props} />);

    expect(renderedShown.find('.ba-Carousel-play').length).toBe(1);
  });

  it('test skip button behavior', () => {
    const renderedIndicators = Enzyme.mount<ICarouselProps, ICarouselState>(
      <Carousel {...props} disableNavigationLoop={true} isAutoPlayDisabled={true} useControlLabels={true} />
    );

    expect(renderedIndicators.find(DefaultButton).length).toBe(1);

    let skipButtonCount = 0;
    const wrapper = Enzyme.mount<ICarouselProps, ICarouselState>(
      <Carousel
        {...props}
        skipButton={{
          onSkip: () => {
            skipButtonCount++;
          },
          skipButtonAriaLabel: 'Skip',
          skipButtonLabel: 'Skip'
        }}
        disableNavigationLoop={true}
        isAutoPlayDisabled={true}
        useControlLabels={true}
      />
    );

    expect(skipButtonCount).toBe(0);

    const controlButtons = wrapper.find(DefaultButton);
    expect(controlButtons.length).toBe(2);

    controlButtons.at(0).simulate('click');
    expect(skipButtonCount).toBe(1);
  });

  it('test next button behavior', () => {
    let nextButtonCount = 0;
    const wrapper = Enzyme.mount<ICarouselProps, ICarouselState>(
      <Carousel
        {...props}
        onNext={() => {
          nextButtonCount++;
        }}
        disableNavigationLoop={true}
        isAutoPlayDisabled={true}
        useControlLabels={true}
      />
    );

    expect(nextButtonCount).toBe(0);

    const controlButtons = wrapper.find(DefaultButton);
    expect(controlButtons.length).toBe(1);

    controlButtons.at(0).simulate('click');
    expect(nextButtonCount).toBe(1);
  });

  it('test previous button behavior', () => {
    const renderedIndicators = Enzyme.mount<ICarouselProps, ICarouselState>(
      <Carousel {...props} disableNavigationLoop={true} isAutoPlayDisabled={true} useControlLabels={true} />
    );

    expect(renderedIndicators.find(DefaultButton).length).toBe(1);

    let previousButtonCount = 0;
    const wrapper = Enzyme.mount<ICarouselProps, ICarouselState>(
      <Carousel
        {...props}
        onPrevious={() => {
          previousButtonCount++;
        }}
        disableNavigationLoop={true}
        isAutoPlayDisabled={true}
        useControlLabels={true}
      />
    );

    expect(previousButtonCount).toBe(0);

    let controlButtons = wrapper.find(DefaultButton);
    expect(controlButtons.length).toBe(1);

    controlButtons.at(0).simulate('click');
    expect(previousButtonCount).toBe(0);
    controlButtons = wrapper.find(DefaultButton);
    expect(controlButtons.length).toBe(2);
    controlButtons.at(0).simulate('click');
    expect(previousButtonCount).toBe(1);
  });

  it('test done button behavior', () => {
    let dismissButtonCount = 0;
    const wrapper = Enzyme.mount<ICarouselProps, ICarouselState>(
      <Carousel
        {...props}
        doneButton={{
          onDone: () => {
            dismissButtonCount++;
          },
          doneButtonAriaLabel: 'Done',
          doneButtonLabel: 'Done'
        }}
        disableNavigationLoop={true}
        isAutoPlayDisabled={true}
        useControlLabels={true}
      />
    );

    expect(dismissButtonCount).toBe(0);

    let controlButtons = wrapper.find(DefaultButton);
    expect(controlButtons.length).toBe(1);
    controlButtons.at(0).simulate('click');

    controlButtons = wrapper.find(DefaultButton);
    expect(controlButtons.length).toBe(2);
    controlButtons.at(1).simulate('click');

    controlButtons = wrapper.find(DefaultButton);
    expect(controlButtons.length).toBe(2);
    controlButtons.at(1).simulate('click');

    controlButtons = wrapper.find(DefaultButton);
    expect(controlButtons.length).toBe(2);
    controlButtons.at(1).simulate('click');
    expect(dismissButtonCount).toBe(1);
  });

  it('test orderIndicatorsBeforeControls', () => {
    const controlFirstWrapper = Enzyme.mount<ICarouselProps, ICarouselState>(<Carousel {...props} />);

    expect(
      controlFirstWrapper.find('.ba-Carousel-controlsWrapper + .ba-Carousel-indicatorsWrapper').length
    ).toBe(1);

    const indicatorFirstWrapper = Enzyme.mount<ICarouselProps, ICarouselState>(
      <Carousel {...props} orderIndicatorsBeforeControls={true} />
    );

    expect(
      indicatorFirstWrapper.find('.ba-Carousel-indicatorsWrapper + .ba-Carousel-controlsWrapper').length
    ).toBe(1);
  });

  it('test _areItemsEqual', () => {
    const wrapper = Enzyme.mount<ICarouselProps, ICarouselState>(
      <Carousel
        {...props}
        disableNavigationLoop={true}
        isAutoPlayDisabled={true}
        useControlLabels={true}
        indicatorButtonsAriaLabel={['1', '2', '3']}
      />
    );
    const carousel = wrapper.childAt(0);
    const state = () => carousel.instance().state as ICarouselState;

    expect(state().selectedIndex).toBe(0);

    const controlButtons = wrapper.find(DefaultButton);
    expect(controlButtons.length).toBe(1);

    controlButtons.at(0).simulate('click');
    expect(state().selectedIndex).toBe(1);

    wrapper.setProps({ indicatorButtonsAriaLabel: ['1', '2', '3'] });
    expect(state().selectedIndex).toBe(1);
  });
});
