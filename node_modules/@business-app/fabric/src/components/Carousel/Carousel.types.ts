/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IButtonProps, IButtonStyles } from '@fluentui/react/lib/Button';
import { ITooltipHostProps, ITooltipHostStyles } from '@fluentui/react/lib/Tooltip';
import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import { IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';
import * as React from 'react';

/**
 * Props for Carousel component
 */
export interface ICarouselProps extends Readonly<React.HTMLAttributes<HTMLDivElement>> {
  /**
   * Optional class name
   */
  className?: string;

  /**
   * Optional styles for the carousel
   */
  styles?: IStyleFunctionOrObject<Pick<ICarouselProps, 'theme'>, ICarouselStyles>;

  /**
   * Theme provided by High-Order Component.
   */
  theme?: ITheme;

  /**
   * Carousel item list
   */
  items: React.ReactNode[];

  /**
   * Carousel swap delay in ms. Defaults to 7000 ms
   */
  delay?: number;

  /**
   * Carousel auto play. Defaults to true
   */
  isAutoPlayDisabled?: boolean;

  /**
   * Hide Carousel previous and next buttons. Defaults to false
   */
  hideNavigation?: boolean;

  /**
   * Carousel indicators and play/pause toggle button. Defaults to false
   */
  hideIndicators?: boolean;

  /**
   * Disable interacting with indicators. Defaults to false
   */
  disableIndicators?: boolean;

  /**
   * Hide the carousel play/pause button. Defaults to false
   */
  hidePlayButton?: boolean;

  /**
   * Use labels for previous/next buttons. Defaults to false
   */
  useControlLabels?: boolean;

  /**
   * Disable the loop. Hides Next/Prev buttons on first/last pages. Defaults to false
   * (has no interaction with autoplay)
   */
  disableNavigationLoop?: boolean;

  /**
   * The Skip button will appear on the first page of the carousel if it is defined.
   * This will override the disableNavigationLoop prop and replace the Back button.
   */
  skipButton?: {
    /**
     * Label for the skip button.
     */
    skipButtonLabel: string;

    /**
     * Aria label for the skip button.
     */
    skipButtonAriaLabel?: string;

    /**
     * Callback for the skip button.
     */
    onSkip: () => void;
  };

  /**
   * The Done button will appear on the last page of the carousel if it is defined.
   * This will override the disableNavigationLoop prop and replace the Next button.
   */
  doneButton?: {
    /**
     * Label for the Done button.
     */
    doneButtonLabel: string;

    /**
     * Aria label for the Done button.
     */
    doneButtonAriaLabel?: string;

    /**
     * Callback for the Done button.
     */
    onDone: () => void;
  };

  /**
   * Boolean to render the indicator buttons before the controls
   */
  orderIndicatorsBeforeControls?: boolean;

  /**
   * Label for previous label button (useControlLabels) Defaults to "Prev'"
   */
  navPreviousButtonLabel?: string;

  /**
   * Label for next label button (useControlLabels). Defaults to "Next"
   */
  navNextButtonLabel?: string;

  /**
   * Aria label for the previous navigation button. Sets the aria label for previous navigation button on the tile.
   */
  navPreviousButtonAriaLabel: string;

  /**
   * Aria label for the next navigation button. Sets the aria label for next navigation button on the tile.
   */
  navNextButtonAriaLabel: string;

  /**
   * Aria label for the selected item indicator button. Sets the aria label for selected item indicator on the tile.
   * If string is used, the rendered index value will be append
   */
  indicatorButtonsAriaLabel: string | string[];

  /**
   * Aria label for the play button. Sets the aria label for play button on the tile.
   */
  playButtonAriaLabel: string;

  /**
   * Aria label for the pause button. Sets the aria label for pause button on the tile.
   */
  pauseButtonAriaLabel: string;

  /**
   * Callback for the next button.
   */
  onNext?: (index: number) => void;

  /**
   * Callback for the previous button.
   */
  onPrevious?: (index: number) => void;

  /**
   * Carousel on item selected callback
   */
  onItemSelected?: (item: React.ReactNode, index: number) => void;
}

/**
 * Carousel state structure
 */
export interface ICarouselState {
  selectedIndex: number;
  isAutoplaySuspended: boolean;
  isAutoplayButtonPaused: boolean;
  tooltipIndicatorsProps: ITooltipIndicatorProps[];
}

/**
 * Inherit TooltipHost props from Fluent UI. Note that native props (such as `id`, `className`, and `aria-` props) are
 * passed through to the Tooltip itself, rather than being used on the host element.
 * The content is restricted to be a string instead of string | JSX.Element | JSX.Element[] in the Fluent UI component.
 */
export interface ITooltipIndicatorProps extends ITooltipHostProps {
  content: string;
}

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface ICarouselStyleProps extends Pick<ICarouselProps, 'theme' | 'className'> {}

/**
 * Carousel Styles structure
 */
export interface ICarouselStyles {
  /**
   * Style of the root element.
   */
  root?: IStyle;

  /**
   * Styles for the carousel item wrapper
   */
  itemWrapper?: IStyle;

  /**
   * Styles of the indicator Button components wrapper used to display current item and navigate to others.
   */
  indicatorsWrapper?: IStyle;

  /**
   * Style of the controls Button and Tooltip component wrapper used to navigate to previous and next item.
   */
  controlsWrapper?: IStyle;

  /**
   * Styles of sub-components.
   */
  subComponentStyles?: ICarouselSubComponentStyles;
}

/**
 * Contains styles for the sub-components of the Carousel component.
 */
export type ICarouselSubComponentStyles = {
  /**
   * Styles of the navigation tooltip control Buttons component used to navigate to previous and next item.
   */
  tooltipControl: IStyleFunctionOrObject<ITooltipHostProps, ITooltipHostStyles>;

  /**
   * Styles of the navigation control Buttons component used to navigate to previous and next item.
   */
  control: IStyleFunctionOrObject<IButtonProps, IButtonStyles>;

  /**
   * Styles of the Button components used to display current item and navigate to others.
   */
  indicator: IStyleFunctionOrObject<IButtonProps, IButtonStyles>;

  /**
   * Styles of the Button components used to toggle the play / pause state.
   */
  toggle: IStyleFunctionOrObject<IButtonProps, IButtonStyles>;
};
