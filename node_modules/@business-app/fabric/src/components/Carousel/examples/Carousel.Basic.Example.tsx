/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { Slider } from '@fluentui/react/lib/Slider';
import { Toggle } from '@fluentui/react/lib/Toggle';
import * as React from 'react';
import { Carousel, ICarouselStyles } from '..';
import { getMockContent } from './Carousel.Example.Data';

export interface ICarouselBasicExampleState {
  isAutoPlayDisabled: boolean;
  isNavigationVisible: boolean;
  isIndicatorsVisible: boolean;
  isHidePlayButton: boolean;
  isDisableIndicators: boolean;
  isUseControlLabels: boolean;
  isDisableLooping: boolean;
  delayInMs: number;
}

export class CarouselBasicExample extends React.Component<{}, ICarouselBasicExampleState> {
  constructor(props: {}) {
    super(props);
    this.state = {
      isAutoPlayDisabled: false,
      isNavigationVisible: true,
      isIndicatorsVisible: true,
      isHidePlayButton: false,
      isDisableIndicators: false,
      isUseControlLabels: false,
      isDisableLooping: false,
      delayInMs: 4000
    };
  }

  public render(): JSX.Element {
    const {
      isAutoPlayDisabled: autoPlayDisabled,
      isNavigationVisible: navigationVisible,
      isIndicatorsVisible: indicatorsVisible,
      isHidePlayButton: hidePlayButton,
      isDisableIndicators: disableIndicators,
      isUseControlLabels: useControlLabels,
      isDisableLooping: disableLooping,
      delayInMs: delayInMsValue
    } = this.state;

    return (
      <div>
        <Toggle
          label="Autoplay"
          checked={autoPlayDisabled}
          onChange={(e, isAutoPlayDisabled: boolean) => this.setState({ isAutoPlayDisabled })}
          onText="Enabled"
          offText="Disabled"
        />
        <Toggle
          label="Show navigation"
          checked={navigationVisible}
          onChange={(e, isNavigationVisible: boolean) => this.setState({ isNavigationVisible })}
          onText="Visible"
          offText="Hidden"
        />
        <Toggle
          label="Show indicators"
          checked={indicatorsVisible}
          onChange={(e, isIndicatorsVisible: boolean) => this.setState({ isIndicatorsVisible })}
          onText="Visible"
          offText="Hidden"
        />
        <Toggle
          label="Hide play button"
          checked={hidePlayButton}
          onChange={(e, isHidePlayButton: boolean) => this.setState({ isHidePlayButton })}
          onText="Hidden"
          offText="Visible"
        />
        <Toggle
          label="Disable indicators"
          checked={disableIndicators}
          onChange={(e, isDisableIndicators: boolean) => this.setState({ isDisableIndicators })}
          onText="Disabled"
          offText="Enabled"
        />
        <Toggle
          label="Use control labels"
          checked={useControlLabels}
          onChange={(e, isUseControlLabels: boolean) => this.setState({ isUseControlLabels })}
          onText="Enabled"
          offText="Disabled"
        />
        <Toggle
          label="Disable navigation loop"
          checked={disableLooping}
          onChange={(e, isDisableLooping: boolean) => this.setState({ isDisableLooping })}
          onText="Looping disabled"
          offText="Looping enabled"
        />
        <Slider
          label="Delay (ms)"
          styles={{ root: { maxWidth: 300 } }}
          min={1000}
          max={10000}
          step={1000}
          defaultValue={delayInMsValue}
          showValue={true}
          onChange={(delayInMs: number) => this.setState({ delayInMs })}
        />
        <br />
        <br />
        <Carousel
          items={getMockContent()}
          delay={delayInMsValue}
          isAutoPlayDisabled={autoPlayDisabled}
          hideNavigation={!navigationVisible}
          hideIndicators={!indicatorsVisible}
          hidePlayButton={hidePlayButton}
          disableIndicators={disableIndicators}
          useControlLabels={useControlLabels}
          disableNavigationLoop={disableLooping}
          navPreviousButtonAriaLabel="Previous"
          navNextButtonAriaLabel="Next"
          indicatorButtonsAriaLabel={['Item 1', 'Item 2', 'Item 3', 'Item 4']}
          playButtonAriaLabel="Play"
          pauseButtonAriaLabel="Pause"
        />
      </div>
    );
  }
}
