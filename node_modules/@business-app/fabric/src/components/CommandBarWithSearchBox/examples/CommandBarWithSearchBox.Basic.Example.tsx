/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { ISearchBoxProps } from '@fluentui/react/lib/SearchBox';
import { Toggle } from '@fluentui/react/lib/Toggle';
import { assign } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { CommandBarWithSearchBox } from '..';

// Example data
import { farItems, items, overflowItems } from '../../../utilities/data/contextualMenuItems';

export interface ICommandBarBasicExampleState {
  isSearchBoxVisible: boolean;
  areNamesVisible: boolean;
  areIconsVisible: boolean;
}

export class CommandBarWithSearchBoxBasicExample extends React.Component<{}, ICommandBarBasicExampleState> {
  constructor(props: {}) {
    super(props);
    this.state = {
      isSearchBoxVisible: true,
      areNamesVisible: true,
      areIconsVisible: true
    };
  }

  public render(): JSX.Element {
    const {
      isSearchBoxVisible: searchBoxVisible,
      areIconsVisible: iconsVisible,
      areNamesVisible: namesVisible
    } = this.state;

    const filteredItems = items.map(item =>
      assign({}, item, {
        iconOnly: !namesVisible,
        icon: iconsVisible ? item.icon : ''
      })
    );

    const filteredOverflowItems = overflowItems.map(item =>
      assign({}, item, {
        iconOnly: !namesVisible,
        icon: iconsVisible ? item.icon : ''
      })
    );

    const filteredFarItems = farItems.map(item =>
      assign({}, item, {
        iconOnly: !namesVisible,
        icon: iconsVisible ? item.icon : ''
      })
    );

    const searchBoxProps: ISearchBoxProps = {
      placeholder: 'Search with debounce...',
      ariaLabel: 'Search',
      onChange: (ev, text) => alert(text)
    };

    return (
      <div>
        <Toggle
          label="Show search box"
          checked={searchBoxVisible}
          onChanged={(isSearchBoxVisible: boolean) => this.setState({ isSearchBoxVisible })}
          onText="Visible"
          offText="Hidden"
        />
        <Toggle
          label="Show names"
          checked={namesVisible}
          onChanged={(areNamesVisible: boolean) => this.setState({ areNamesVisible })}
          onText="Visible"
          offText="Hidden"
        />
        <Toggle
          label="Show icons"
          checked={iconsVisible}
          onChanged={(areIconsVisible: boolean) => this.setState({ areIconsVisible })}
          onText="Visible"
          offText="Hidden"
        />
        <CommandBarWithSearchBox
          wrapperClassName={'test'}
          isSearchBoxVisible={searchBoxVisible}
          searchBoxProps={searchBoxProps}
          items={filteredItems}
          overflowItems={filteredOverflowItems}
          farItems={filteredFarItems}
          onChangeDelay={1000}
          overflowButtonProps={{ ariaLabel: 'Overflow items' }}
        />
      </div>
    );
  }
}
