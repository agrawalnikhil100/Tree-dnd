/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { CommandBar as FabricCommandBar, ICommandBarStyles } from '@fluentui/react/lib/CommandBar';
import { ISearchBoxStyles, SearchBox } from '@fluentui/react/lib/SearchBox';
import { getTheme, HighContrastSelector, ITheme } from '@fluentui/react/lib/Styling';
import { BaseComponent } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { ICommandBarWithSearchBoxProps } from './CommandBarWithSearchBox.types';

/**
 * CommandBar wraps the Fabric CommandBar with customized styling.
 *
 * The CommandBar also has a SearchBox component defined to the right.
 *
 * @export
 * @class CommandBar
 * @extends {React.Component<ICommandBarWithSearchBoxProps>}
 */
export class CommandBarWithSearchBox extends BaseComponent<ICommandBarWithSearchBoxProps> {
  /**
   * Set this BaseComponent._skipComponentRefResolution to true, bypassing resolution of componentRef.
   */
  protected _skipComponentRefResolution = true;
  private _asyncFunctionToRun;

  private theme: ITheme = getTheme();
  private commandBarStyles: ICommandBarStyles = {
    root: {
      backgroundColor: this.theme.palette.neutralLighter,
      selectors: {
        '.ms-Button': {
          backgroundColor: this.theme.palette.neutralLighter,
          selectors: {
            ':hover': {
              backgroundColor: this.theme.palette.neutralQuaternaryAlt
            },
            [HighContrastSelector]: {
              backgroundColor: 'Window'
            }
          }
        },
        [HighContrastSelector]: {
          border: 'solid'
        }
      }
    }
  };
  private searchBoxStyles: Partial<ISearchBoxStyles> = {
    root: [
      'ms-SearchBox',
      {
        height: '100%',
        width: 168,
        backgroundColor: 'transparent',
        border: 0,
        borderLeft: `1px solid ${this.theme.palette.neutralLight}`,
        selectors: {
          ':hover': {
            borderLeft: `1px solid ${this.theme.palette.neutralLight}`
          },
          '.ms-CommandBar-sideCommands': {
            padding: 0
          },
          '.ms-SearchBox-icon': {
            color: this.theme.palette.themeDarkAlt
          },
          '.ms-SearchBox-field': {
            backgroundColor: 'transparent'
          }
        }
      }
    ]
  };

  constructor(props: ICommandBarWithSearchBoxProps) {
    super(props);
  }

  public render(): JSX.Element {
    let {
      isSearchBoxVisible,
      searchBoxProps,
      farItems,
      wrapperClassName,
      onChangeDelay,
      ...other
    } = this.props;

    if (isSearchBoxVisible) {
      if (!farItems) {
        farItems = [];
      }

      searchBoxProps = {
        ...searchBoxProps,
        styles: props => {
          return this.searchBoxStyles;
        }
      };

      if (searchBoxProps.onChange && onChangeDelay) {
        this._asyncFunctionToRun = this._async.debounce(searchBoxProps.onChange, onChangeDelay);
        searchBoxProps = {
          ...searchBoxProps,
          onChange: this._asyncFunctionToRun
        };
      }

      farItems = farItems.concat({
        key: 'ba-CommandBar-SearchBox',
        onRender: item => {
          return <SearchBox {...searchBoxProps} />;
        }
      });
    }

    let className = 'ba-CommandBar ';
    className += wrapperClassName ? wrapperClassName : '';

    return (
      <div className={className}>
        <FabricCommandBar {...other} farItems={farItems} styles={this.commandBarStyles} />
      </div>
    );
  }

  public componentWillUnmount() {
    this._async.dispose();
  }
}
