/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as Enzyme from 'enzyme';
import * as React from 'react';

import { KeyCodes } from '@fluentui/react/lib/Utilities';
import { DefaultButton } from '@fluentui/react/lib/Button';
import { ResizerBase } from './Resizer.base';
import { ResizerLocation, ResizerProps } from './Resizer.types';

const sizeChangedCallback = jest.fn();

function getResizerTestProps(): ResizerProps {
  return {
    location: ResizerLocation.Right,
    size: 150,
    onSizeChanged: sizeChangedCallback
  };
}

export const ResizableButton: React.FunctionComponent<ResizerProps> = props => {
  return (
    <div style={{ position: 'relative', width: 300, height: 150 }}>
      <DefaultButton style={{ width: '100%', height: '100%' }} text="Hello" />
      <ResizerBase {...props} />
    </div>
  );
};

describe('ResizerBase', () => {
  it('renders resizer gets rendered when the parent element is positioned', () => {
    const containerWrapper = Enzyme.shallow(<ResizableButton {...getResizerTestProps()} />);
    expect(containerWrapper.find(ResizerBase).length).toBe(1);
  });

  it('onSizeChanged is called when the size of the prop changes', () => {
    const containerWrapper = Enzyme.mount(<ResizableButton {...getResizerTestProps()} />);
    const resizerWrapper = containerWrapper.find(ResizerBase);

    // Disabling console.error
    // eslint-disable-next-line no-console
    const originalError = console.error;
    // eslint-disable-next-line no-console
    console.error = jest.fn();

    resizerWrapper.simulate('mouseDown');
    window.dispatchEvent(new MouseEvent('mousemove'));
    window.dispatchEvent(new MouseEvent('mouseup'));
    expect(sizeChangedCallback).toBeCalledTimes(1);

    // Enable console.error
    // eslint-disable-next-line no-console
    console.error = originalError;
    containerWrapper.unmount();
  });

  it('onSizeChanged is triggered on keypress (left/right)', () => {
    const keyBoardResize = jest.fn();

    const myProps = {
      location: ResizerLocation.Right,
      size: 150,
      onSizeChanged: keyBoardResize
    };
    const containerWrapper = Enzyme.mount(<ResizableButton {...myProps} />);
    const resizerWrapper = containerWrapper.find(ResizerBase);

    resizerWrapper.simulate('keydown', { keyCode: KeyCodes.right });
    resizerWrapper.simulate('keydown', { keyCode: KeyCodes.left });
    expect(keyBoardResize).toBeCalledTimes(2);

    containerWrapper.unmount();
  });

  it('onSizeChanged is triggered on keypress (up/down)', () => {
    const keyBoardResize = jest.fn();

    const myProps = {
      location: ResizerLocation.Bottom,
      size: 150,
      onSizeChanged: keyBoardResize
    };
    const containerWrapper = Enzyme.mount(<ResizableButton {...myProps} />);
    const resizerWrapper = containerWrapper.find(ResizerBase);

    resizerWrapper.simulate('keydown', { keyCode: KeyCodes.down });
    resizerWrapper.simulate('keydown', { keyCode: KeyCodes.up });
    expect(keyBoardResize).toBeCalledTimes(2);

    containerWrapper.unmount();
  });
});
