/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as React from 'react';

import { classNamesFunction, KeyCodes } from '@fluentui/react/lib/Utilities';
import {
  ResizeDirection,
  ResizerAttachment,
  ResizerLocation,
  ResizerProps,
  ResizerState,
  ResizerStyleProps,
  ResizerStyles
} from './Resizer.types';

const getClassNames = classNamesFunction<ResizerStyleProps, ResizerStyles>();
const DEFAULT_HANDLE_SIZE = 5;
const DEFAULT_KEYBOARD_MOVE = 5;

export class ResizerBase extends React.Component<ResizerProps, ResizerState> {
  private globalEventsEnabled: boolean;
  private originalCursor: string;
  private resizeStartPosition: number;

  public static getDerivedStateFromProps(props: ResizerProps, prevState: ResizerState) {
    return ResizerBase.getResizerInfo(props, prevState);
  }

  private static getResizerInfo(props: ResizerProps, prevState?: ResizerState): ResizerState {
    const { size, location, minSize, maxSize } = props;
    const resizeDirection =
      location === ResizerLocation.Left || location === ResizerLocation.Right
        ? ResizeDirection.Horizontal
        : ResizeDirection.Vertical;

    const isResizeHorizontal = resizeDirection === ResizeDirection.Horizontal;
    const cursor = isResizeHorizontal ? 'col-resize' : 'row-resize';
    const max = maxSize || (isResizeHorizontal ? window.innerWidth : window.innerHeight);
    const min = minSize || 0;
    const isResizing = !!prevState && prevState.isResizing;

    return {
      size,
      minRelativeDelta: size - min,
      maxRelativeDelta: size - max,
      keepDeltaSign: location === ResizerLocation.Top || location === ResizerLocation.Left,
      isResizing,
      resizeDirection,
      cursor,
      resizeRelativeValue: isResizing && !!prevState ? prevState.resizeRelativeValue : 0
    };
  }

  public constructor(props: ResizerProps) {
    super(props);
    this.resizeStartPosition = 0;
    this.globalEventsEnabled = false;
    this.originalCursor = 'auto';
    this.state = ResizerBase.getResizerInfo(props);
  }

  public render() {
    const { cursor, resizeDirection } = this.state;
    const { ariaLabel, styles } = this.props;

    const classNames = getClassNames(styles, this.props);

    const resizerStyles: React.CSSProperties = {
      cursor,
      ...this.getResizerPositionStyles()
    };

    return (
      <div
        aria-label={ariaLabel}
        aria-orientation={resizeDirection === ResizeDirection.Horizontal ? 'vertical' : 'horizontal'}
        role={'separator'}
        tabIndex={0}
        className={classNames.root}
        style={resizerStyles}
        onKeyDown={this.handleArrowKeys}
        onMouseDown={this.handleMouseDown}
      />
    );
  }

  public componentWillUnmount() {
    if (this.globalEventsEnabled) {
      this.removeGlobalEventHandlers();
    }
  }

  private handleMouseDown = (ev: React.MouseEvent) => {
    ev.preventDefault();
    this.resizeStartPosition = this.getCursorPosition(ev);
    this.addGlobalEventHandlers();
  };

  private addGlobalEventHandlers = () => {
    this.globalEventsEnabled = true;
    window.addEventListener('mouseup', this.handleMouseUp);
    window.addEventListener('mousemove', this.handleMouseMove);

    // Capture the current cursor
    this.originalCursor = document.body.style.cursor;

    // Override the cursor
    document.body.style.cursor = this.state.cursor;
  };

  private removeGlobalEventHandlers = () => {
    if (!this.globalEventsEnabled) {
      return;
    }

    window.removeEventListener('mouseup', this.handleMouseUp);
    window.removeEventListener('mousemove', this.handleMouseMove);

    // Revert to the original cursor
    document.body.style.cursor = this.originalCursor;

    this.globalEventsEnabled = false;
  };

  private handleArrowKeys = (ev: React.KeyboardEvent<HTMLDivElement>) => {
    const { minSize, maxSize, size: currentPosition } = this.props;
    const { resizeDirection } = this.state;

    let newPosition: number;

    if (resizeDirection === ResizeDirection.Horizontal) {
      switch (ev.keyCode) {
        case KeyCodes.left: {
          newPosition = moveLeftOrUp(minSize, currentPosition);
          break;
        }
        case KeyCodes.right: {
          newPosition = moveRightOrDown(maxSize, currentPosition);
          break;
        }
        default:
          break;
      }
    } else {
      // resizeDirection === ResizeDirection.Vertical
      switch (ev.keyCode) {
        case KeyCodes.up: {
          newPosition = moveLeftOrUp(minSize, currentPosition);
          break;
        }
        case KeyCodes.down: {
          newPosition = moveRightOrDown(maxSize, currentPosition);
          break;
        }
        default:
          break;
      }
    }
    if (newPosition) {
      ev.preventDefault();
      this.handleSizeChanged(newPosition);
    }
  };

  private handleMouseMove = (ev: MouseEvent) => {
    ev.preventDefault();

    const { keepDeltaSign, maxRelativeDelta, minRelativeDelta } = this.state;
    const currentPosition = this.getCursorPosition(ev);
    const delta = (currentPosition - this.resizeStartPosition) * (keepDeltaSign ? 1 : -1);
    const relativePosition = clamp(delta, maxRelativeDelta, minRelativeDelta);

    this.setState({
      isResizing: true,
      resizeRelativeValue: relativePosition
    });
  };

  private handleMouseUp = (ev: MouseEvent) => {
    ev.preventDefault();
    const newSize = this.props.size - this.state.resizeRelativeValue;
    this.handleSizeChanged(newSize);

    this.setState({
      isResizing: false
    });

    this.removeGlobalEventHandlers();
  };

  private handleSizeChanged = (newSize: number) => {
    const { size, onSizeChanged } = this.props;
    if (size !== newSize && onSizeChanged) {
      onSizeChanged(newSize);
    }
  };

  private getCursorPosition = (ev: MouseEvent | React.MouseEvent) => {
    return this.state.resizeDirection === ResizeDirection.Horizontal ? ev.pageX : ev.pageY;
  };

  private getResizerPositionStyles = (): React.CSSProperties => {
    const { location, handleSize = DEFAULT_HANDLE_SIZE, attachment = ResizerAttachment.Outside } = this.props;
    const handlePosition =
      this.state.resizeRelativeValue - (attachment === ResizerAttachment.Inside ? 0 : handleSize);

    switch (location) {
      case ResizerLocation.Left:
        return { top: 0, bottom: 0, left: handlePosition, width: handleSize };
      case ResizerLocation.Right:
        return { top: 0, bottom: 0, right: handlePosition, width: handleSize };
      case ResizerLocation.Top:
        return { top: handlePosition, left: 0, right: 0, height: handleSize };
      case ResizerLocation.Bottom:
        return { bottom: handlePosition, left: 0, right: 0, height: handleSize };
      default:
        return {};
    }
  };
}

const clamp = (value: number, min: number, max: number) => {
  return Math.min(Math.max(value, min), max);
};

const moveRightOrDown = (maxSize: number, currentPosition: number) => {
  let newPosition;
  if (!maxSize || currentPosition + DEFAULT_KEYBOARD_MOVE < maxSize) {
    newPosition = currentPosition + DEFAULT_KEYBOARD_MOVE;
  }
  return newPosition;
};

const moveLeftOrUp = (minSize: number, currentPosition: number) => {
  let newPosition;
  if (currentPosition - DEFAULT_KEYBOARD_MOVE > (minSize || 0)) {
    newPosition = currentPosition - DEFAULT_KEYBOARD_MOVE;
  }
  return newPosition;
};
