/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as React from 'react';
import { StepStatus } from '../StepStatus';
import { WizardTipsAndHelp } from '../TipsAndHelp/WizardTipsAndHelp';
import { TipsAndHelpCard } from '../TipsAndHelpCard/TipsAndHelpCard';
import { Wizard } from '../Wizard';

const steps = [
  {
    name: 'Step 1',
    summary: ['Summary 1'],
    ariaDescription: 'Summary 1'
  },
  {
    name: 'Step 2',
    summary: ['Summary 2'],
    ariaDescription: 'Summary 2'
  },
  {
    name: 'Step 3',
    hasWarning: true,
    summary: ['Summary 3'],
    ariaDescription: 'Summary 3'
  },
  {
    name: 'Step 4',
    hasError: true,
    summary: ['Summary 4'],
    ariaDescription: 'Summary 4'
  },
  {
    name: 'Step 5',
    summary: ['Summary 5'],
    ariaDescription: 'Summary 5'
  }
];

export class WizardBasicExample extends React.Component<{}, { currentIndex: number }> {
  public state = {
    currentIndex: 0
  };

  public render() {
    return (
      <Wizard
        className="my-wizard-example"
        progressProps={{
          currentIndex: this.state.currentIndex,
          stepNames: steps.map(s => s.name),
          stepStatuses: this.getStatuses(),
          stepSummaries: steps.map(s => s.summary),
          computeAriaDescription: index => steps[index].ariaDescription,
          // this callback is optional in IWizardProgressProps, in an instance maybe use wizardStore.goToNthStep
          onProgressStepClick: this.setIndex,
          styles: {
            root: {
              flex: '0 0 auto',
              width: '19vw',
              minWidth: '183px',
              maxWidth: '280px'
            }
          },
          expandButtonLabel: 'Expand timeline',
          collapseButtonLabel: 'Collapse timeline'
        }}
        footerProps={{
          backButtonText: 'Back',
          canGoToNextStep: this.state.currentIndex < steps.length - 1,
          canGoToPreviousStep: this.state.currentIndex > 0,
          continueButtonText: 'Next',
          summaryText: 'Summary text',
          shouldDisplayBackButton: true,
          goToPreviousStep: () => {
            this.setState({
              currentIndex: this.state.currentIndex - 1
            });
          },
          goToNextStep: () => {
            this.setState({
              currentIndex: this.state.currentIndex + 1
            });
          }
        }}
        onRenderHeaderItems={() => 'Title'}
        onRenderHeaderFarItems={() => <button>Save</button>}
        onRenderStep={() => <span>This is step {this.state.currentIndex + 1}</span>}
        onRenderRightPane={() => (
          <WizardTipsAndHelp
            title="Tips"
            closeButtonText="Close"
            styles={{
              root: {
                flex: '0 0 auto',
                width: '21vw',
                minWidth: '180px',
                maxWidth: '272px'
              }
            }}
          >
            <TipsAndHelpCard
              card={{
                title: 'Get help or send feedback',
                content: 'Get the answers you need, or tell us about your experiences.',
                action: {
                  iconName: 'Feedback',
                  name: 'Get help',
                  onClick() {
                    // eslint-disable-next-line no-console
                    console.log('help');
                  }
                }
              }}
            />
          </WizardTipsAndHelp>
        )}
        styles={{
          root: {
            minHeight: '500px'
          }
        }}
      />
    );
  }

  private getStatuses = () => {
    return steps.map((s, index) => {
      if (index >= this.state.currentIndex) {
        return StepStatus.Empty;
      }

      if (s.hasError) {
        return StepStatus.Error;
      }

      if (s.hasWarning) {
        return StepStatus.Warning;
      }

      return StepStatus.Valid;
    });
  };

  private setIndex(index: number): void {
    this.setState({ currentIndex: index });
  }
}
