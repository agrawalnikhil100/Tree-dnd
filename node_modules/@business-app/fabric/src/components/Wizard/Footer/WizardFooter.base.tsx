/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { DefaultButton, PrimaryButton } from '@fluentui/react/lib/Button';
import { BaseComponent, classNamesFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { WizardFooterProps, WizardFooterStyleProps, WizardFooterStyles } from './WizardFooter.types';

const getClassNames = classNamesFunction<WizardFooterStyleProps, WizardFooterStyles>();

export class WizardFooterBase extends BaseComponent<WizardFooterProps> {
  public render() {
    const { className, styles, theme, renderFooterContent = this.renderFooterContent } = this.props;

    const classNames = getClassNames(styles, {
      theme: theme!,
      className
    });

    return (
      <footer className={classNames.root}>
        {renderFooterContent(this.renderFooterButtons, this.renderFooterSummary)}
      </footer>
    );
  }

  private renderFooterContent = () => {
    return (
      <>
        {this.renderFooterButtons()}
        {this.renderFooterSummary()}
      </>
    );
  };

  private renderFooterButtons = () => {
    const {
      backButtonText,
      backButtonProps,
      continueButtonText,
      continueButtonProps,
      canGoToNextStep,
      canGoToPreviousStep,
      goToNextStep,
      goToPreviousStep,
      shouldDisplayBackButton,
      shouldHideContinueButton,
      className,
      styles,
      theme
    } = this.props;

    const classNames = getClassNames(styles, {
      theme: theme!,
      className
    });

    return (
      <>
        {shouldDisplayBackButton && (
          <DefaultButton
            className={classNames.button}
            onClick={goToPreviousStep}
            disabled={!canGoToPreviousStep}
            {...backButtonProps}
          >
            {backButtonText}
          </DefaultButton>
        )}
        {!shouldHideContinueButton && (
          <PrimaryButton
            className={classNames.button}
            onClick={goToNextStep}
            disabled={!canGoToNextStep}
            {...continueButtonProps}
          >
            {continueButtonText}
          </PrimaryButton>
        )}
      </>
    );
  };

  private renderFooterSummary = () => {
    const { summaryText, className, styles, theme } = this.props;

    const classNames = getClassNames(styles, {
      theme: theme!,
      className
    });

    return summaryText && <div className={classNames.summaryText}>{summaryText}</div>;
  };
}
