/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import {
  ActionButton,
  CommandButton,
  DefaultButton,
  IButtonProps,
  PrimaryButton
} from '@fluentui/react/lib/Button';
import { ISpinnerStyles, Spinner, SpinnerSize } from '@fluentui/react/lib/Spinner';
import { IRenderFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { ILoadingButtonProps, ISupportedLoadingButtonTarget } from './LoadingButton.types';

const spinnerStyles: ISpinnerStyles = {
  root: {
    marginLeft: 4,
    marginRight: 4
  }
};

/**
 * A higher order component that wraps Button components with the ability to render a loading spinner
 * in the place of the button's icon.
 * @param ButtonComponent The Button component to wrap.
 */
export function loadingButton<P extends ISupportedLoadingButtonTarget>(
  ButtonComponent: React.ComponentType<P>
): React.ComponentType<P & ILoadingButtonProps> {
  return class LoadingButton extends React.Component<P & ILoadingButtonProps> {
    public render() {
      return <ButtonComponent {...this.props} onRenderIcon={this.onRenderIcon} />;
    }

    private onRenderIcon: IRenderFunction<IButtonProps> = (buttonProps, defaultRender) => {
      const { loading, spinnerAs } = this.props;

      if (!loading) {
        return defaultRender && defaultRender(buttonProps);
      }

      const SpinnerComponent = spinnerAs || Spinner;
      return (
        <SpinnerComponent
          className="ba-LoadingButton-spinner"
          size={SpinnerSize.small}
          styles={spinnerStyles}
        />
      );
    };
  };
}

/** Office Fabric's "ActionButton" pre-wrapped with loading capability. */
export const LoadingActionButton = loadingButton(ActionButton);

/** Office Fabric's "CommandButton" pre-wrapped with loading capability. */
export const LoadingCommandButton = loadingButton(CommandButton);

/** Office Fabric's "DefaultButton" pre-wrapped with loading capability. */
export const LoadingDefaultButton = loadingButton(DefaultButton);

/** Office Fabric's "PrimaryButton" pre-wrapped with loading capability. */
export const LoadingPrimaryButton = loadingButton(PrimaryButton);
