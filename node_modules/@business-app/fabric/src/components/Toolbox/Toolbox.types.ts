/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IFocusZoneProps } from '@fluentui/react/lib/FocusZone';
import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import { IComponentAs, IRefObject, IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';

export interface IToolbox {
  /**
   * Sets focus to the first toolbox item.
   */
  focus(): void;
}

export interface ToolboxStrings {
  /**
   * @deprecated use `expandCollapseTooltip`
   */
  expandTooltip?: string;
  /**
   * @deprecated use `expandCollapseTooltip`
   */
  collapseTooltip?: string;

  expandCollapseTooltip?: string;
  closeTooltip: string;
}

export interface IToolboxProps extends Readonly<React.HTMLAttributes<HTMLElement>> {
  /**
   * Optional callback to access the Toolbox interface. Use this instead of ref for accessing
   * the public methods and properties of the component.
   */
  componentRef?: IRefObject<IToolbox>;

  /**
   * Call to provide customized styling that will layer on top of the variant rules.
   */
  styles?: IStyleFunctionOrObject<IToolboxStyleProps, IToolboxStyles>;

  /**
   * Theme provided by High-Order Component.
   */
  theme?: ITheme;

  /**
   * Additional css class to apply to the toolbox
   * @defaultvalue undefined
   */
  className?: string;

  /**
   * The key of the toolbox item initially selected.
   *
   * initialSelectedKey is only intended for uncontrolled components (i.e. when selectedKey is not provided).
   * If selectedKey is provided, it will be used and initialSelectedKey will have no effect.
   */
  initialSelectedKey?: string;

  /**
   * Whether the toolbox links should be expanded initially. They are collapsed by default.
   *
   * expandLinksInitially is not intended to be used alongside expandLinks.
   * If expandLinks is provided, it will be used and expandLinksInitially will have no effect.
   */
  expandLinksInitially?: boolean;

  /**
   * The key of the selected toolbox item.
   *
   * If set, this will override the toolbox's selected item state.
   * if it is set to null, the toolbox will unselect existing items
   */
  selectedKey?: string | null;

  /**
   * Whether the toolbox links should be expanded.
   *
   * If set, this will override the toolbox's expand links state.
   */
  expandLinks?: boolean;

  /**
   * The various localized strings the component requires.
   */
  strings: ToolboxStrings;

  /**
   * Called whenever selected item changes
   * @param itemKey The key representing the item that was selected; `null` if the active item was unselected.
   * @param isDismiss Whether this call originated via clicking the 'X' button in the drawer.
   */
  onSelectedItemChanged?: (itemKey: string | null, isDismiss: boolean) => void;

  /**
   * Called whenever the user toggles between expanded links and collapsed links.
   */
  onToggleExpandLinks?: (expandLinks: boolean) => void;

  /**
   * If this prop is true, the drawer can be resized
   * Defaults to false
   */
  isResizable?: boolean;

  /**
   * Optionally, a FocusZone-compatible component to use as the container for the Toolbox links.
   */
  toolboxLinksContainerAs?: IComponentAs<IFocusZoneProps>;
}

export type IToolboxStyleProps = Required<Pick<IToolboxProps, 'theme'>> &
  Pick<IToolboxProps, 'className'> & {
    linksAreExpanded: boolean;
    drawerIsExpanded: boolean;
  };

export interface IToolboxStyles {
  /**
   * Style for the root element.
   */
  root: IStyle;
  list: IStyle;
  focusZone: IStyle;
  item: IStyle;
  itemContent: IStyle;
  itemIsSelected: IStyle;
  drawer: IStyle;
  drawerHeaderRegion: IStyle;
  drawerHeader: IStyle;
  drawerClose: IStyle;
  drawerCloseIcon: IStyle;
  text: IStyle;
  iconContainer: IStyle;
  icon: IStyle;
  selectionIndicator: IStyle;
}
