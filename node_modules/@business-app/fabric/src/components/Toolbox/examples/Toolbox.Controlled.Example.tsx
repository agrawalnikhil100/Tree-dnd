/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { PrimaryButton } from '@fluentui/react/lib/Button';
import { ChoiceGroup, IChoiceGroupOption } from '@fluentui/react/lib/ChoiceGroup';
import { Image } from '@fluentui/react/lib/Image';
import { mergeStyles } from '@fluentui/react/lib/Styling';
import * as React from 'react';

import { Toolbox } from '../Toolbox';
import { ToolboxItem } from '../ToolboxItem';

export interface IToolboxControlledExampleState {
  selectedKey: string;
  userChosenSetting: string;
}

const toolboxItem1Key = 'tool1';
const toolboxItem2Key = 'tool2';
const toolboxItem3Key = 'tool3';
const toolboxItem4Key = 'tool4';
const toolboxItem5Key = null;

const toolboxItem1Name = 'Play tool';
const toolboxItem2Name = 'Media tool';
const toolboxItem3Name = 'Settings tool';
const toolboxItem4Name = '(Invalid Toolbox Item)';
const toolboxItem5Name = '(Unselect Toolbox Item)';

export class ToolboxControlledExample extends React.Component<{}, IToolboxControlledExampleState> {
  constructor(props: {}) {
    super(props);
    this.state = {
      selectedKey: toolboxItem1Key,
      userChosenSetting: ''
    };
  }

  public render() {
    const { selectedKey } = this.state;
    const toolboxItemRootStyle = mergeStyles({
      width: '100%',
      padding: 16
    });
    const buttonStyle = mergeStyles({
      marginRight: 16
    });

    return (
      <>
        <Toolbox
          strings={{
            expandTooltip: 'Expand',
            collapseTooltip: 'Collapse',
            closeTooltip: 'Close'
          }}
          styles={{
            root: {
              height: 320
            }
          }}
          selectedKey={this.state.selectedKey}
          onSelectedItemChanged={this._selectedItemChanged}
        >
          <ToolboxItem headerText={toolboxItem1Name} itemKey={toolboxItem1Key} itemIcon={'Play'}>
            <div className={toolboxItemRootStyle}>
              <PrimaryButton className={buttonStyle}>{'Play'}</PrimaryButton>
              <PrimaryButton className={buttonStyle}>{'Quit'}</PrimaryButton>
            </div>
          </ToolboxItem>
          <ToolboxItem headerText={toolboxItem2Name} itemKey={toolboxItem2Key} itemIcon={'MediaAdd'}>
            <div className={toolboxItemRootStyle}>
              <Image height={150} width={150} src="https://i.imgur.com/B83RUSb.jpg" />
            </div>
          </ToolboxItem>
          <ToolboxItem headerText={toolboxItem3Name} itemKey={toolboxItem3Key} itemIcon={'Settings'}>
            <div className={toolboxItemRootStyle}>
              <ChoiceGroup
                selectedKey={this.state.userChosenSetting}
                onChange={this._onSettingChangedCallback}
                label={'Choose your setting'}
                options={[
                  {
                    key: 'item1',
                    text: 'Setting 1'
                  },
                  {
                    key: 'item2',
                    text: 'Setting 2'
                  }
                ]}
              />
            </div>
          </ToolboxItem>
        </Toolbox>

        <ChoiceGroup
          className={mergeStyles({ marginTop: 48 })}
          label={'Override Toolbox selection'}
          selectedKey={selectedKey}
          options={[
            {
              key: toolboxItem1Key,
              text: toolboxItem1Name
            },
            {
              key: toolboxItem2Key,
              text: toolboxItem2Name
            },
            {
              key: toolboxItem3Key,
              text: toolboxItem3Name
            },
            {
              key: toolboxItem4Key,
              text: toolboxItem4Name
            },
            {
              key: toolboxItem5Key,
              text: toolboxItem5Name
            }
          ]}
          onChange={this._onChoiceBoxChanged}
        />
      </>
    );
  }

  private _onSettingChangedCallback = (event: React.FormEvent, option: IChoiceGroupOption): void => {
    this.setState({ userChosenSetting: option.key });
  };

  private _onChoiceBoxChanged = (event: React.FormEvent, option: IChoiceGroupOption): void => {
    this._selectedItemChanged(option.key);
  };

  private _selectedItemChanged = (itemKey: string): void => {
    this.setState({ selectedKey: itemKey });
  };
}
