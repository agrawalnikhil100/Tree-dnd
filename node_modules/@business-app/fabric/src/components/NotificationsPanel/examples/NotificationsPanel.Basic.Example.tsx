/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { ActionButton, DefaultButton, PrimaryButton } from '@fluentui/react/lib/Button';
import { ITextFieldStyles, TextField } from '@fluentui/react/lib/TextField';
import { Icon, IIconProps } from '@fluentui/react/lib/Icon';
import { Toggle } from '@fluentui/react/lib/Toggle';
import { Panel } from '@fluentui/react/lib/Panel';
import * as React from 'react';
import { NotificationsPanel } from '..';
import { INotificationCardProps } from '../NotificationCard/NotificationCard.types';
import { NotificationsPanelState } from '../NotificationsPanel.types';

export interface INotificationsPanelBasicExampleState {
  open: boolean;
  empty: boolean;
  notifications: INotificationCardProps[];
  panelState: NotificationsPanelState;
  openSettings: boolean;
}

const narrowTextFieldStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: 200 } };

export class NotificationsPanelBasicExample extends React.Component<
  {},
  INotificationsPanelBasicExampleState
> {
  private _exampleNotifications: INotificationCardProps[];
  constructor(props: {}) {
    super(props);

    this._exampleNotifications = [
      {
        id: '1',
        title: 'An App was shared with you',
        body: 'XYZ has shared the app, Calculator by ABC with you',
        headerPrimaryText: '1 hr ago',
        headerSecondaryText: '7/14/2018',
        headerTooltip: 'this is a tooltip for the header!',
        isNew: true,
        actionText: 'click to see the app',
        dismissTooltip: 'dismiss',
        onActionClick: () => alert('notification 1 action link clicked'),
        onClick: () => alert('notification 1 clicked'),
        onRenderIcon: () => <Icon iconName="AccessLogo" />,
        onDismiss: this._onDismissNotification
      },
      {
        id: '2',
        title: 'Notifications 2',
        body: 'results ready',
        headerPrimaryText: '1 hr ago',
        headerSecondaryText: '7/14/2018',
        isNew: false,
        onClick: () => alert('notification 2 clicked')
      },
      {
        id: '3',
        isNew: true,
        onClick: () => alert('custom card notification clicked'),
        onRenderCardBody: () => <div style={{ padding: '15px' }}>Hello Microsoft!!!</div>
      },
      {
        id: '4',
        title: 'Notification 4',
        headerSecondaryText: '7/15/2020',
        isNew: false,
        onClick: () => alert('notification 4 clicked')
      },
      {
        id: '5',
        title: 'Notifications 5',
        isNew: true,
        body: 'results ready',
        onClick: () => alert('custom card notification clicked'),
        onRenderCardBody: () => <div style={{ padding: '15px' }}>Hello Matt!!</div>
      }
    ];

    this.state = {
      open: true,
      empty: false,
      notifications: this._exampleNotifications.slice(),
      panelState: NotificationsPanelState.Loaded,
      openSettings: false
    };
  }

  public render(): JSX.Element {
    const { open, empty, openSettings } = this.state;

    return (
      <div>
        <Toggle
          label="Has notifications"
          checked={!empty}
          onChanged={this._handleHasNotificationsToggleChange}
        />
        <DefaultButton onClick={this._reloadNotifications}> {'Reload Notifications'} </DefaultButton>
        <br />
        <DefaultButton onClick={this._handleShowPanelClick}> {'Show Notifications Panel'} </DefaultButton>
        <br />
        <DefaultButton onClick={this._handleShowPanelWithErrorClick}>
          {' '}
          {'Show Panel With Error'}{' '}
        </DefaultButton>
        <br />
        <DefaultButton onClick={this._handleShowPanelWithLoadingStateClick}>
          {' '}
          {'Show panel with loading state'}{' '}
        </DefaultButton>

        <div className="ba-NotificationsPanel-BasicExample">
          <NotificationsPanel
            ariaLoadingMessage="The notifications panel is loading."
            panelState={this.state.panelState}
            errorPrimaryMessage="Something went wrong. Please try again later"
            errorSecondaryMessage="failed to get notifications"
            emptyStateMessage="No Notifications"
            dismissAllText="Dismiss All"
            onDismissAll={this._onDismissAllNotifications}
            isOpen={open}
            onDismiss={this._onDismiss}
            headerText="Notifications"
            notifications={!empty && this.state.notifications}
            onRenderFooter={this._renderSettingsIcon}
            closeButtonAriaLabel={'Close'}
          />
        </div>
        <div className="ba-SettingsPanel-BasicExample">
          <Panel
            headerText="Settings"
            isOpen={openSettings}
            closeButtonAriaLabel="Close"
            onDismiss={this._onSettingPanelDismiss}
            onRenderFooter={this._renderSettingsPanelFooter}
            isFooterAtBottom={true}
          >
            <div>Please customize your settings here. A Sample is provided below</div>
            <br />
            <Toggle label="Enable toast notifications" defaultChecked={true} onText="On" offText="Off" />
            <Toggle label="Enabled sound alerts" defaultChecked={true} onText="On" offText="Off" />
            <TextField label="Total duration (seconds)" styles={narrowTextFieldStyles} />
          </Panel>
        </div>
      </div>
    );
  }

  private _reloadNotifications = (): void => {
    this.setState({ notifications: this._exampleNotifications.slice() });
  };

  private _onDismissNotification = (id: string): void => {
    const notifications = this.state.notifications.filter(n => n.id !== id);
    this.setState({ notifications: notifications });
  };

  private _handleShowPanelClick = (): void => {
    this.state.notifications.length === 0
      ? this.setState({ open: true, panelState: NotificationsPanelState.Empty })
      : this.setState({ open: true, panelState: NotificationsPanelState.Loaded });
  };

  private _handleShowPanelWithLoadingStateClick = (): void => {
    this.setState({ open: true, panelState: NotificationsPanelState.Loading });
  };

  private _handleShowPanelWithErrorClick = (): void => {
    this.setState({ open: true, panelState: NotificationsPanelState.Error });
  };

  private _handleHasNotificationsToggleChange = (value: boolean): void => {
    this.setState({ empty: !value });
  };

  private _onDismissAllNotifications = (): void => {
    this.setState({ notifications: [], panelState: NotificationsPanelState.Empty });
  };

  private _onSettingPanelDismiss = (): void => {
    this.setState({ openSettings: false });
  };

  private _onDismiss = (): void => {
    this.setState({ open: false });
  };

  private _onClickSettings = (): void => {
    this.setState({ openSettings: true });
  };

  private _renderSettingsIcon = (): JSX.Element => {
    const settingsIcon: IIconProps = { iconName: 'Settings' };
    return (
      <div style={{ paddingLeft: 15, paddingBottom: 10 }}>
        <ActionButton iconProps={settingsIcon} onClick={this._onClickSettings}>
          Settings
        </ActionButton>
      </div>
    );
  };

  private _renderSettingsPanelFooter = (): JSX.Element => {
    return (
      <div style={{ padding: 20, paddingLeft: 140 }}>
        <DefaultButton text="Cancel" onClick={this._onSettingPanelDismiss} allowDisabledFocus={true} />
        <span style={{ padding: 5 }} />
        <PrimaryButton text="Save" onClick={this._onSettingPanelDismiss} allowDisabledFocus={true} />
      </div>
    );
  };
}
