/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { Link } from '@fluentui/react/lib/Link';
import { List } from '@fluentui/react/lib/List';
import { Spinner, SpinnerSize } from '@fluentui/react/lib/Spinner';
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';

import { EmptyState } from '../EmptyState';
import { Panel } from '../Panel';
import { NotificationCard } from './NotificationCard/NotificationCard';
import { INotificationCardProps } from './NotificationCard/NotificationCard.types';
import {
  INotificationsPanelProps,
  INotificationsPanelStyles,
  NotificationsPanelState
} from './NotificationsPanel.types';

const getClassNames = classNamesFunction<{}, INotificationsPanelStyles>();

export const NotificationsPanelBase: React.FunctionComponent<INotificationsPanelProps> = props => {
  const {
    componentRef,
    notifications,
    emptyStateMessage,
    panelState,
    dismissAllText,
    errorPrimaryMessage,
    errorSecondaryMessage,
    onDismissAll,
    dismissTooltip,
    ...rest
  } = props;

  const [ariaLiveText, setAriaLiveText] = React.useState('');

  const hasNotifications = notifications?.length > 0;
  const panelReady = panelState === undefined || panelState === NotificationsPanelState.Loaded;

  React.useEffect(() => {
    props.onMount?.();
  });

  const _onRenderSubHeader = React.useCallback((): JSX.Element => {
    if (!hasNotifications || !dismissAllText || !onDismissAll) {
      return null;
    }

    return (
      <Link onClick={onDismissAll} title={dismissTooltip}>
        {dismissAllText}
      </Link>
    );
  }, [dismissAllText, onDismissAll, notifications]);

  const _renderEmptyStateOrLoadingBody = React.useCallback((): JSX.Element => {
    const classNames = getClassNames(props.styles);

    let component: JSX.Element;

    switch (panelState) {
      case NotificationsPanelState.Error:
        component = (
          <EmptyState
            icon="Ringer"
            primaryMessage={errorPrimaryMessage}
            secondaryMessage={errorSecondaryMessage}
          />
        );
        break;
      case NotificationsPanelState.Empty:
        component = <EmptyState icon="Ringer" primaryMessage={emptyStateMessage} />;
        break;
      case NotificationsPanelState.Loading:
        setAriaLiveText(props.ariaLoadingMessage);

        component = <Spinner size={SpinnerSize.large} />;
        break;
      default:
        component = null;
        setAriaLiveText('');
    }
    return <div className={classNames.centeredContent}>{component}</div>;
  }, [panelState, emptyStateMessage, errorPrimaryMessage, errorSecondaryMessage]);

  return (
    <>
      <Panel
        {...rest}
        className="ba-notificationsPanel"
        emptyStateProps={
          !hasNotifications &&
          panelReady && {
            icon: 'Ringer',
            primaryMessage: emptyStateMessage
          }
        }
        onRenderBody={!panelReady ? _renderEmptyStateOrLoadingBody : undefined}
        onRenderSubHeader={_onRenderSubHeader}
      >
        {hasNotifications && <List items={notifications} onRenderCell={_onRenderCell} />}
      </Panel>

      <div
        aria-live="assertive"
        aria-atomic="true"
        style={{ overflow: 'hidden', position: 'absolute', top: -1000, left: -1000, width: 0, height: 0 }}
      >
        {ariaLiveText}
      </div>
    </>
  );
};

const _onRenderCell = (notification: INotificationCardProps): JSX.Element => {
  return <NotificationCard {...notification} />;
};
