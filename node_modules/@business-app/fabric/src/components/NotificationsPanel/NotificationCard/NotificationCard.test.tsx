/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as Enzyme from 'enzyme';
import 'jest';
import { Icon } from '@fluentui/react/lib/Icon';
import { Label } from '@fluentui/react/lib/Label';
import { Link } from '@fluentui/react/lib/Link';
import { getTheme } from '@fluentui/react/lib/Styling';
import { Toggle } from '@fluentui/react/lib/Toggle';
import { KeyCodes } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { NotificationCardBase } from './NotificationCard.base';
import { getStyles } from './NotificationCard.styles';

describe('NotificationCard', () => {
  const styleProps = {
    theme: getTheme(),
    styles: getStyles
  };

  it('Simple Test', () => {
    const dismiss = () => {
      alert('dismiss');
    };
    const wrapper = Enzyme.shallow(
      <NotificationCardBase
        {...styleProps}
        id="n1"
        title="Title"
        body="Body"
        headerPrimaryText="1 hr ago"
        headerSecondaryText="7/14/2018"
        actionText="Action"
        onActionClick={dismiss}
        onDismiss={dismiss}
      />
    );

    // Three icons, the close icon, the generic notification icon and the separator icon
    expect(wrapper.find(Icon).length).toBe(3);
    // Two labels, title and body
    expect(wrapper.find(Label).length).toBe(2);
    // one Link
    expect(wrapper.find(Link).length).toBe(1);
  });

  it('Calls onDismiss on clicking the close icon', () => {
    let dismissCalled = false;
    const onDismiss = (id: string) => {
      expect(id).toEqual('n1');
      dismissCalled = true;
    };
    const wrapper = Enzyme.shallow(
      <NotificationCardBase
        {...styleProps}
        id="n1"
        title="Title"
        body="Body"
        actionText="Action"
        headerPrimaryText="1 hr ago"
        headerSecondaryText="7/14/2018"
        onActionClick={null}
        onDismiss={onDismiss}
      />
    );
    const button = wrapper.find('button').at(0);
    let stopPropagationCalled = false;
    const stopPropagation = () => {
      stopPropagationCalled = true;
    };
    button.simulate('click', { stopPropagation });
    expect(dismissCalled).toEqual(true);
    expect(stopPropagationCalled).toEqual(true);
  });

  it('OnDismiss icon has ariaLabel', () => {
    const wrapper = Enzyme.shallow(
      <NotificationCardBase
        {...styleProps}
        id="n1"
        title="Title"
        body="Body"
        actionText="Action"
        headerPrimaryText="1 hr ago"
        headerSecondaryText="7/14/2018"
        onActionClick={null}
        onDismiss={jest.fn()}
        dismissAriaLabel="DismissIconAriaLabel"
      />
    );
    const button = wrapper.find('button').at(0);
    expect(button.prop('aria-label')).toEqual('DismissIconAriaLabel');
  });

  it('Calls onAction when clicking the action link', () => {
    let actionCallbackCalled = false;
    const onActionClick = (id: string) => {
      expect(id).toEqual('a1');
      actionCallbackCalled = true;
    };
    const wrapper = Enzyme.shallow(
      <NotificationCardBase
        {...styleProps}
        id="a1"
        title="Title"
        body="Body"
        actionText="Action"
        headerPrimaryText="1 hr ago"
        headerSecondaryText="7/14/2018"
        onActionClick={onActionClick}
      />
    );
    const link = wrapper.find(Link);
    let stopPropagationCalled = false;
    const stopPropagation = () => {
      stopPropagationCalled = true;
    };
    link.simulate('click', { stopPropagation });
    expect(actionCallbackCalled).toEqual(true);
    expect(stopPropagationCalled).toEqual(true);
  });

  it('Calls onClick when clicking the notification body', () => {
    let onClickCallCount = 0;
    const onClick = (id: string) => {
      expect(id).toEqual('b1');
      onClickCallCount++;
    };
    const wrapper = Enzyme.mount(
      <NotificationCardBase
        {...styleProps}
        id="b1"
        title="Title"
        body="Body"
        actionText="Action"
        headerPrimaryText="1 hr ago"
        headerSecondaryText="7/14/2018"
        onClick={onClick}
      />
    );

    const body = wrapper.find('.ba-notificationCard-body');
    expect(body.prop('role')).toEqual('link');
    body.simulate('click');
    expect(onClickCallCount).toEqual(1);

    const element = body.getElement() as React.ComponentElement<{}, NotificationCardBase>;
    const target = (element.ref as React.RefObject<{}>).current;
    body.simulate('keydown', { keyCode: KeyCodes.space, target });
    expect(onClickCallCount).toEqual(2);
    body.simulate('keydown', { keyCode: KeyCodes.enter, target });
    expect(onClickCallCount).toEqual(3);
  });

  it('Body has a role attribute even if not clickable', () => {
    const wrapper = Enzyme.shallow(
      <NotificationCardBase
        {...styleProps}
        id="c1"
        title="Title"
        body="Body"
        actionText="Action"
        headerPrimaryText="1 hr ago"
        headerSecondaryText="7/14/2018"
      />
    );
    const body = wrapper.childAt(0).childAt(0);
    expect(body.prop('role')).not.toBeUndefined();
  });

  it('Renders custom component for icon if required', () => {
    const onRenderIcon = () => <Toggle title="my custom component title" />;
    const wrapper = Enzyme.shallow(
      <NotificationCardBase
        {...styleProps}
        id="a1"
        title="Title"
        body="Body"
        actionText="Action"
        headerPrimaryText="1 hr ago"
        headerSecondaryText="7/14/2018"
        onRenderIcon={onRenderIcon}
      />
    );
    const toggle = wrapper.find(Toggle);
    expect(toggle.length).toEqual(1);
    expect(toggle.prop('title')).toEqual('my custom component title');
  });

  it('Title and Body properties are optional', () => {
    const dismiss = () => {
      alert('dismiss');
    };
    const wrapper = Enzyme.shallow(
      <NotificationCardBase
        {...styleProps}
        id="n1"
        headerPrimaryText="1 hr ago"
        headerSecondaryText="7/16/2020"
        actionText="Action"
        onActionClick={dismiss}
        onDismiss={dismiss}
      />
    );

    // Two labels, title and body are empty
    expect(wrapper.find(Label).length).toBe(0);
  });

  it('Renders custom notification card', () => {
    const dismiss = () => {
      alert('dismiss');
    };
    const wrapper = Enzyme.shallow(
      <NotificationCardBase
        {...styleProps}
        id="n1"
        title="Title"
        body="Body"
        actionText="Action"
        headerPrimaryText="1 hr ago"
        headerSecondaryText="7/14/2018"
        onActionClick={dismiss}
        onDismiss={dismiss}
        onRenderCardBody={() => <div className="customNotificationCardBody">Hello Microsoft!!!</div>}
      />
    );

    const customCardContent = wrapper.find('.customNotificationCardBody');
    expect(customCardContent.text()).toBe('Hello Microsoft!!!');
  });

  it('HeaderSecondaryText and headerPrimaryText properties are optional', () => {
    const wrapper = Enzyme.shallow(
      <NotificationCardBase
        {...styleProps}
        id="n1"
        title="Title"
        actionText="Action"
        headerPrimaryText="1 hr ago"
      />
    );

    // one label title
    expect(wrapper.find(Label).length).toBe(1);
    const titleLabelWrapper = wrapper.find('.ba-notificationCard-title');
    expect(titleLabelWrapper.text()).toBe('Title');

    const headerWrapper = wrapper.find('.ba-notificationCard-headerTextContainer');
    expect(headerWrapper.childAt(0).text()).toBe('1 hr ago');
  });

  it('The separator icon renders only when both headerText properties are present', () => {
    const wrapper = Enzyme.shallow(
      <NotificationCardBase
        {...styleProps}
        id="n1"
        title="Title"
        actionText="Action"
        headerPrimaryText="1 hr ago"
        headerSecondaryText="7/15/2020"
      />
    );

    const headerWrapper = wrapper.find('.ba-notificationCard-headerTextContainer');
    expect(headerWrapper.childAt(0).text()).toBe('1 hr ago');
    expect(headerWrapper.childAt(2).text()).toBe('7/15/2020');
    // one separator icon and one info icon
    expect(wrapper.find(Icon).length).toBe(2);
    expect(wrapper.find(Icon).at(0).html()).toContain('data-icon-name="Separator"');
    expect(wrapper.find(Icon).at(1).html()).toContain('data-icon-name="Info"');
  });

  it('Tab index exists', () => {
    const dismiss = () => {
      alert('dismiss');
    };
    const wrapper = Enzyme.shallow(
      <NotificationCardBase
        {...styleProps}
        id="n1"
        title="Title"
        body="Body"
        headerPrimaryText="1 hr ago"
        headerSecondaryText="7/14/2018"
        actionText="Action"
        onActionClick={dismiss}
        onDismiss={dismiss}
      />
    );

    expect(wrapper.html()).toContain('tabindex');
  });

  it('Tab index can be disabled', () => {
    const dismiss = () => {
      alert('dismiss');
    };
    const wrapper = Enzyme.shallow(
      <NotificationCardBase
        {...styleProps}
        id="n1"
        title="Title"
        body="Body"
        headerPrimaryText="1 hr ago"
        headerSecondaryText="7/14/2018"
        actionText="Action"
        onActionClick={dismiss}
        onDismiss={dismiss}
        disableTabIndex={true}
      />
    );

    expect(wrapper.html()).not.toContain('tabindex');
  });
});
