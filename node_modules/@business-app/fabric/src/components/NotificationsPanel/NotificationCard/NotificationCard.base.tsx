/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { Icon } from '@fluentui/react/lib/Icon';
import { Label } from '@fluentui/react/lib/Label';
import { Link } from '@fluentui/react/lib/Link';
import { IProcessedStyleSet } from '@fluentui/react/lib/Styling';
import { KeyCodes } from '@fluentui/react/lib/Utilities';
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';

import {
  INotificationCardProps,
  INotificationCardStyleProps,
  INotificationCardStyles
} from './NotificationCard.types';

const getClassNames = classNamesFunction<INotificationCardStyleProps, INotificationCardStyles>();
export class NotificationCardBase extends React.Component<INotificationCardProps> {
  private _classNames: IProcessedStyleSet<INotificationCardStyles>;
  private _bodyRef = React.createRef<HTMLDivElement>();

  public render(): JSX.Element {
    const { isNew, onClick, theme, styles, disableTabIndex } = this.props;
    this._classNames = getClassNames(styles, { theme, hasOnClick: !!onClick });
    return (
      <div className={this._classNames.root}>
        <div className={this._classNames.container}>
          {isNew && <div className={this._classNames.readMarker} />}
          <div
            className={this._classNames.body}
            ref={this._bodyRef}
            tabIndex={disableTabIndex ? undefined : 0}
            onClick={this._onClick}
            onKeyDown={this._handleKeyDown}
            role={'link'}
          >
            {this._getCardContent()}
          </div>
        </div>
      </div>
    );
  }

  private _getCardContent(): JSX.Element {
    const { title, body, actionText, onActionClick, onRenderCardBody } = this.props;

    return onRenderCardBody ? (
      onRenderCardBody()
    ) : (
      <div>
        {this._renderHeader()}
        <div className={this._classNames.messageContainer}>
          {this._renderIcon()}
          <div className={this._classNames.message}>
            {title && <Label className={this._classNames.messageTitle}>{title}</Label>}
            {body && <Label className={this._classNames.messageDescription}>{body}</Label>}
            {actionText && onActionClick && (
              <Link className={this._classNames.messageActionText} onClick={this._handleActionClick}>
                {actionText}
              </Link>
            )}
          </div>
        </div>
      </div>
    );
  }
  private _handleKeyDown = (evt: React.KeyboardEvent<HTMLElement>): void => {
    const { id, onClick } = this.props;
    const enterOrSpace = evt.keyCode === KeyCodes.enter || evt.keyCode === KeyCodes.space;
    const targetIsBody = evt.target === this._bodyRef.current;
    if (onClick && enterOrSpace && targetIsBody) {
      onClick(id);
    }
  };

  private _renderHeader = (): JSX.Element => {
    const {
      headerSecondaryText,
      headerPrimaryText,
      dismissTooltip,
      onDismiss,
      headerTooltip,
      dismissAriaLabel
    } = this.props;

    const hasHeaderText = headerPrimaryText || headerSecondaryText;
    return (
      <div className={this._classNames.header}>
        {hasHeaderText && (
          <span className={this._classNames.headerTextContainer} title={headerTooltip}>
            {headerPrimaryText && <span>{headerPrimaryText}</span>}
            {headerPrimaryText && headerSecondaryText && (
              <span className={this._classNames.headerSeparator}>
                <Icon iconName="Separator" />
              </span>
            )}
            {headerSecondaryText && <span>{headerSecondaryText}</span>}
          </span>
        )}
        {onDismiss && (
          <button
            className={this._classNames.closeIcon}
            onClick={this._onDismiss}
            title={dismissTooltip}
            aria-label={dismissAriaLabel}
          >
            <Icon iconName="ChromeClose" />
          </button>
        )}
      </div>
    );
  };

  private _renderIcon = (): JSX.Element => {
    const { onRenderIcon } = this.props;
    return (
      <span className={this._classNames.iconContainer}>
        {onRenderIcon && onRenderIcon()}
        {!onRenderIcon && <Icon iconName="Info" />}
      </span>
    );
  };

  private _onDismiss = (evt: React.MouseEvent<HTMLElement>): void => {
    const { id, onDismiss } = this.props;
    evt.stopPropagation();
    onDismiss(id);
  };

  private _onClick = (): void => {
    const { id, onClick } = this.props;
    if (onClick) {
      onClick(id);
    }
  };

  private _handleActionClick = (evt: React.MouseEvent<HTMLElement>): void => {
    const { id, onActionClick } = this.props;
    evt.stopPropagation();
    onActionClick(id);
  };
}
