/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IPanelFooterButtonProps, Panel } from '@business-app/fabric/lib/components/Panel';
import { IButtonProps } from '@fluentui/react/lib/Button';
import { BaseComponent } from '@fluentui/react/lib/Utilities';
import * as React from 'react';

import * as Styles from './Multistep.styles';
import { IMultistepPanelFooterButtonProps, IMultistepPanelProps } from './MultistepPanel.types';

export class MultistepPanel extends BaseComponent<IMultistepPanelProps> {
  constructor(props: IMultistepPanelProps) {
    super(props);
  }

  public componentDidUpdate(prevProps: IMultistepPanelProps): void {
    if (prevProps.panelOpenIndex !== this.props.panelOpenIndex) {
      if (this.props.panelOpenIndex < 0 || this.props.panelOpenIndex >= this.props.panelsListProps.length) {
        this.props.onDismiss();
      }
    }
  }

  public render(): JSX.Element {
    let {
      panelsListProps,
      panelOpenIndex,
      setPanelOpenIndex,
      componentRef,
      ...inheritedPanelProps
    } = this.props;

    if (panelsListProps.length === 0) {
      return null;
    }

    if (panelOpenIndex < 0 || !panelOpenIndex) {
      panelOpenIndex = 0;
    } else if (panelOpenIndex >= panelsListProps.length) {
      panelOpenIndex = panelsListProps.length - 1;
    }

    const currentPanelListProps = panelsListProps[panelOpenIndex];

    const footerButtons: IPanelFooterButtonProps[] =
      currentPanelListProps.footerButtons &&
      currentPanelListProps.footerButtons.map((footerProps: IMultistepPanelFooterButtonProps) => {
        const { navigateableOnClick, ...restFooterProps } = footerProps;
        const dismissableOnClick = (dismissPanel: () => void) => {
          if (navigateableOnClick) {
            const nextIndex = navigateableOnClick(panelOpenIndex, dismissPanel);
            if (nextIndex) {
              setPanelOpenIndex(nextIndex);
            }
          }
        };
        return { ...restFooterProps, dismissableOnClick };
      });

    let headerLeftButtonProps: IButtonProps;
    if (!this.props.hideLeftHeaderBackButton && panelOpenIndex > 0) {
      headerLeftButtonProps = {
        ariaLabel: inheritedPanelProps.headerIconAriaLabel,
        iconProps: {
          iconName: 'Back'
        },
        onClick: () => {
          let newPanelOpenIndex = panelOpenIndex - 1;
          if (this.props.onLeftHeaderBackButtonClicked) {
            newPanelOpenIndex = this.props.onLeftHeaderBackButtonClicked(
              panelOpenIndex,
              this.props.onDismiss
            );
          }
          setPanelOpenIndex(newPanelOpenIndex);
        }
      };
    }

    return (
      <Panel
        {...inheritedPanelProps}
        headerLeftButtonProps={headerLeftButtonProps}
        {...currentPanelListProps}
        footerButtons={footerButtons}
        styles={{ ...Styles.multistepPanelStyles, ...currentPanelListProps.styles }}
      />
    );
  }
}
