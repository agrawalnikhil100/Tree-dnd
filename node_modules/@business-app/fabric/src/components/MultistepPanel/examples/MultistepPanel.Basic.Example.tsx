/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IDismissDialog, IMessageBar } from '@business-app/fabric/lib/components/Panel';
import { MessageBarType } from '@fluentui/react/lib/MessageBar';
import { Toggle } from '@fluentui/react/lib/Toggle';
import * as React from 'react';

import { MultistepPanel } from '../MultistepPanel';
import { IPanelStepProps } from '../MultistepPanel.types';

export class MultistepPanelBasicExample extends React.Component<
  {},
  {
    open: boolean;
    panelOpenIndex: number;
    dismissDialog: IDismissDialog;
    messageBar: IMessageBar;
    panel1Stuff: boolean;
  }
> {
  constructor(props: {}) {
    super(props);

    this.state = {
      open: false,
      panelOpenIndex: 0,
      dismissDialog: {
        title: 'Discard changes',
        subtext: 'Are you sure you want to discard changes?',
        confirmButtonText: 'Discard',
        cancelButtonText: 'Cancel'
      },
      messageBar: null,
      panel1Stuff: false
    };
  }

  public getPanelProps1(commonProps: Partial<IPanelStepProps>): IPanelStepProps {
    return {
      ...commonProps,
      headerText: 'Page 1',
      closeButtonAriaLabel: 'close',
      children: <span>Content goes here.</span>,
      footerButtons: [
        {
          primary: true,
          navigateableOnClick: (currentIndex: number) => currentIndex - 1,
          text: 'Cancel',
          ariaLabel: 'Cancel'
        },
        {
          navigateableOnClick: (currentIndex: number) => currentIndex + 1,
          text: 'Next',
          ariaLabel: 'Next'
        }
      ]
    };
  }

  public getPanelProps2(commonProps: Partial<IPanelStepProps>): IPanelStepProps {
    const content = (
      <Toggle
        label="Click here to proceed"
        checked={this.state.panel1Stuff}
        onChanged={hasChanged => this.setState({ panel1Stuff: hasChanged })}
        onText="Changed"
        offText="Unchanged"
      />
    );
    return {
      ...commonProps,
      headerText: 'Page 2',
      closeButtonAriaLabel: 'close',
      children: content,
      footerButtons: [
        {
          primary: true,
          navigateableOnClick: (currentIndex: number) => currentIndex - 1,
          text: 'Back'
        },
        {
          navigateableOnClick: (currentIndex: number) => {
            if (this.state.panel1Stuff) {
              return currentIndex + 1;
            } else {
              this._setError('Please toggle the button to proceed.');
              return currentIndex;
            }
          },
          text: 'Next'
        }
      ],
      messageBar: this.state.messageBar
    };
  }

  public getPanelProps3(commonProps: Partial<IPanelStepProps>): IPanelStepProps {
    return {
      ...commonProps,
      headerText: 'Page 3',
      closeButtonAriaLabel: 'close',
      children: <span>More content goes here.</span>,
      footerButtons: [
        {
          primary: true,
          navigateableOnClick: (currentIndex: number) => currentIndex - 1,
          text: 'Back'
        },
        {
          navigateableOnClick: (currentIndex: number) => currentIndex + 1,
          text: 'Save'
        }
      ]
    };
  }

  public render(): JSX.Element {
    const { open, panelOpenIndex, dismissDialog } = this.state;

    const commonProps: Partial<IPanelStepProps> = {
      hasCloseButton: true
    };
    const panelsListProps: IPanelStepProps[] = [
      this.getPanelProps1(commonProps),
      this.getPanelProps2(commonProps),
      this.getPanelProps3(commonProps)
    ];

    return (
      <div>
        <Toggle
          label="Show panel"
          checked={open}
          onChanged={isOpen => this.setState({ open: isOpen })}
          onText="Visible"
          offText="Hidden"
        />

        <div className="ba-Panel-BasicExample">
          <MultistepPanel
            isOpen={open}
            isLightDismiss={true}
            dismissDialog={dismissDialog}
            showDismissDialog={true}
            onDismiss={this._onDismiss}
            panelsListProps={panelsListProps}
            panelOpenIndex={panelOpenIndex}
            setPanelOpenIndex={this._setPanelOpenIndex}
            headerIconAriaLabel="back"
          />
        </div>
      </div>
    );
  }

  private _setPanelOpenIndex = (newIndex: number): void => {
    if (this.state.panelOpenIndex !== newIndex) {
      this.setState({
        panelOpenIndex: newIndex,
        messageBar: null
      });
    }
  };

  private _onDismiss = (): void => {
    this.setState({ open: false });
  };

  private _setError(message: string): void {
    this.setState({
      messageBar: {
        messageBarProps: { messageBarType: MessageBarType.error },
        onRenderBody: () => <span>{message}</span>
      }
    });
  }
}
