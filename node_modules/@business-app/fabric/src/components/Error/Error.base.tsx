/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { DefaultButton, PrimaryButton } from '@fluentui/react/lib/Button';
import { Link } from '@fluentui/react/lib/Link';
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';

import { IErrorProps, IErrorStyleProps, IErrorStyles } from './Error.types';
import { Icon } from '@fluentui/react/lib/Icon';
import { concatStyleSets, getTheme } from '@fluentui/react/lib/Styling';
import { getDefaultButtonStyles, getDefaultLinkStyles } from './Error.styles';
import { getSmallSplashSvg } from './assets/ErrorSplashSmall';
import { getMediumSplashSvg } from './assets/ErrorSplashMedium';
import { getLargeSplashSvg } from './assets/ErrorSplashLarge';
const getClassNames = classNamesFunction<IErrorStyleProps, IErrorStyles>();

/**
 * Provides an error splash page with optional details of the cause and
 * next steps to contact self-correct or contact customer service
 * @export
 */
export function ErrorBase(props: IErrorProps) {
  const {
    className,
    title,
    subtitle,
    seeDetailsLinkShowLabel,
    seeDetailsLinkHideLabel,
    learnMoreLink,
    callToActionLink,
    errorDetails,
    styles,
    theme = getTheme(),
    ...rest
  } = props;
  const [isContentVisible, setIsContentVisible] = React.useState(false);

  const classNames = getClassNames(styles, {
    theme,
    className
  });

  const toggleState = React.useCallback(() => setIsContentVisible(!isContentVisible), [isContentVisible]);
  const headerStyles = React.useCallback(
    () => concatStyleSets(getDefaultButtonStyles(theme), classNames.callToActionButton),
    [theme]
  );

  const menuIconProps = { iconName: isContentVisible ? 'ChevronUp' : 'ChevronDown' };
  const seeDetailsButtonProps = {
    menuIconProps,
    ariaExpanded: isContentVisible
  };

  return (
    <div role="presentation" className={classNames.root} {...rest}>
      <h1 className={classNames.title}>{title}</h1>
      {(subtitle || learnMoreLink) && (
        <div className={classNames.subtitle}>
          {subtitle}
          {learnMoreLink && (
            <Link
              className={classNames.learnMoreLink}
              href={learnMoreLink.url}
              target={learnMoreLink.target}
              styles={getDefaultLinkStyles(theme)}
            >
              {learnMoreLink.label}
            </Link>
          )}
        </div>
      )}

      {seeDetailsLinkShowLabel && seeDetailsLinkHideLabel && errorDetails && (
        <>
          <DefaultButton
            aria-expanded={isContentVisible}
            onClick={toggleState}
            onMenuClick={toggleState}
            {...seeDetailsButtonProps}
            text={isContentVisible ? seeDetailsLinkHideLabel : seeDetailsLinkShowLabel}
            className={classNames.seeDetailsButton}
          />

          {isContentVisible && (
            <div className={classNames.seeDetailsDiv}>
              {renderLabeledField(errorDetails.messageLabel, errorDetails.message)}
              {renderLabeledField(errorDetails.timeStampLabel, errorDetails.timeStamp)}
              {renderLabeledField(errorDetails.sessionIdLabel, errorDetails.sessionId)}
              {renderLabeledField(errorDetails.objectIdLabel, errorDetails.objectId)}
              {renderLabeledField(errorDetails.tenantIdLabel, errorDetails.tenantId)}
              {errorDetails.customerSupportLink && (
                <Link
                  className={classNames.customerSupportLink}
                  href={errorDetails.customerSupportLink.url}
                  target={errorDetails.customerSupportLink.target}
                  styles={getDefaultLinkStyles(theme)}
                >
                  {errorDetails.customerSupportLink.label} {<Icon iconName="OpenInNewWindow" />}
                </Link>
              )}
            </div>
          )}
        </>
      )}

      {callToActionLink && (
        <PrimaryButton
          text={callToActionLink.label}
          href={callToActionLink.url}
          target={callToActionLink.target}
          styles={headerStyles()}
          className={classNames.callToActionButton}
        />
      )}
      <div className={classNames.imageSmall}>{getSmallSplashSvg()}</div>
      <div className={classNames.imageMedium}>{getMediumSplashSvg()}</div>
      <div className={classNames.imageLarge}>{getLargeSplashSvg()}</div>
      <div className={classNames.imageFooter} />
    </div>
  );
}

function renderLabeledField(fieldLabel: string, fieldText: string) {
  return (
    <>
      {fieldLabel && fieldText && (
        <div>
          <b>{fieldLabel}:</b> {fieldText}
        </div>
      )}
      {!fieldLabel && fieldText && <div>{fieldText}</div>}
    </>
  );
}
