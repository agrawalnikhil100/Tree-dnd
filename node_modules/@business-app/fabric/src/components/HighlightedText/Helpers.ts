/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IHighlightedTextProps } from './HighlightedText.types';

/**
 * Given a list of words, calculate the start indices and lengths of all occurences of the words.
 * @param str String in which to find indices.
 * @param words Array of words whose indices to calculate.
 * @param ignoreCase Whether to ignore case when searching for words. Defaults to false.
 */
export function calculateWordHighlights(
  str: string,
  words: string[],
  ignoreCase?: boolean
): Array<IHighlightedTextProps['highlights'][0]> {
  const regexFlags = ignoreCase ? 'gi' : 'g';

  return flatArray(
    words.map(word => {
      const wordOccurences: Array<IHighlightedTextProps['highlights'][0]> = [];
      const length = word.length;

      // TODO: switch to String.matchAll once support is wider
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll
      let result: RegExpExecArray;
      const regex = new RegExp(word, regexFlags);
      // eslint-disable-next-line no-cond-assign
      while ((result = regex.exec(str))) {
        wordOccurences.push({
          startIndex: result.index,
          length
        });
        // manually advance the index to ensure we don't miss overlaps
        regex.lastIndex = result.index + 1;
      }

      return wordOccurences;
    })
  );
}

function flatArray<T>(nestedArray: T[][]): T[] {
  return nestedArray.reduce((accum, cur) => accum.concat(cur), []);
}
