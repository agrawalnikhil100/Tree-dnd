/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { mount, ReactWrapper } from 'enzyme';
import * as React from 'react';
import { calculateWordHighlights } from './Helpers';
import { HighlightedText } from './HighlightedText';
import { IHighlightedTextProps } from './HighlightedText.types';

type HighlightedTextWrapper = ReactWrapper<IHighlightedTextProps>;
type ToStringsType = (
  text: string,
  highlights: IHighlightedTextProps['highlights']
) => Array<{ str: string; isHighlighted: boolean }>;

describe('HighlightedText', () => {
  const mockLabels: IHighlightedTextProps['labels'] = {
    beginHighlightedText: 'Begin highlighted text',
    endHighlightedText: 'End highlighted text'
  };

  describe('toStrings', () => {
    let wrapper: HighlightedTextWrapper;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let instance: any;
    let toStrings: ToStringsType;

    beforeAll(async () => {
      wrapper = mount(<HighlightedText text={'Hello world'} highlights={[]} labels={mockLabels} />);
      instance = wrapper.childAt(0).instance();
      toStrings = instance.toStrings;
    });

    afterAll(() => {
      wrapper.unmount();
    });

    function getHighlight(startIndex: number, length: number) {
      return {
        startIndex,
        length
      };
    }

    function highlighted(str: string) {
      return {
        str,
        isHighlighted: true
      };
    }

    function unhighlighted(str: string) {
      return {
        str,
        isHighlighted: false
      };
    }

    it('highlights nothing if no highlights', () => {
      expect(toStrings('Hello world', [])).toEqual([unhighlighted('Hello world')]);
    });

    it('highlights appropriately with non-overlapping, in-bounds, positive-length highlights', () => {
      expect(toStrings('Hello world', [getHighlight(0, 5)])).toEqual([
        highlighted('Hello'),
        unhighlighted(' world')
      ]);
      expect(toStrings('Hello world', [getHighlight(0, 5), getHighlight(7, 2)])).toEqual([
        highlighted('Hello'),
        unhighlighted(' w'),
        highlighted('or'),
        unhighlighted('ld')
      ]);
    });

    it('handles out-of-bounds highlights', () => {
      expect(toStrings('Hello world', [getHighlight(-1, 2)])).toEqual([
        highlighted('H'),
        unhighlighted('ello world')
      ]);
    });

    it('highlights overlapping highlights', () => {
      expect(toStrings('Hello world', [getHighlight(0, 2), getHighlight(1, 4)])).toEqual([
        highlighted('Hello'),
        unhighlighted(' world')
      ]);
    });

    it('highlights backwards with negative indices', () => {
      expect(toStrings('Hello world', [getHighlight(5, -5)])).toEqual([
        highlighted('Hello'),
        unhighlighted(' world')
      ]);
      expect(toStrings('Hello world', [getHighlight(2, 1), getHighlight(4, -3)])).toEqual([
        unhighlighted('H'),
        highlighted('ell'),
        unhighlighted('o world')
      ]);
    });

    it('highlights multi-byte and RTL', () => {
      const text = 'Hello ðŸ¤  world';
      const actual = toStrings(text, calculateWordHighlights(text, ['ðŸ¤ ']));
      const expected = [unhighlighted('Hello '), highlighted('ðŸ¤ '), unhighlighted(' world')];
      expect(actual).toEqual(expected);

      const text2 = 'the name of this state in arabic is \u202BÙ…ØµØ±\u202C, yes?';
      const actual2 = toStrings(text2, calculateWordHighlights(text2, ['\u202BÙ…ØµØ±\u202C']));
      const expected2 = [
        unhighlighted('the name of this state in arabic is '),
        highlighted('\u202BÙ…ØµØ±\u202C'),
        unhighlighted(', yes?')
      ];
      expect(actual2).toEqual(expected2);
    });
  });
});
