/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import {
  ComponentPage,
  ExampleCard,
  IComponentDemoPageProps,
  PropertiesTableSet
} from '@fluentui/react-docsite-components';
import * as React from 'react';
import { TreeViewBasicUncontrolledExample } from './examples/TreeView.BasicUncontrolled.Example';
import { TreeViewCustomItemExample } from './examples/TreeView.CustomItem.Example';
import { TreeViewFileTreeExample } from './examples/TreeView.FileTree.Example';
import { TreeViewCustomStylesExample } from './examples/TreeView.CustomStyles.Example';

import TreeViewBasicUncontrolledExampleCode from '!!raw-loader!../../../src/components/TreeView/examples/TreeView.BasicUncontrolled.Example.tsx';
import TreeViewCustomItemExampleCode from '!!raw-loader!../../../src/components/TreeView/examples/TreeView.CustomItem.Example.tsx';
import TreeViewFileTreeExampleCode from '!!raw-loader!../../../src/components/TreeView/examples/TreeView.FileTree.Example.tsx';
import TreeViewCustomStylesExampleCode from '!!raw-loader!../../../src/components/TreeView/examples/TreeView.CustomStyles.Example.tsx';
import TreeViewPropertiesTableSet from '!!raw-loader!../../../src/components/TreeView/TreeView.types.ts';

export class TreeViewPage extends React.Component<IComponentDemoPageProps> {
  public render(): JSX.Element {
    return (
      <ComponentPage
        styles={{ navigation: { display: 'none' } }}
        title={'TreeView'}
        componentName="TreeView"
        exampleCards={
          <div>
            <ExampleCard title="Basic Uncontrolled TreeView" code={TreeViewBasicUncontrolledExampleCode}>
              <TreeViewBasicUncontrolledExample />
            </ExampleCard>
            <ExampleCard title="Custom Item TreeView" code={TreeViewCustomItemExampleCode}>
              <TreeViewCustomItemExample />
            </ExampleCard>
            <ExampleCard title="VSCode-like File Tree" code={TreeViewFileTreeExampleCode}>
              <TreeViewFileTreeExample />
            </ExampleCard>
            <ExampleCard
              title="Different background color example for use in a non-menu/other application"
              code={TreeViewCustomStylesExampleCode}
            >
              <TreeViewCustomStylesExample />
            </ExampleCard>
          </div>
        }
        propertiesTables={<PropertiesTableSet sources={[TreeViewPropertiesTableSet]} />}
        overview={
          <div>
            <p>
              A wrapper on top of the Tree control which allows the "items" prop to be hierarchical, which can
              be more convenient in many cases.
              <br />
              <br />
              Another advantage is that certain properties for the tree items (namely: level, setSize,
              indexInParent, and isFolder) will get automatically provided by the TreeView so you don't need
              to worry about them.
              <br />
              <br />
              See <a href="https://businessappfabric.azurewebsites.net/#component=id__25">BAF Tree</a>.
            </p>
          </div>
        }
        isHeaderVisible={this.props.isHeaderVisible}
      />
    );
  }
}
