/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { mount, ReactWrapper } from 'enzyme';
import * as React from 'react';
import { ITreeNodeProps, TreeNode } from '../Tree';
import { ITreeViewState, TreeView } from './TreeView.base';
import { ITreeViewItem, ITreeViewProps } from './TreeView.types';

interface ITestItem extends ITreeViewItem {
  testPropertyA: number;
  testPropertyB: string;
}

type TreeViewWrapper = ReactWrapper<ITreeViewProps<ITestItem>, ITreeViewState>;

describe('TreeView', () => {
  it('TreeView items should get correctly sent to the Tree', () => {
    const wrapper: TreeViewWrapper = mount(
      <TreeView
        items={[
          {
            label: 'one',
            key: '1',
            children: [
              {
                label: 'two',
                key: '2'
              },
              {
                label: 'three',
                key: '3'
              }
            ]
          }
        ]}
        strings={{
          listAriaLabel: 'list',
          moreCommandsAriaLabel: 'more commands'
        }}
        initialExpandedItemKeys={new Set(['1'])}
      />
    );

    const node1Props = (wrapper.find(TreeNode).at(0) as ReactWrapper<ITreeNodeProps>).props();

    const node2Props = (wrapper.find(TreeNode).at(1) as ReactWrapper<ITreeNodeProps>).props();

    const node3Props = (wrapper.find(TreeNode).at(2) as ReactWrapper<ITreeNodeProps>).props();

    expect(node1Props.label).toEqual('one');
    expect(node1Props.itemKey).toEqual('1');
    expect(node1Props.level).toEqual(0);
    expect(node1Props.indexInParent).toEqual(0);
    expect(node1Props.setSize).toEqual(1);
    expect(node1Props.isFolder).toEqual(true);

    expect(node2Props.label).toEqual('two');
    expect(node2Props.itemKey).toEqual('2');
    expect(node2Props.level).toEqual(1);
    expect(node2Props.indexInParent).toEqual(0);
    expect(node2Props.setSize).toEqual(2);
    expect(node2Props.isFolder).toBeFalsy();

    expect(node3Props.label).toEqual('three');
    expect(node3Props.itemKey).toEqual('3');
    expect(node3Props.level).toEqual(1);
    expect(node3Props.indexInParent).toEqual(1);
    expect(node3Props.setSize).toEqual(2);
    expect(node3Props.isFolder).toBeFalsy();

    wrapper.unmount();
  });

  it('TreeView items should only be folders when they have children', () => {
    const wrapper: TreeViewWrapper = mount(
      <TreeView
        items={[
          {
            label: 'one',
            key: '1',
            children: [
              {
                label: '',
                key: 'child'
              }
            ]
          },
          {
            label: 'two',
            key: '2',
            children: []
          },
          {
            label: 'three',
            key: '3'
          }
        ]}
        strings={{
          listAriaLabel: 'list',
          moreCommandsAriaLabel: 'more commands'
        }}
        initialExpandedItemKeys={new Set(['1'])}
      />
    );

    const node1Props = (wrapper.find(TreeNode).at(0) as ReactWrapper<ITreeNodeProps>).props();

    const node2Props = (wrapper.find(TreeNode).at(1) as ReactWrapper<ITreeNodeProps>).props();

    const node3Props = (wrapper.find(TreeNode).at(2) as ReactWrapper<ITreeNodeProps>).props();

    expect(node1Props.isFolder).toEqual(true);
    expect(node2Props.isFolder).toBeFalsy();
    expect(node3Props.isFolder).toBeFalsy();

    wrapper.unmount();
  });
});
