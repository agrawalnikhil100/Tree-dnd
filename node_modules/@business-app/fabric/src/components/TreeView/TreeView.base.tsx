/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { BaseComponent } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { ITreeItem, Tree } from '../Tree';
import { ITreeViewItem, ITreeViewProps } from './TreeView.types';

export interface ITreeViewState {
  itemsInput: ITreeViewItem[];
  itemsOutput: ITreeItem[];
}

/**
 * A wrapper on top of the generic Tree which allows a nested items structure, which is often more convenient.
 */
export class TreeView<T extends ITreeViewItem> extends BaseComponent<ITreeViewProps<T>, ITreeViewState> {
  private static _getStateFromProps<I extends ITreeViewItem>(
    nextProps: ITreeViewProps<I>,
    prevState: ITreeViewState
  ): ITreeViewState {
    // Only remap the items when the array reference has changed.
    if (nextProps.items !== prevState.itemsInput) {
      return {
        itemsInput: nextProps.items,
        itemsOutput: this._mapControlsToTreeViewItems(nextProps.items)
      };
    }

    return prevState;
  }

  private static _mapControlsToTreeViewItems = (
    items: ITreeViewItem[],
    treeItems: ITreeItem[] = [],
    level: number = 0
  ): ITreeItem[] => {
    for (let index = 0; index < items.length; index++) {
      const item = items[index];
      const hasChildren = !!item.children && item.children.length > 0;

      // Add the item
      treeItems.push({
        ...item,
        level: level,
        setSize: items.length,
        indexInParent: index,
        isFolder: hasChildren
      } as ITreeItem);

      // If the item is a category and has children, add the children
      if (item.children) {
        TreeView._mapControlsToTreeViewItems(item.children, treeItems, level + 1);
      }
    }

    return treeItems;
  };

  public constructor(props: ITreeViewProps<T>) {
    super(props);

    this.state = TreeView._getStateFromProps(props, {
      itemsInput: this.props.items,
      itemsOutput: TreeView._mapControlsToTreeViewItems(this.props.items)
    });
  }
  public static getDerivedStateFromProps(nextProps: ITreeViewProps<never>, prevState: ITreeViewState) {
    if (!prevState) {
      return null;
    }
    return TreeView._getStateFromProps(nextProps, prevState);
  }

  public render(): JSX.Element {
    return <Tree {...this.props} items={this.state.itemsOutput} />;
  }
}
