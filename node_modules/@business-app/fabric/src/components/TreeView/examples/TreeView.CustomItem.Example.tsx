/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';
import { mergeStyleSets } from '@fluentui/react/lib/Styling';
import * as React from 'react';
import { SelectionType } from '../../Tree';
import { ITreeItem } from '../../Tree/Tree.types';
import { TreeView } from '../TreeView.base';
import { ITreeViewItem } from '../TreeView.types';

export interface ICustomizedTreeViewItem
  extends Pick<ITreeViewItem, Exclude<keyof ITreeViewItem, 'children'>> {
  pizza: string;
  children?: ICustomizedTreeViewItem[];
}

export type ICustomizedTreeItem = Pick<
  ICustomizedTreeViewItem,
  Exclude<keyof ICustomizedTreeViewItem, 'children'>
> &
  ITreeItem;

export interface ICustomItemTreeViewExampleState {
  lastSelectedPizza: string;
}

export class TreeViewCustomItemExample extends React.Component<{}, ICustomItemTreeViewExampleState> {
  public constructor(props: undefined) {
    super(props);

    this.state = {
      lastSelectedPizza: 'none'
    };
  }

  public render(): JSX.Element {
    const items: ICustomizedTreeViewItem[] = [
      {
        label: 'Group1',
        key: '0',
        pizza: 'cheese',
        children: [
          {
            label: 'Group1-1',
            key: '1',
            pizza: 'pepperoni',
            children: [
              {
                label: 'Item 1-1-1',
                key: '2',
                pizza: 'four meat'
              },
              {
                label: 'Item 1-1-2',
                key: '3',
                pizza: 'hawaiian'
              },
              {
                label: 'Item 1-1-3',
                key: '4',
                pizza: 'vegetable'
              }
            ]
          },
          {
            label: 'Item 1-1',
            key: '5',
            pizza: 'supreme'
          },
          {
            label: 'Item 1-2',
            key: '6',
            pizza: 'no cheese'
          }
        ]
      },
      {
        label: 'Group2',
        key: '7',
        pizza: 'four cheese',
        children: [
          {
            label: 'Item 2-1',
            key: '8',
            pizza: 'grilled chicken'
          },
          {
            label: 'Item 2-2',
            key: '9',
            pizza: 'empty box'
          }
        ]
      }
    ];

    return (
      <div>
        <p>
          This is an example to show how you can use the TreeView with custom tree items (where you've added
          additional properties to the item interface).
        </p>
        <p>
          The last pizza you selected was: <b>{this.state.lastSelectedPizza}</b>
        </p>
        <div style={{ width: '320px', height: '320px', overflow: 'auto', userSelect: 'none' }}>
          <TreeView
            items={items}
            strings={{
              listAriaLabel: 'list',
              moreCommandsAriaLabel: 'more commands'
            }}
            onRenderItemLabel={this._onRenderItemLabel}
            onItemSelected={this._onItemSelected}
            getItemCommands={this._getCommands}
          />
        </div>
      </div>
    );
  }

  private _onRenderItemLabel = (item: ICustomizedTreeItem): JSX.Element => {
    const name = item.label;
    return (
      <div className={customStyles.itemContainer} data-is-focusable={false}>
        <div title={name} className={customStyles.nameContainer} aria-readonly={true}>
          {name}
          {' - '}
          {item.pizza}
        </div>
      </div>
    );
  };

  private _onItemSelected = (
    item: ICustomizedTreeItem,
    type: SelectionType,
    isSelected: boolean,
    isExpanded: boolean,
    index: number
  ): void => {
    this.setState({ lastSelectedPizza: item.pizza });
  };

  private _getCommands = (): IContextualMenuItem[] => {
    return [
      {
        key: 'New',
        text: 'New',
        iconProps: { iconName: 'Add' }
      },
      {
        key: 'Mail',
        text: 'Mail',
        iconProps: { iconName: 'Mail' }
      },
      {
        key: 'Calendar',
        text: 'Calendar',
        iconProps: { iconName: 'Calendar' }
      }
    ];
  };
}

const customStyles = mergeStyleSets({
  itemContainer: {
    flex: '1 1 auto',
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    maxWidth: '100%',
    outline: 'none',
    textOverflow: 'ellipsis',
    overflow: 'hidden'
  },
  nameContainer: {
    flex: '1 1 auto',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    maxWidth: '100%',
    color: '#333333',
    fontSize: '12px',
    marginLeft: '5px',
    outline: 'none'
  }
});
