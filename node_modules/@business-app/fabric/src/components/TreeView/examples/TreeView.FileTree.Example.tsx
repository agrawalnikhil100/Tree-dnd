/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { ContextualMenuItemType, IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';
import * as React from 'react';
import { ITreeItem } from '../../Tree';
import { TreeView } from '../TreeView.base';
import { ITreeViewItem } from '../TreeView.types';

export class TreeViewFileTreeExample extends React.Component {
  private _sharedOptions: IContextualMenuItem[] = [
    {
      key: 'Rename',
      text: 'Rename',
      iconProps: { iconName: 'Rename' }
    },
    {
      key: 'Delete',
      text: 'Delete',
      iconProps: { iconName: 'Delete' }
    }
  ];

  public render(): JSX.Element {
    const items: ITreeViewItem[] = [
      {
        label: 'src',
        key: '0',
        children: [
          {
            label: 'components',
            key: '1',
            children: [
              {
                label: 'Tree',
                key: '2',
                children: [
                  {
                    label: 'tree.html',
                    key: '3',
                    iconProps: { iconName: 'FileHTML' }
                  },
                  {
                    label: 'tree.less',
                    key: '4',
                    iconProps: { iconName: 'FileLess' }
                  },
                  {
                    label: 'tree.js',
                    key: '5',
                    iconProps: { iconName: 'FileCode' }
                  }
                ]
              },
              {
                label: 'Banner',
                key: '6',
                children: [
                  {
                    label: 'banner.html',
                    key: '7',
                    iconProps: { iconName: 'FileHTML' }
                  },
                  {
                    label: 'banner.less',
                    key: '8',
                    iconProps: { iconName: 'FileLess' }
                  },
                  {
                    label: 'banner.js',
                    key: '9',
                    iconProps: { iconName: 'FileCode' }
                  }
                ]
              }
            ]
          },
          {
            label: 'index.html',
            key: '10',
            iconProps: { iconName: 'FileHTML' }
          },
          {
            label: 'index.less',
            key: '11',
            iconProps: { iconName: 'FileLess' }
          }
        ]
      },
      {
        label: 'package.json',
        key: '12',
        iconProps: { iconName: 'FileCode' }
      },
      {
        label: 'README.md',
        key: '13',
        iconProps: { iconName: 'Info' }
      }
    ];

    return (
      <div>
        <p>
          This is an example of rendering a tree like the file tree in VSCode, where leaf nodes have icons and
          folders have carets.
        </p>
        <div style={{ width: '520px', height: '420px', overflow: 'auto', userSelect: 'none' }}>
          <TreeView
            items={items}
            strings={{
              listAriaLabel: 'list',
              moreCommandsAriaLabel: 'more commands'
            }}
            getItemCommands={this._getCommands}
            styles={{
              // When there is no collapse/expand icon,
              // don't preserve the space it would have occupied.
              noExpandIcon: {
                width: 0
              }
            }}
          />
        </div>
      </div>
    );
  }

  private _getCommands = (item: ITreeItem): IContextualMenuItem[] => {
    if (item.isFolder) {
      return [
        {
          key: 'New File',
          text: 'New File',
          iconProps: { iconName: 'PageAdd' }
        },
        {
          key: 'New Folder',
          text: 'New Folder',
          iconProps: { iconName: 'FabricNewFolder' }
        },
        {
          key: 'divider-1',
          text: 'divider-1',
          itemType: ContextualMenuItemType.Divider
        },
        ...this._sharedOptions
      ];
    }

    return this._sharedOptions;
  };
}
