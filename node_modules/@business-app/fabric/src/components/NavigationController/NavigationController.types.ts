/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import { IBaseProps } from '@fluentui/react/lib/Utilities';
import { IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';
import { INavigationControllerViewProps } from './NavigationControllerView.types';

export interface INavigationController {
  /**
   * Pushes a new view to the history and sets the active view to it.
   * Note that this throws away the previously available forward views to go to.
   * @param view New view to activate
   */
  goTo(view: string): void;

  /**
   * Gets the current active view key
   */
  getActiveViewKey(): string;

  /**
   * If possible, goes to the previous view and returns its key
   */
  back(): string;

  /**
   * If possible, goes to the next view and returns its key
   */
  forward(): string;

  /**
   * Returns if there exists a previous view to go to
   */
  canGoBack(): boolean;
  /**
   * Returns if there exists a next view to go to
   */
  canGoForward(): boolean;

  /**
   * Resets the NavigationController
   * @param activeViewKey The active view to start with
   */
  reset(activeViewKey: string): void;
}
export interface INavigationControllerProps extends IBaseProps<INavigationController> {
  /**
   * Currently selected view's key.
   * This takes in effect only when the component is mounted.
   * To change the active view, use INavigationController (through NavigationControllerContext)
   */
  readonly initialActiveViewKey: string;

  /**
   * Toggles showing the back button when it's possible to go back
   * Defaults to false
   */
  readonly showBackButton?: boolean;

  /**
   * Accessible label for the back button.
   */
  readonly backButtonAriaLabel?: string;

  /**
   * The views are accepted as children of the component
   */
  readonly children: (
    context: INavigationController
  ) => Array<React.ReactElement<INavigationControllerViewProps>>;

  /**
   * Call to provide customized styling that will layer on top of the variant rules.
   */
  readonly styles?: IStyleFunctionOrObject<INavigationControllerStyleProps, INavigationControllerStyles>;

  /**
   * Theme provided by High-Order Component.
   */
  readonly theme?: ITheme;

  /**
   * The various localized strings the component requires.
   */
  readonly strings?: {};

  /**
   * Optional override for rendering the header
   */
  onRenderHeader?(
    props: INavigationControllerProps,
    viewProps: INavigationControllerViewProps,
    context: INavigationController
  ): JSX.Element;

  /**
   * Optional override for rendering the footer
   */
  onRenderFooter?(
    props: INavigationControllerProps,
    viewProps: INavigationControllerViewProps,
    context: INavigationController
  ): JSX.Element;
}

export type INavigationControllerStyleProps = Required<Pick<INavigationControllerProps, 'theme'>>;

export interface INavigationControllerStyles {
  /**
   * Styles for the root element.
   */
  readonly root?: IStyle;
  readonly headerContainer?: IStyle;
  readonly headerText?: IStyle;
  readonly headerBackButton?: IStyle;
  readonly footerContainer?: IStyle;
  readonly bodyContainer?: IStyle;
}
