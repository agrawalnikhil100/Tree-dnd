/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { mount, ReactWrapper } from 'enzyme';
import { DefaultButton, IconButton } from '@fluentui/react/lib/Button';
import * as React from 'react';

import { INavigationController, INavigationControllerProps, NavigationControllerView } from '.';
import { INavigationControllerState, NavigationControllerBase } from './NavigationController.base';
import { INavigationControllerViewProps } from './NavigationControllerView.types';

type NavigationControllerWrapper = ReactWrapper<INavigationControllerProps, INavigationControllerState>;

function getState(wrapper: NavigationControllerWrapper): INavigationControllerState {
  return wrapper.childAt(0).state();
}

const testStepKeys = {
  step1: 'step1',
  step2: 'step2',
  step3: 'step3'
};

const viewContentClassName = 'view-content';

const testSteps: (
  context: INavigationController
) => Array<React.ReactElement<INavigationControllerViewProps>> = NavigationControllerContext => [
  <NavigationControllerView
    key={testStepKeys.step1}
    viewKey={testStepKeys.step1}
    headerText="Step 1"
    footerButtons={[
      {
        primary: true,
        onClick: () => NavigationControllerContext.goTo(testStepKeys.step2),
        text: 'Next'
      }
    ]}
  >
    <div className={viewContentClassName}>First Step</div>
  </NavigationControllerView>,
  <NavigationControllerView
    key={testStepKeys.step2}
    viewKey={testStepKeys.step2}
    headerText="Step 2"
    footerButtons={[
      {
        primary: false,
        onClick: () => NavigationControllerContext.back(),
        text: 'Previous'
      },
      {
        primary: true,
        onClick: () => NavigationControllerContext.goTo(testStepKeys.step3),
        text: 'Next'
      }
    ]}
  >
    <div className={viewContentClassName}>Second Step</div>
  </NavigationControllerView>,
  <NavigationControllerView key={testStepKeys.step3} viewKey={testStepKeys.step3} headerText="Step 3">
    <div className={viewContentClassName}>Third Step</div>
  </NavigationControllerView>
];

describe('NavigationController', () => {
  let wrapper: NavigationControllerWrapper;
  afterEach(() => wrapper && wrapper.unmount());

  it('renders the initial view and sets the state correctly', () => {
    const props = {
      initialActiveViewKey: testStepKeys.step1,
      showBackButton: true
    };
    wrapper = mount(<NavigationControllerBase {...props}>{testSteps}</NavigationControllerBase>);
    const views = wrapper.find(`.${viewContentClassName}`);
    expect(views.length).toBe(1);
    expect(views.text()).toBe('First Step');
    const state = getState(wrapper);
    expect(state.activeViewIndex).toBe(0);
    expect(state.history).toEqual([testStepKeys.step1]);
  });
  it('is renders the right view based on state', async () => {
    const props = {
      initialActiveViewKey: testStepKeys.step1,
      showBackButton: true
    };
    wrapper = mount(<NavigationControllerBase {...props}>{testSteps}</NavigationControllerBase>);

    let views = wrapper.find(`.${viewContentClassName}`);
    expect(views.length).toBe(1);
    expect(views.text()).toBe('First Step');

    await wrapper.childAt(0).setState({
      activeViewIndex: 1,
      history: [testStepKeys.step1, testStepKeys.step2]
    });
    views = wrapper.find(`.${viewContentClassName}`);
    expect(views.length).toBe(1);
    expect(views.text()).toBe('Second Step');
  });
  it('is renders the header back button if possible to go back', async () => {
    const props = {
      initialActiveViewKey: testStepKeys.step1,
      showBackButton: true
    };
    wrapper = mount(<NavigationControllerBase {...props}>{testSteps}</NavigationControllerBase>);

    let buttons = wrapper.find(IconButton).map(node => {
      return node;
    });
    expect(buttons.length).toBe(0);

    await wrapper.childAt(0).setState({
      activeViewIndex: 1,
      history: [testStepKeys.step1, testStepKeys.step2]
    });

    buttons = wrapper.find(IconButton).map(node => {
      return node;
    });
    expect(buttons.length).toBe(1);
    expect(buttons[0].props().iconProps.iconName).toEqual('Back');
  });
  it('is renders the footer buttons', () => {
    const props = {
      initialActiveViewKey: testStepKeys.step2,
      showBackButton: true
    };
    wrapper = mount(<NavigationControllerBase {...props}>{testSteps}</NavigationControllerBase>);

    const buttons = wrapper.find(DefaultButton).map(node => {
      return node.text();
    });
    expect(buttons.length).toBe(2);

    expect(buttons).toEqual(['Previous', 'Next']);
  });
});
