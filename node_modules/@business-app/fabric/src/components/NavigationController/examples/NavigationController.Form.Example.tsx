/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { Label } from '@fluentui/react/lib/Label';
import { IStyle, mergeStyles } from '@fluentui/react/lib/Styling';
import { TextField } from '@fluentui/react/lib/TextField';
import * as React from 'react';
import { INavigationController, NavigationController } from '..';
import { NavigationControllerView } from '../NavigationControllerView';

export interface INavigationControllerFormExampleState {
  name: string;
  age: number;
  favoriteEmoji: string;
}

const stepsKeys = {
  basic: 'basic',
  moreInfo: 'moreInfo',
  summary: 'summary'
};

export class NavigationControllerFormExample extends React.Component<
  {},
  INavigationControllerFormExampleState
> {
  private NavigationControllerRef: React.RefObject<INavigationController>;

  constructor(props: {}) {
    super(props);
    this.NavigationControllerRef = React.createRef<INavigationController>();
    this.state = {
      name: '',
      age: NaN,
      favoriteEmoji: ''
    };
  }

  public render() {
    const containerStyles: IStyle = {
      border: '1px solid black',
      height: '500px',
      width: '300px',
      backgroundColor: '#FFF',
      fontSize: '16px',
      lineHeight: '20px'
    };

    return (
      <>
        <div className={mergeStyles(containerStyles)}>
          <NavigationController
            initialActiveViewKey={stepsKeys.basic}
            componentRef={this.NavigationControllerRef}
            showBackButton={true}
            backButtonAriaLabel={'Back'}
          >
            {context => [
              <NavigationControllerView
                viewKey={stepsKeys.basic}
                key={stepsKeys.basic}
                headerText="Basic Details"
                footerButtons={[
                  {
                    primary: true,
                    onClick: () => context.goTo(stepsKeys.moreInfo),
                    text: 'Next',
                    disabled: !!(
                      this.getNameErrorMessage(this.state.name) || this.getAgeErrorMessage(this.state.age)
                    )
                  }
                ]}
              >
                <TextField
                  key="name"
                  value={this.state.name}
                  onChange={(event, value) => this.setState({ name: value })}
                  onGetErrorMessage={this.getNameErrorMessage}
                  label="Name"
                />

                <TextField
                  key="age"
                  value={this.state.age ? this.state.age.toString() : ''}
                  onChange={(event, value) => this.setState({ age: Number(value) })}
                  onGetErrorMessage={value => this.getAgeErrorMessage(value === '' ? NaN : Number(value))}
                  label="Age"
                />
              </NavigationControllerView>,
              <NavigationControllerView
                key={stepsKeys.moreInfo}
                viewKey={stepsKeys.moreInfo}
                headerText="Favorite Emoji"
                footerButtons={[
                  {
                    primary: true,
                    onClick: () => context.goTo(stepsKeys.summary),
                    text: 'Done',
                    disabled: !this.state.favoriteEmoji
                  }
                ]}
              >
                {this.renderEmojiPicker(this.state.favoriteEmoji, value =>
                  this.setState({ favoriteEmoji: value })
                )}
              </NavigationControllerView>,
              <NavigationControllerView
                key={stepsKeys.summary}
                viewKey={stepsKeys.summary}
                headerText="Submit"
                footerButtons={[
                  {
                    primary: true,
                    onClick: () => alert('NavigationController is complete.'),
                    text: 'Done'
                  },
                  {
                    primary: false,
                    onClick: () => {
                      if (this.NavigationControllerRef.current) {
                        this.NavigationControllerRef.current.reset(stepsKeys.basic);
                        this.setState({
                          name: '',
                          age: NaN,
                          favoriteEmoji: ''
                        });
                      }
                    },
                    text: 'Start again'
                  }
                ]}
              >
                <Label>Review your selections here:</Label>

                <div>
                  <Label>
                    <b>Name: </b>
                    {this.state.name}
                  </Label>
                  <Label>
                    <b>Age: </b>
                    {this.state.age}
                  </Label>
                  <Label>
                    <b>Favorite Emoji: </b>
                    {this.state.favoriteEmoji}
                  </Label>
                </div>
              </NavigationControllerView>
            ]}
          </NavigationController>
        </div>
      </>
    );
  }

  private renderEmojiCell = (
    value: string,
    isSelected: boolean,
    onSelect: (value: string) => void
  ): JSX.Element => {
    const emojiCellStyle: IStyle = {
      width: '30px',
      textAlign: 'center',
      padding: '5px',
      margin: '5px',
      cursor: 'pointer',
      backgroundColor: isSelected ? 'grey' : 'white',
      selectors: {
        ':hover': {
          backgroundColor: 'lightgrey'
        }
      }
    };
    return (
      <div onClick={() => onSelect(value)} className={mergeStyles(emojiCellStyle)}>
        {value}
      </div>
    );
  };

  private renderEmojiPicker = (value: string, onChange: (value: string) => void): JSX.Element => {
    const emojis = `😀 😁 😂 🤣 😃 😄 😅 😆 😉 😊 😋 😎 😍 😘 😗 😙 😚 ☺️ 🙂 🤗 🤩 🤔 🤨 😐 😑 😶 🙄 😏 😣 😥 😮 🤐 😯 😪 😫 😴 😌 😛 😜 😝 🤤 😒 😓 😔 😕 🙃 🤑 😲 ☹️ 🙁 😖 😞 😟 😤 😢 😭 😦 😧 😨 😩 🤯 😬 😰 😱 🥵 🥶 😳 🤪 😵 😡 😠 🤬 😷 🤒 🤕 🤢 🤮 🤧 😇 🤠 🤡 🤥 🤫 🤭 🧐 🤓 😈 👿 👹 👺 💀 👻 👽 🤖 💩 😺 😸 😹 😻 😼 😽 🙀 😿 😾`.split(
      ' '
    );

    return (
      <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-around' }}>
        {emojis.map(emoji => {
          return this.renderEmojiCell(emoji, emoji === value, onChange);
        })}
      </div>
    );
  };

  private getNameErrorMessage = (value: string): string => {
    return value.length > 3
      ? ''
      : `Input value length must be more than 3. Actual length is ${value.length}.`;
  };

  private getAgeErrorMessage = (value: number): string => {
    return value < 21 ? '' : `Age must be less than 21.`;
  };
}
