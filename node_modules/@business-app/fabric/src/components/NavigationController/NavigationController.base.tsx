/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { DefaultButton, IconButton, PrimaryButton } from '@fluentui/react/lib/Button';
import { IProcessedStyleSet } from '@fluentui/react/lib/Styling';
import { FontWeights } from '@fluentui/react/lib/Styling';
import { BaseComponent, classNamesFunction, customizable, find } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import {
  INavigationController,
  INavigationControllerProps,
  INavigationControllerStyleProps,
  INavigationControllerStyles
} from './NavigationController.types';
import { NavigationControllerView } from './NavigationControllerView';
import { INavigationControllerViewProps } from './NavigationControllerView.types';

const getClassNames = classNamesFunction<INavigationControllerStyleProps, INavigationControllerStyles>();

export interface INavigationControllerState {
  history: string[];
  activeViewIndex: number;
}

@customizable('NavigationController', ['theme', 'styles'])
export class NavigationControllerBase
  extends BaseComponent<INavigationControllerProps, INavigationControllerState>
  implements INavigationController {
  private _classNames: IProcessedStyleSet<INavigationControllerStyles>;

  constructor(props: INavigationControllerProps) {
    super(props);
    this.state = {
      history: [props.initialActiveViewKey],
      activeViewIndex: 0
    };
  }

  public goTo = (view: string): void => {
    // throw away history beyond current active view
    const history = this.state.history.slice(0, this.state.activeViewIndex + 1);
    // push the new view
    history.push(view);
    // make it the active view
    const activeViewIndex = history.length - 1;
    this.setState({
      history,
      activeViewIndex
    });
  };

  public getActiveViewKey = (): string => {
    return this.state.history[this.state.activeViewIndex];
  };

  public getHistory = (): string[] => {
    return this.state.history;
  };

  public back = (): string => {
    if (this.canGoBack()) {
      const activeViewIndex = this.state.activeViewIndex - 1;
      this.setState({
        activeViewIndex
      });
      return this.state.history[activeViewIndex];
    }
    return '';
  };

  public forward = (): string => {
    if (this.canGoBack()) {
      const activeViewIndex = this.state.activeViewIndex + 1;
      this.setState({
        activeViewIndex
      });
      return this.state.history[activeViewIndex];
    }
    return '';
  };

  public canGoBack = (): boolean => {
    return !!(this.state.history.length && this.state.activeViewIndex && this.state.activeViewIndex > 0);
  };

  public canGoForward = (): boolean => {
    if (
      this.state.history.length &&
      this.state.activeViewIndex &&
      this.state.activeViewIndex < this.state.history.length - 1
    ) {
      return true;
    }
    return false;
  };

  public reset = (activeViewKey: string) => {
    this.setState({
      history: [activeViewKey],
      activeViewIndex: 0
    });
  };

  public render() {
    this._classNames = this._getClassNames(this.props);
    const currentViewProps = this._getViewProps(this.state.history[this.state.activeViewIndex]);
    if (currentViewProps) {
      return (
        <div className={this._classNames.root}>
          {this._renderHeader(currentViewProps)}
          {this._renderView(currentViewProps)}
          {this._renderFooter(currentViewProps)}
        </div>
      );
    } else {
      throw new Error('Invalid view key');
    }
  }

  private _renderHeader(viewProps: INavigationControllerViewProps): JSX.Element {
    let headerElement: JSX.Element;
    if (this.props.onRenderHeader) {
      headerElement = this.props.onRenderHeader(this.props, viewProps, this);
    } else {
      headerElement = (
        <>
          {this.props.showBackButton && this.canGoBack() ? (
            <span className={this._classNames.headerBackButton}>
              <IconButton
                ariaLabel={this.props.backButtonAriaLabel}
                iconProps={{
                  iconName: 'Back',
                  styles: {
                    root: {
                      fontWeight: FontWeights.semibold
                    }
                  }
                }}
                onClick={this.back}
              />
            </span>
          ) : (
            <></>
          )}
          <h2 className={this._classNames.headerText} title={viewProps.headerText}>
            {viewProps.headerText}
          </h2>
        </>
      );
    }

    return <div className={this._classNames.headerContainer}>{headerElement}</div>;
  }

  private _renderFooter(viewProps: INavigationControllerViewProps): JSX.Element {
    if (this.props.onRenderFooter) {
      return (
        <div className={this._classNames.footerContainer}>
          {this.props.onRenderFooter(this.props, viewProps, this)}
        </div>
      );
    }
    if (viewProps.footerButtons) {
      const footerButtons = viewProps.footerButtons.map((props, i) => {
        const buttonProps = {
          key: i,
          ...props,
          styles: {
            root: {
              height: '32px',
              minWidth: '84px',
              marginRight: '8px',
              borderRadius: '2px'
            },
            ...props.styles
          }
        };
        return props.primary ? <PrimaryButton {...buttonProps} /> : <DefaultButton {...buttonProps} />;
      });
      return <div className={this._classNames.footerContainer}>{footerButtons}</div>;
    }
    return <></>;
  }

  private _renderView(viewProps: INavigationControllerViewProps): JSX.Element {
    return (
      <div className={this._classNames.bodyContainer}>
        <NavigationControllerView {...viewProps} />
      </div>
    );
  }

  private _getViewProps(viewKey: string): INavigationControllerViewProps | null {
    const view = find(
      this.props.children(this),
      child => isNavigationControllerView(child) && child.props.viewKey === viewKey
    );

    if (view) {
      return view.props;
    } else {
      return null;
    }
  }

  private _getClassNames(props: INavigationControllerProps): IProcessedStyleSet<INavigationControllerStyles> {
    const { theme } = props;

    return getClassNames(props.styles!, {
      theme: theme!
    });
  }
}

const NavigationControllerViewType = React.createElement(NavigationControllerView).type;
/**
 * Determines if the provided item is a NavigationControllerView
 */
function isNavigationControllerView(
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  item: React.ReactElement<any>
): item is React.ReactElement<INavigationControllerViewProps> {
  return !!item && typeof item === 'object' && item.type === NavigationControllerViewType;
}
