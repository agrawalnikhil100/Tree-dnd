/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IComboBoxOption } from '@fluentui/react/lib/ComboBox';
import { Label } from '@fluentui/react/lib/Label';
import { SelectableOptionMenuItemType } from '@fluentui/react/lib/SelectableOption';
import { Stack } from '@fluentui/react/lib/Stack';
import * as React from 'react';
import { FilterableComboBox } from '../FilterableComboBox';

const colors: IComboBoxOption[] = ['Red', 'Green', 'Blue', 'Orange'].map<IComboBoxOption>(name => ({
  key: name.toLowerCase(),
  text: name.indexOf('_') === 0 ? name.substr(1) : name,
  itemType:
    name.indexOf('_') === 0
      ? SelectableOptionMenuItemType.Header
      : name.indexOf('&') === 0
      ? SelectableOptionMenuItemType.Divider
      : SelectableOptionMenuItemType.Normal
}));

const foods: IComboBoxOption[] = [
  'Tacos',
  'Salad',
  'Spaghetti',
  'Ice cream',
  'Pizza',
  'Soup'
].map<IComboBoxOption>(name => ({
  key: name.toLowerCase(),
  text: name.indexOf('_') === 0 ? name.substr(1) : name,
  itemType:
    name.indexOf('_') === 0
      ? SelectableOptionMenuItemType.Header
      : name.indexOf('&') === 0
      ? SelectableOptionMenuItemType.Divider
      : SelectableOptionMenuItemType.Normal
}));

const category: IComboBoxOption[] = ['Foods', 'Colors'].map<IComboBoxOption>(name => ({
  key: name.toLowerCase(),
  text: name.indexOf('_') === 0 ? name.substr(1) : name,
  itemType:
    name.indexOf('_') === 0
      ? SelectableOptionMenuItemType.Header
      : name.indexOf('&') === 0
      ? SelectableOptionMenuItemType.Divider
      : SelectableOptionMenuItemType.Normal
}));

export class FilterableComboBoxDependentExample extends React.Component<
  {},
  { secondOptions: IComboBoxOption[] }
> {
  public state = {
    secondOptions: []
  };

  public render(): JSX.Element {
    return (
      <Stack maxWidth={400} gap={16}>
        <FilterableComboBox
          label={'Choose a category from the options'}
          options={category}
          noResultsMessage={query => (
            <Label
              styles={{ root: { padding: '8px 16px' } }}
            >{`No results found matching "${query}".`}</Label>
          )}
          calloutProps={{ calloutMaxHeight: 400 }}
          useComboBoxAsMenuWidth={true}
          onChange={(evt, option) =>
            option &&
            this.setState({
              secondOptions: option.key === 'foods' ? foods : colors
            })
          }
        />
        <FilterableComboBox
          label={'Choose an option based on the above category'}
          options={this.state.secondOptions}
          noResultsMessage={query => (
            <Label
              styles={{ root: { padding: '8px 16px' } }}
            >{`No results found matching "${query}".`}</Label>
          )}
          calloutProps={{ calloutMaxHeight: 400 }}
          useComboBoxAsMenuWidth={true}
          disabled={this.state.secondOptions.length < 1}
        />
      </Stack>
    );
  }
}
