/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as Enzyme from 'enzyme';
import 'jest';
import { Overlay } from '@fluentui/react/lib/Overlay';
import { Spinner, SpinnerSize } from '@fluentui/react/lib/Spinner';
import * as React from 'react';

import { IPageProps } from '.';
import { PageBase } from './Page.base';
import { getStyles } from './Page.styles';

describe('Page Header with Env', () => {
  const props: IPageProps = {
    styles: getStyles
  };

  it('should render the component without any subitems', () => {
    const wrapper = Enzyme.mount(<PageBase {...props} />);
    expect(wrapper).toMatchSnapshot();
  });

  it('should render the component with the wrapper class', () => {
    const testProps = {
      ...props,
      className: 'test-class'
    };

    const wrapper = Enzyme.shallow(<PageBase {...testProps} />);
    expect(wrapper.find('.test-class').type()).toBe('section');
  });

  it('should optionally render a header', () => {
    const testProps = {
      ...props,
      renderHeader: () => <div className="test-class" />
    };

    const withHeader = Enzyme.shallow(<PageBase {...testProps} />);
    expect(withHeader.find('.test-class').exists()).toBe(true);

    const withoutHeader = Enzyme.shallow(<PageBase {...props} />);
    expect(withoutHeader.find('header').exists()).toBe(false);
  });

  it('should optionally render a footer', () => {
    const testProps = {
      ...props,
      renderFooter: () => <div className="test-class" />
    };

    const withFooter = Enzyme.shallow(<PageBase {...testProps} />);
    expect(withFooter.find('footer').exists()).toBe(true);
    expect(withFooter.find('footer').find('.test-class').exists()).toBe(true);

    const withoutFooter = Enzyme.shallow(<PageBase {...props} />);
    expect(withoutFooter.find('footer').exists()).toBe(false);
  });

  it('should optionally render a loading overlay', () => {
    const testProps = {
      ...props,
      showOverlay: true,
      spinnerProps: { size: SpinnerSize.large }
    };

    const withFooter = Enzyme.shallow(<PageBase {...testProps} />);
    expect(withFooter.find(Overlay).find(Spinner).length).toBe(1);
  });

  it('should optionally render body contents', () => {
    const testProps = {
      ...props,
      renderBody: () => <div>Test</div>
    };

    const withBody = Enzyme.mount(<PageBase {...testProps} />);
    expect(withBody).toMatchSnapshot();
  });
});
