/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

/* eslint-disable @typescript-eslint/no-explicit-any */

import * as React from 'react';
import * as ReactTestUtils from 'react-dom/test-utils';

import * as Enzyme from 'enzyme';
import { ITag } from '@fluentui/react/lib/Pickers';
import { Form } from '../../Form';
import { FormTagPicker } from './FormTagPicker';

describe('FormTagPicker Unit Tests', () => {
  describe('Renders for all combinations of props', () => {
    let wrapper: Enzyme.ReactWrapper;

    it('Null name throws error', () => {
      const consoleMock = jest.spyOn(console, 'error');
      consoleMock.mockImplementation(() => undefined);

      const errorFunction = () => {
        ReactTestUtils.renderIntoDocument(
          <Form onSubmit={undefined}>
            <FormTagPicker
              inputKey={null as any}
              value={undefined}
              tagPickerProps={{ onResolveSuggestions: () => [] }}
            />
          </Form>
        );
      };

      expect(errorFunction).toThrow();
      expect(consoleMock).toHaveBeenCalledTimes(2);
      expect((consoleMock as jest.Mock).mock.calls[0][0]).toMatch(
        'Uncaught [Error: FormBaseInput: name must be defined on all form inputs]'
      );

      consoleMock.mockRestore();
    });

    it('Null props still render', () => {
      wrapper = Enzyme.mount(
        <Form onSubmit={undefined}>
          <FormTagPicker
            inputKey="tag"
            value={undefined}
            tagPickerProps={{ onResolveSuggestions: () => [] }}
          />
        </Form>
      );

      expect(wrapper.find('.ms-BasePicker')).toBeTruthy();
    });

    it('With initial value', () => {
      let result: any;

      const option1: ITag = { key: '1', name: 'Tag 1' };
      const option2: ITag = { key: '2', name: 'Tag 2' };

      wrapper = Enzyme.mount(
        <Form
          onSubmit={(value: any) => {
            result = value;
          }}
        >
          <FormTagPicker
            inputKey="tag"
            tagPickerProps={{ onResolveSuggestions: () => [option1, option2] }}
            value={[option2]}
          />
        </Form>
      );

      expect(wrapper.find('.ms-BasePicker')).toBeTruthy();

      const form = wrapper.find('form');
      form.simulate('submit');

      expect(result.tag).toEqual([option2]);
    });
  });

  describe('TagPicker update tests', () => {
    jest.useFakeTimers();
    beforeEach(() => {
      jest.useFakeTimers();
    });

    afterEach(() => {
      jest.clearAllTimers();
    });

    class ExtendsTagPicker extends FormTagPicker {
      public setValue(value: ITag[]): void {
        super.setValue(value);
      }
    }

    // Disabled because of intermittent issues with timer logic.
    it.skip('TagPicker is leading and trailing debounced', done => {
      const option1: ITag = { key: '1', name: 'Tag 1' };
      const option2: ITag = { key: '2', name: 'Tag 2' };

      const updateStub = jest.fn();
      const formRef = React.createRef<Form>();
      ReactTestUtils.renderIntoDocument(
        <Form ref={formRef} onUpdated={updateStub}>
          <ExtendsTagPicker
            inputKey="tag"
            value={[option1]}
            tagPickerProps={{ onResolveSuggestions: () => [option1, option2] }}
          />
        </Form>
      );

      const datePicker: ExtendsTagPicker = ReactTestUtils.findRenderedComponentWithType(
        formRef.current,
        ExtendsTagPicker
      );
      datePicker.setValue([option2]);
      expect(updateStub).toHaveBeenCalledTimes(1);
      datePicker.setValue([option1, option2]);
      expect(updateStub).toHaveBeenCalledTimes(1);
      jest.runAllTimers();
      expect(updateStub).toHaveBeenCalledTimes(2);
      done();
    });
  });
});
