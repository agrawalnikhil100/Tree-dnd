/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as React from 'react';
import * as ReactTestUtils from 'react-dom/test-utils';

import * as Enzyme from 'enzyme';
import { Form } from '../../Form';
import { IFormResult } from '../../Form.types';
import { FormCheckBox } from './FormCheckBox';

describe('FormCheckBox Unit Tests', () => {
  let wrapper: Enzyme.ReactWrapper;
  beforeEach(() => {
    jest.useFakeTimers();
  });

  afterEach(() => {
    jest.clearAllTimers();
  });

  describe('Renders for all combinations of props', () => {
    it('Null name throws error', () => {
      const consoleMock = jest.spyOn(console, 'error');
      consoleMock.mockImplementation(() => undefined);

      const errorFunction = () => {
        ReactTestUtils.renderIntoDocument(
          <Form onSubmit={undefined}>
            <FormCheckBox inputKey={null} value={undefined} />
          </Form>
        );
      };

      expect(errorFunction).toThrow();
      expect(consoleMock).toHaveBeenCalledTimes(2);
      expect((consoleMock as jest.Mock).mock.calls[0][0]).toMatch(
        'Uncaught [Error: FormBaseInput: name must be defined on all form inputs]'
      );

      consoleMock.mockRestore();
    });

    it('Null props still render', () => {
      wrapper = Enzyme.mount(
        <Form onSubmit={undefined}>
          <FormCheckBox inputKey="name" value={undefined} validators={undefined} />
        </Form>
      );

      expect(wrapper.find('ms-Checkbox')).toBeTruthy();
    });

    it('With initial value', () => {
      let result: IFormResult;
      wrapper = Enzyme.mount(
        <Form
          onSubmit={(value: IFormResult) => {
            result = value;
          }}
        >
          <FormCheckBox inputKey="name" value={true} />
        </Form>
      );

      expect(wrapper.find('ms-Checkbox')).toBeTruthy();
      wrapper.simulate('submit');

      expect(result.name).toBeTruthy();
    });
  });

  describe('Checkbox update tests', () => {
    class ExtendsCheckbox extends FormCheckBox {
      public setValue(value: boolean): void {
        super.setValue(value);
      }
    }

    // Disabled because of intermittent issues with timer logic.
    it.skip('Checkbox is leading and trailing debounced', done => {
      const updateStub = jest.fn();
      const formRef = React.createRef<Form>();
      ReactTestUtils.renderIntoDocument(
        <Form ref={formRef} onUpdated={updateStub}>
          <ExtendsCheckbox inputKey="name" value={true} />
        </Form>
      );

      const checkBox = ReactTestUtils.findRenderedComponentWithType(formRef.current, ExtendsCheckbox);
      checkBox.setValue(true);
      expect(updateStub).toHaveBeenCalledTimes(1);
      checkBox.setValue(false);
      expect(updateStub).toHaveBeenCalledTimes(1);
      jest.runAllTimers();
      expect(updateStub).toHaveBeenCalledTimes(2);
      done();
    });
  });
});
