/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { DatePicker, IDatePickerProps } from '@fluentui/react/lib/DatePicker';
import { Icon } from '@fluentui/react/lib/Icon';
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';

import { IFormContext } from '../../Form';
import { FormBaseInput, IFormBaseInputState } from '../../FormBaseInput';
import {
  IFormDatePickerProps,
  IFormDatePickerStyleProps,
  IFormDatePickerStyles
} from './FormDatePicker.types';

const getClassNames = classNamesFunction<IFormDatePickerStyleProps, IFormDatePickerStyles>();

/**
 * DatePicker input for Form
 */
export class FormDatePickerBase extends FormBaseInput<Date, IFormDatePickerProps, IFormBaseInputState<Date>> {
  constructor(props: IFormDatePickerProps, context: IFormContext) {
    super(props, context);

    this.state = {
      isValid: true,
      currentValue: this.props.value,
      currentError: undefined
    };

    this._validateDatePickerProps(this.props.datePickerProps);
  }

  /**
   * Render a Fabric DatePicker
   */
  public render(): JSX.Element {
    const { datePickerProps, inputKey, styles } = this.props;
    const { currentError, currentValue } = this.state;

    const classNames = getClassNames(styles, this.props);

    return (
      <div className={classNames.root}>
        <DatePicker
          {...datePickerProps}
          // These props cannot be overridden
          key={inputKey}
          value={currentValue}
          onSelectDate={this._onDateChanged}
        />
        {currentError && this._renderError(classNames.inputError)}
      </div>
    );
  }

  private _renderError(className: string): JSX.Element {
    return (
      <div className={className} role={'alert'}>
        <Icon iconName="Error" />
        {this.state.currentError}
      </div>
    );
  }

  private _onDateChanged = (date: Date): void => {
    const { datePickerProps } = this.props;

    datePickerProps?.onSelectDate?.(date);

    this.setValue(date);
  };

  private _validateDatePickerProps(props?: IDatePickerProps): void {
    if (props) {
      if (props.onSelectDate) {
        // eslint-disable-next-line no-console
        console.warn(`FormDatePicker: 'onSelectDate' prop was specified and will be ignored`);
      }

      if (props.strings) {
        // eslint-disable-next-line no-console
        console.warn(`FormDatePicker: 'strings' prop was specified and will be ignored`);
      }
    }
  }
}
