/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as PropTypes from 'prop-types';
import * as React from 'react';

// Components
import { PrimaryButton } from '@fluentui/react/lib/Button';
import { BaseComponent } from '@fluentui/react/lib/Utilities';
import { IFormContext } from '../../Form';
import { IFormConditionalSubmitButtonProps } from './FormConditionalSubmitButton.types';

/**
 * Submit button for the form which is disabled when the form is invalid
 */
export class FormConditionalSubmitButton extends BaseComponent<IFormConditionalSubmitButtonProps> {
  protected static contextTypes: React.ValidationMap<IFormContext> = {
    isFormValid: PropTypes.func.isRequired,
    mountInput: PropTypes.func.isRequired,
    unmountInput: PropTypes.func.isRequired,
    submitValue: PropTypes.func.isRequired
  };

  /**
   * Form context passed by the parent form
   */
  private formContext: IFormContext;

  constructor(props: IFormConditionalSubmitButtonProps, formContext: IFormContext) {
    super(props, formContext);
    this.formContext = formContext;
  }

  /**
   * Render a Fabric Button
   */
  public render(): JSX.Element {
    const { disabled, ...buttonProps } = this.props.buttonProps || {};

    return (
      <PrimaryButton {...buttonProps} type="submit" disabled={disabled || !this.formContext.isFormValid()}>
        {this.props.children}
      </PrimaryButton>
    );
  }
}
