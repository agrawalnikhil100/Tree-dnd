/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

/* eslint-disable @typescript-eslint/no-explicit-any */
import * as React from 'react';
import * as ReactDom from 'react-dom';
import * as ReactTestUtils from 'react-dom/test-utils';

// Controls
import * as Enzyme from 'enzyme';
import { TextFieldBase } from '@fluentui/react/lib/TextField';
import { Form } from '../../Form';
import { IFormProps, IFormResult } from '../../Form.types';
import { FormTextInput } from './FormTextInput';
import { IFormTextInputProps } from './FormTextInput.types';

// Utilities
import * as Validators from '../../validators/Validators';
import { FormBaseInput } from '../../FormBaseInput';

describe('FormTextInput Unit Tests', () => {
  describe('Renders for all combinations of props', () => {
    let formProps: IFormProps;
    let formTextInputProps: IFormTextInputProps;

    beforeEach(() => {
      formProps = {
        onSubmit: undefined
      };
      formTextInputProps = {
        inputKey: null as any,
        value: undefined
      };
    });

    it('Null name throws error', () => {
      const consoleMock = jest.spyOn(console, 'error');
      consoleMock.mockImplementation(() => undefined);

      const errorFunction = () => {
        Enzyme.mount(
          <Form {...formProps}>
            <FormTextInput {...formTextInputProps} />
          </Form>
        );
      };

      expect(errorFunction).toThrow();
      expect((consoleMock as jest.Mock).mock.calls[0][0]).toMatch(
        'Uncaught [Error: FormBaseInput: name must be defined on all form inputs]'
      );

      consoleMock.mockRestore();
    });

    it('Null props still render', () => {
      formTextInputProps.inputKey = 'name';
      const wrapper = Enzyme.mount(
        <Form {...formProps}>
          <FormTextInput {...formTextInputProps} />
        </Form>
      );

      expect(wrapper.find(TextFieldBase).length).toBe(1);
    });

    it('With initial value', () => {
      formTextInputProps.inputKey = 'name';
      formTextInputProps.value = 'Value';
      const wrapper = Enzyme.mount(
        <Form {...formProps}>
          <FormTextInput {...formTextInputProps} />
        </Form>
      );

      expect(wrapper.find(TextFieldBase).length).toBe(1);
    });
  });

  describe('Common validations', () => {
    xit('Validators run properly', () => {
      let result: IFormResult;

      const formRef = React.createRef<Form>();
      ReactTestUtils.renderIntoDocument(
        <Form
          ref={formRef}
          onSubmit={(value: IFormResult) => {
            result = value;
          }}
        >
          <FormTextInput inputKey="field" value="" validators={[Validators.required('Message')]} />
        </Form>
      );

      const form: HTMLFormElement = ReactTestUtils.findRenderedDOMComponentWithTag(
        formRef.current,
        'form'
      ) as HTMLFormElement;
      ReactTestUtils.Simulate.submit(form);

      // Find the TextField component
      // TODO: this test is not working as intended as even nonsense state names pass.
      //        commented out for now since test isn't executing when named 'xit'
      // const field = ReactTestUtils.findRenderedComponentWithType(renderedForm, TextField);
      // expect(field.state.errorMessage).toBeTruthy();
      expect(result).toBeFalsy();
    });
  });

  describe('Textbox update tests', () => {
    jest.useFakeTimers();
    class ExtendsTextInput extends FormTextInput {
      public setValue(value: string): void {
        super.setValue(value);
      }
    }

    // Disabled because of intermittent issues with timer logic.
    it.skip('TextInput is only trailing debounced', done => {
      const updateStub = jest.fn();
      const formRef = React.createRef<Form>();
      ReactTestUtils.renderIntoDocument(
        <Form ref={formRef} onUpdated={updateStub}>
          <ExtendsTextInput inputKey="name" value={''} />
        </Form>
      );

      const datePicker: ExtendsTextInput = ReactTestUtils.findRenderedComponentWithType(
        formRef.current,
        ExtendsTextInput
      );
      datePicker.setValue('0');
      expect(updateStub).not.toHaveBeenCalled();
      datePicker.setValue('1');
      expect(updateStub).not.toHaveBeenCalled();
      jest.runAllTimers();
      expect(updateStub).toHaveBeenCalled();
      done();
    });

    it('TextInput state updates from props value change', () => {
      const updatedValue = 'updated';
      const formRef = React.createRef<Form>();
      const parent = document.createElement('div');
      ReactDom.render(
        <Form ref={formRef}>
          <FormTextInput inputKey="name" key="key" value={'old value'} />
        </Form>,
        parent
      );
      const textboxElement: FormTextInput = ReactTestUtils.findRenderedComponentWithType(
        formRef.current,
        FormTextInput
      );
      const propsUpdateSpy = jest.spyOn(FormBaseInput, 'getDerivedStateFromProps');
      ReactDom.render(
        <Form>
          <FormTextInput inputKey="name" key="key" value={updatedValue} />
        </Form>,
        parent
      );

      expect(textboxElement.state.currentValue).toEqual(updatedValue);
      expect(propsUpdateSpy).toHaveBeenCalledTimes(1);
    });

    it(`TextInput state doesn't update with no new props value`, () => {
      const oldValue = 'old value';
      const formRef = React.createRef<Form>();
      const parent = document.createElement('div');
      ReactDom.render(
        <Form ref={formRef}>
          <FormTextInput inputKey="name" key="key" value={oldValue} />
        </Form>,
        parent
      );
      const textboxElement: FormTextInput = ReactTestUtils.findRenderedComponentWithType(
        formRef.current,
        FormTextInput
      );
      const setStateSpy = jest.spyOn(textboxElement, 'setState');
      ReactDom.render(
        <Form>
          <FormTextInput inputKey="name" key="key" value={oldValue} />
        </Form>,
        parent
      );

      expect(setStateSpy).toHaveBeenCalledTimes(0);
    });
  });
});
