/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import * as React from 'react';

// Components
import { Dropdown, IDropdownOption, IDropdownProps } from '@fluentui/react/lib/Dropdown';
import { findIndex } from '@fluentui/react/lib/Utilities';
import { IFormContext } from '../../Form';
import { FormBaseInput, IFormBaseInputState } from '../../FormBaseInput';
import { DropdownValue, IFormDropdownProps } from './FormDropdown.types';

/**
 * Dropdown input for Form
 */
export class FormDropdown extends FormBaseInput<
  DropdownValue,
  IFormDropdownProps,
  IFormBaseInputState<DropdownValue>
> {
  constructor(props: IFormDropdownProps, context: IFormContext) {
    super(props, context);

    const { dropdownProps } = props;

    const propsValue = this.props.value;

    let currentValue: DropdownValue | undefined;

    if (dropdownProps && dropdownProps.multiSelect) {
      // If multiSelect is set to true the currentValue should be an array.
      if (Array.isArray(propsValue)) {
        currentValue = propsValue;
      } else if (propsValue) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        currentValue = [propsValue] as any[];
      } else {
        currentValue = [];
      }
    } else {
      currentValue = propsValue;
    }

    this.state = {
      isValid: true,
      currentValue: currentValue,
      currentError: undefined
    };
    this._validateDropdownProps(this.props.dropdownProps);
  }

  /**
   * Render a Fabric Dropdown
   */
  public render(): JSX.Element {
    const { currentValue } = this.state;

    return (
      <Dropdown
        options={[]}
        calloutProps={{
          calloutMaxHeight: 360
        }}
        {...this.props.dropdownProps}
        // These props cannot be overridden
        key={this.props.inputKey}
        onChange={this._onChange}
        {...this.getDropdownSelectedValues(currentValue)}
      />
    );
  }

  // Returns the dropdown selectedKey or selectedKeys based on parameter currentValue
  private getDropdownSelectedValues(currentValue: DropdownValue): DropdownValue {
    let selectedVal = null;

    // Office Fabric UI Issue requiring use of SelectedKey and SelectedKeys:
    // https://github.com/microsoft/fluentui/issues/8883#issue-438551056
    if (currentValue && Array.isArray(currentValue)) {
      // If current value is an array it represents a Dropdown with multi-select scenario using 'selectedKeys'
      currentValue.length === 0
        ? (selectedVal = { selectedKeys: null })
        : (selectedVal = { selectedKeys: currentValue });
    } else {
      // If current value is not an array it represents a ISelectableDroppableTextProps with a single-select
      // scenario using 'selectedKey'
      selectedVal = { selectedKey: currentValue };
    }

    return selectedVal;
  }

  private _onChange = (event: React.FormEvent<HTMLDivElement>, option: IDropdownOption): void => {
    const { dropdownProps } = this.props;

    dropdownProps?.onChange?.(event, option);

    if (dropdownProps && dropdownProps.multiSelect) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const value = (this.state.currentValue as any[]) || [];
      const selected = !!option.selected;
      // order of state values and options are not guaranteed to be the same,
      // so find the index using the option key.
      const optionIndex = findIndex(value, v => v === option.key);
      if (selected) {
        value.push(option.key);
      } else if (optionIndex >= 0) {
        value.splice(optionIndex, 1);
      }

      this.setValue(value);
    } else {
      this.setValue(option.key);
    }
  };

  private _validateDropdownProps(props?: IDropdownProps): void {
    if (props) {
      if (props.selectedKey !== null && props.selectedKey !== undefined) {
        // eslint-disable-next-line no-console
        console.warn(`FormDropdown: 'selectedKey' prop was specified and will be ignored`);
      }

      if (props.onChange) {
        // eslint-disable-next-line no-console
        console.warn(`FormDropdown: 'onChanged' prop was specified and will be ignored`);
      }
    }
  }
}
