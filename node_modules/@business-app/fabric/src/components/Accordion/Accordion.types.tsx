/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IButtonProps, IButtonStyles } from '@fluentui/react/lib/Button';
import { IContextualMenuProps } from '@fluentui/react/lib/ContextualMenu';
import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import {
  IComponentAs,
  IRefObject,
  IRenderFunction,
  IStyleFunctionOrObject
} from '@fluentui/react/lib/Utilities';

export interface IAccordion {
  /**
   * Gets whether the accordion content is visible
   * @type {any}
   */
  getIsContentVisible: () => boolean;
  /**
   * Toggles the current open state of the accordion
   */
  toggleState: () => void;
}

export interface IAccordionProps extends Pick<IButtonProps, Exclude<keyof IButtonProps, 'componentRef'>> {
  /*
   * Renders the content for the accordion
   * @type { IRenderFunction<IContextualMenuProps> }
   */
  onRenderContent: IRenderFunction<IContextualMenuProps>;
  componentRef?: IRefObject<IAccordion>;
  /**
   * Button to use for the accordion header
   * @type { IComponentAs<IButtonProps> }
   */
  buttonAs?: IComponentAs<IButtonProps>;

  /**
   * Callback for when the accordion is opened
   * @type {any}
   */
  onOpen?: () => void;

  /**
   * Callback for when the accordion is opened
   * @type {any}
   */
  onClose?: () => void;

  /**
   * Indicates whether to render objects when accordion is closed
   * @type {boolean}
   */
  isHiddenOnDismiss?: boolean;

  /**
   * Theme provided by High-Order Component.
   */
  theme?: ITheme;

  /**
   * Call to provide customized styling that will layer on top of the variant rules
   */
  styles?: IButtonStyles & IStyleFunctionOrObject<Pick<IAccordionProps, 'theme'>, IAccordionStyles>;
}

export interface IAccordionState {
  // represents whether the accordion is currently expanded or closed.
  isContentVisible?: boolean;
}

export interface IAccordionStyleProps
  extends Pick<IAccordionState, 'isContentVisible'>,
    Pick<IAccordionProps, 'theme'> {
  containerClassName: string;
}

export interface IAccordionStyles extends IButtonStyles {
  container?: IStyle;
  header?: IStyle;
  content?: IStyle;
}
