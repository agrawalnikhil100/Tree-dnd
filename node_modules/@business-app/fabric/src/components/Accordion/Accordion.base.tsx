/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { DefaultButton } from '@fluentui/react/lib/Button';
import { concatStyleSets } from '@fluentui/react/lib/Styling';
import { BaseComponent, classNamesFunction, KeyCodes } from '@fluentui/react/lib/Utilities';
import * as React from 'react';
import { getDefaultHeaderStyles } from './Accordion.styles';
import {
  IAccordion,
  IAccordionProps,
  IAccordionState,
  IAccordionStyleProps,
  IAccordionStyles
} from './Accordion.types';

const getClassNames = classNamesFunction<IAccordionStyleProps, IAccordionStyles>();

export class AccordionBase extends BaseComponent<IAccordionProps, IAccordionState> implements IAccordion {
  public readonly state = {
    isContentVisible: this.props.checked
  };

  public getIsContentVisible(): boolean {
    return !!this.state.isContentVisible;
  }

  public componentDidUpdate(_prevProps: IAccordionProps, prevState: IAccordionState): void {
    if (this.state.isContentVisible && !prevState.isContentVisible && this.props.onOpen) {
      this.props.onOpen();
    } else if (!this.state.isContentVisible && prevState.isContentVisible && this.props.onClose) {
      this.props.onClose();
    }
  }

  public render(): JSX.Element {
    let {
      styles,
      onRenderMenu,
      menuIconProps,
      className,
      buttonAs,
      onClick,
      onRenderContent,
      componentRef,
      theme,
      ...other
    } = this.props;
    const { isContentVisible } = this.state;

    const AccordionButton = buttonAs || DefaultButton;

    if (!menuIconProps) {
      menuIconProps = { iconName: isContentVisible ? 'ChevronUp' : 'ChevronDown' };
    }

    onRenderContent = onRenderContent || onRenderMenu;

    const classNames = getClassNames(styles, {
      containerClassName: className,
      isContentVisible,
      theme
    });
    const { container, content, header, ...customStyles } = classNames;
    const headerStyles = concatStyleSets(getDefaultHeaderStyles(theme), customStyles);

    return (
      <div className={container}>
        <AccordionButton
          onKeyDown={this.closeAccordionOnEsc}
          onClick={this.toggleState}
          onMenuClick={this.toggleState}
          menuIconProps={menuIconProps}
          className={header}
          aria-expanded={isContentVisible}
          styles={headerStyles}
          theme={theme}
          {...other}
        />
        {(this.props.isHiddenOnDismiss || isContentVisible) && (
          <div style={isContentVisible ? {} : { display: 'none' }}>
            <div onKeyDown={this.closeAccordionOnEsc} className={content}>
              {onRenderContent && onRenderContent(this.props.menuProps)}
            </div>
          </div>
        )}
      </div>
    );
  }

  private closeAccordionOnEsc = (event: React.KeyboardEvent<HTMLElement>) => {
    if (event.keyCode === KeyCodes.escape && this.getIsContentVisible()) {
      this.toggleState();
    }
  };

  public toggleState = () => {
    this.setState((prevState: IAccordionState) => {
      return { isContentVisible: !prevState.isContentVisible };
    });
  };
}
