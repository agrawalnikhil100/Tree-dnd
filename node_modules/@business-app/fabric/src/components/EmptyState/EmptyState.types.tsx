/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { IButtonProps } from '@fluentui/react/lib/Button';
import { IIconProps } from '@fluentui/react/lib/Icon';
import { ILinkProps } from '@fluentui/react/lib/Link';
import { IStyle, ITheme } from '@fluentui/react/lib/Styling';
import { IRenderFunction, IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';

export interface IEmptyStateProps extends Readonly<React.HTMLAttributes<HTMLDivElement>> {
  /**
   * The name of the office fabric icon to put in a circle above the text, or
   * full icon props to pass along to the icon component.
   * @type {string}
   */
  readonly icon?: string | IIconProps;

  /**
   * The title-sized text below the icon, giving a summary of what's going on.
   * @type {string}
   */
  readonly primaryMessage?: string;

  /**
   * The regular sized text below the main text, giving more details, and
   * ideally a suggested action to resolve the situation. If multiple strings
   * are given, each will be a paragraph.
   * @type {string | string[]}
   */
  readonly secondaryMessage?: string | string[];

  /**
   * The label to be put on the "Learn more" link. This and learnMoreProps
   * must both be set to have a "Learn more" link.
   * @type {string}
   */
  readonly learnMoreLabel?: string;

  /**
   * The properties to pass to the "Learn more" link.
   * @type {ILinkProps}
   */
  readonly learnMoreProps?: ILinkProps;

  /**
   * To customize how the learnMore content is rendered
   * @type {IRenderFunction<ILinkProps>}
   */
  readonly onRenderLink?: IRenderFunction<ILinkProps>;

  /**
   * The label to be put on the call to action button. This and
   * callToActionProps must both be set to have a call to action button.
   * @type {string}
   */
  readonly callToActionText?: string;

  /**
   * The properties to pass to the call to action button.
   * @type {IButtonProps}
   */
  readonly callToActionProps?: IButtonProps;

  /**
   * The max width for the whole component. Component sets a default if not provided.
   */
  readonly maxWidth?: number;

  /**
   * Theme provided by High-Order Component.
   */
  theme?: ITheme;

  /**
   * Call to provide customized styling that will layer on top of the variant rules
   */
  styles?: IStyleFunctionOrObject<Pick<IEmptyStateProps, 'theme'>, IEmptyStateStyles>;
}

export interface IEmptyStateStyleProps extends Pick<IEmptyStateProps, 'theme' | 'className'> {
  buttonClassName?: string;
}

export interface IEmptyStateStyles {
  root: IStyle;
  primaryMessage: IStyle;
  secondaryMessage: IStyle;
  button: IStyle;
}
