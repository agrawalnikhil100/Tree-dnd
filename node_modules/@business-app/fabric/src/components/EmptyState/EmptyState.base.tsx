/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 */

import { PrimaryButton } from '@fluentui/react/lib/Button';
import { Icon } from '@fluentui/react/lib/Icon';
import { Link } from '@fluentui/react/lib/Link';
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
import * as React from 'react';

import { IEmptyStateProps, IEmptyStateStyleProps, IEmptyStateStyles } from './EmptyState.types';

const getClassNames = classNamesFunction<IEmptyStateStyleProps, IEmptyStateStyles>();

/**
 * Provides a message paired with an icon for list empty states or large error
 * messages.
 *
 * @export
 * @class EmptyState
 * @extends {React.Component<IEmptyStateProps>}
 */
export class EmptyStateBase extends React.Component<IEmptyStateProps> {
  public render(): JSX.Element {
    let {
      className,
      icon,
      primaryMessage,
      secondaryMessage = [],
      learnMoreLabel,
      learnMoreProps,
      callToActionText,
      callToActionProps,
      maxWidth = 300,
      onRenderLink,
      styles,
      theme,
      ...rest
    } = this.props;

    if (typeof secondaryMessage === 'string') {
      secondaryMessage = [secondaryMessage];
    }

    if (typeof icon === 'string') {
      icon = { iconName: icon };
    }

    const [firstSecondaryMessage, ...otherMessages] = secondaryMessage;

    const classNames = getClassNames(styles, {
      theme,
      className,
      buttonClassName: callToActionProps && callToActionProps.className
    });

    return (
      <div role="presentation" className={classNames.root} style={{ maxWidth }} {...rest}>
        {icon && <Icon {...icon} />}
        {primaryMessage && <p className={classNames.primaryMessage}>{primaryMessage}</p>}
        {firstSecondaryMessage && (
          <p className={classNames.secondaryMessage}>
            {firstSecondaryMessage}
            {onRenderLink && onRenderLink(learnMoreProps)}
            {!onRenderLink && learnMoreProps && learnMoreLabel && (
              <Link key={1} {...learnMoreProps} styles={{ root: { marginLeft: 5 } }}>
                {learnMoreLabel}
              </Link>
            )}
          </p>
        )}
        {otherMessages.map((text, i) => (
          <p key={i} className={classNames.secondaryMessage}>
            {text}
          </p>
        ))}
        {callToActionText && callToActionProps && (
          <PrimaryButton text={callToActionText} {...callToActionProps} className={classNames.button} />
        )}
      </div>
    );
  }
}
