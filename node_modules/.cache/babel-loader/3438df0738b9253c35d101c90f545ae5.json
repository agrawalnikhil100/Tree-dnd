{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\niagrawal\\\\Desktop\\\\microsoft work\\\\tree_dnd\\\\src\\\\Box.tsx\";\nimport { ItemTypes } from './ItemTypes';\nimport { DragSource } from 'react-dnd';\nimport * as React from 'react';\nconst style = {\n  border: '1px dashed black',\n  backgroundColor: 'white',\n  cursor: 'move',\n  display: 'flex',\n  alignItems: 'center',\n  marginLeft: 8,\n  marginRight: 8\n};\n\nconst Box = ({\n  name,\n  isDragging,\n  connectDragSource\n}) => {\n  const opacity = isDragging ? 0.4 : 1;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: connectDragSource,\n    style: { ...style,\n      opacity\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, name);\n};\n\n_c = Box;\nexport default DragSource(ItemTypes.BOX, {\n  beginDrag: props => {\n    return {\n      name: props.name\n    };\n  },\n\n  endDrag(props, monitor) {\n    const item = monitor.getItem();\n    const dropResult = monitor.getDropResult();\n\n    if (dropResult) {\n      alert(`You dropped ${item.name} into ${dropResult.name}!`);\n    }\n  }\n\n}, (connect, monitor) => {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n})(Box);\n\nvar _c;\n\n$RefreshReg$(_c, \"Box\");","map":{"version":3,"sources":["C:/Users/niagrawal/Desktop/microsoft work/tree_dnd/src/Box.tsx"],"names":["ItemTypes","DragSource","React","style","border","backgroundColor","cursor","display","alignItems","marginLeft","marginRight","Box","name","isDragging","connectDragSource","opacity","BOX","beginDrag","props","endDrag","monitor","item","getItem","dropResult","getDropResult","alert","connect","dragSource"],"mappings":";AAEA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,QAAgD,WAAhD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,MAAMC,KAA0B,GAAG;AACjCC,EAAAA,MAAM,EAAE,kBADyB;AAEjCC,EAAAA,eAAe,EAAE,OAFgB;AAGjCC,EAAAA,MAAM,EAAE,MAHyB;AAIjCC,EAAAA,OAAO,EAAE,MAJwB;AAKjCC,EAAAA,UAAU,EAAE,QALqB;AAMjCC,EAAAA,UAAU,EAAE,CANqB;AAOjCC,EAAAA,WAAW,EAAE;AAPoB,CAAnC;;AAiBA,MAAMC,GAAuB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,UAAR;AAAoBC,EAAAA;AAApB,CAAD,KAA6C;AAC3E,QAAMC,OAAO,GAAGF,UAAU,GAAG,GAAH,GAAS,CAAnC;AACA,sBACE;AACE,IAAA,GAAG,EAAEC,iBADP;AAEE,IAAA,KAAK,EAAE,EAAE,GAAGX,KAAL;AAAYY,MAAAA;AAAZ,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGH,IAJH,CADF;AAQD,CAVD;;KAAMD,G;AAYN,eAAeV,UAAU,CACvBD,SAAS,CAACgB,GADa,EAEvB;AACEC,EAAAA,SAAS,EAAGC,KAAD,IAAqB;AAC9B,WAAO;AAAEN,MAAAA,IAAI,EAAEM,KAAK,CAACN;AAAd,KAAP;AACD,GAHH;;AAIEO,EAAAA,OAAO,CAACD,KAAD,EAAkBE,OAAlB,EAA8C;AACnD,UAAMC,IAAI,GAAGD,OAAO,CAACE,OAAR,EAAb;AACA,UAAMC,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB;;AAEA,QAAID,UAAJ,EAAgB;AACdE,MAAAA,KAAK,CAAE,eAAcJ,IAAI,CAACT,IAAK,SAAQW,UAAU,CAACX,IAAK,GAAlD,CAAL;AACD;AACF;;AAXH,CAFuB,EAevB,CAACc,OAAD,EAA+BN,OAA/B,KAA8D;AAC5D,SAAO;AACLN,IAAAA,iBAAiB,EAAEY,OAAO,CAACC,UAAR,EADd;AAELd,IAAAA,UAAU,EAAEO,OAAO,CAACP,UAAR;AAFP,GAAP;AAID,CApBsB,CAAV,CAqBbF,GArBa,CAAf","sourcesContent":["import { CSSProperties, FC } from 'react'\r\nimport { DragSourceMonitor, ConnectDragSource } from 'react-dnd'\r\nimport { ItemTypes } from './ItemTypes'\r\nimport { DragSource, DragSourceConnector } from 'react-dnd'\r\nimport * as React from 'react';\r\n\r\nconst style: React.CSSProperties = {\r\n  border: '1px dashed black',\r\n  backgroundColor: 'white',\r\n  cursor: 'move',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  marginLeft: 8,\r\n  marginRight: 8\r\n}\r\n\r\nexport interface BoxProps {\r\n  name: string\r\n\r\n  // Collected Props\r\n  isDragging: boolean\r\n  connectDragSource: ConnectDragSource\r\n}\r\nconst Box: React.FC<BoxProps> = ({ name, isDragging, connectDragSource }) => {\r\n  const opacity = isDragging ? 0.4 : 1\r\n  return (\r\n    <div\r\n      ref={connectDragSource}\r\n      style={{ ...style, opacity }}\r\n    >\r\n      {name}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DragSource(\r\n  ItemTypes.BOX,\r\n  {\r\n    beginDrag: (props: BoxProps) => {\r\n      return { name: props.name }\r\n    },\r\n    endDrag(props: BoxProps, monitor: DragSourceMonitor) {\r\n      const item = monitor.getItem()\r\n      const dropResult = monitor.getDropResult()\r\n\r\n      if (dropResult) {\r\n        alert(`You dropped ${item.name} into ${dropResult.name}!`)\r\n      }\r\n    },\r\n  },\r\n  (connect: DragSourceConnector, monitor: DragSourceMonitor) => {\r\n    return {\r\n      connectDragSource: connect.dragSource(),\r\n      isDragging: monitor.isDragging(),\r\n    }\r\n  },\r\n)(Box)\r\n"]},"metadata":{},"sourceType":"module"}