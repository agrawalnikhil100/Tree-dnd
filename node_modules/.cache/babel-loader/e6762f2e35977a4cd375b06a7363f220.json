{"ast":null,"code":"/*!\n * Copyright (C) Microsoft Corporation. All rights reserved.\n */\nimport { __assign } from \"tslib\";\nimport { getFocusStyle } from '@fluentui/react/lib/Styling';\nimport { TreeAutomationSelectors } from './Tree.selectors';\nvar buttonHighContrastFocus = {\n  left: -2,\n  top: -2,\n  bottom: -2,\n  right: -2,\n  border: 'none',\n  outlineColor: 'ButtonText'\n};\nexport var getStyles = function (props) {\n  var _a, _b, _c;\n\n  var className = props.className,\n      theme = props.theme,\n      nodeHeight = props.nodeHeight,\n      iconWidth = props.iconWidth;\n  var palette = theme.palette;\n  var sharedIconContainerStyle = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100%',\n    width: iconWidth,\n    flex: '0 0 auto'\n  };\n  var sharedIconStyle = {\n    flex: '0 0 auto',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '1em',\n    height: '1em',\n    padding: 0,\n    margin: 0\n  };\n  var blankIconBlockStyle = {\n    width: iconWidth,\n    flex: '0 0 auto'\n  }; // Menu button should be a little smaller than the node to account for borders.\n\n  var menuButtonSize = nodeHeight - 2;\n  var backgroundColor = palette.neutralLighter;\n  var hoveredRowColor = palette.neutralQuaternaryAlt;\n  var selectedRowColor = palette.neutralQuaternary;\n  return {\n    root: [className, TreeAutomationSelectors.treeRootClassName, {\n      display: 'flex',\n      boxSizing: 'border-box',\n      height: '100%',\n      width: '100%',\n      backgroundColor: backgroundColor\n    }],\n    innerRoot: {\n      display: 'block',\n      position: 'relative',\n      flex: '1 1 auto',\n      boxSizing: 'border-box'\n    },\n    focusZone: {},\n    scrollView: {\n      display: 'flex',\n      overflow: 'auto',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    },\n    list: {\n      display: 'flex',\n      flex: '0 0 auto',\n      minWidth: '100%',\n      minHeight: '100%',\n      selectors: (_a = {}, _a['& .ms-List-surface'] = {\n        width: '100%',\n        height: '100%'\n      }, _a)\n    },\n    item: [getFocusStyle(theme, -1, 'relative', buttonHighContrastFocus), TreeAutomationSelectors.treeNodeClassName, {\n      display: 'flex',\n      flex: '1 1 auto',\n      flexDirection: 'row',\n      alignItems: 'center',\n      whiteSpace: 'nowrap',\n      height: nodeHeight,\n      position: 'relative',\n      outline: 'none',\n      border: '1px solid transparent',\n      boxSizing: 'border-box'\n    }],\n    itemIsSelectable: {\n      cursor: 'pointer'\n    },\n    itemIsNotSelectable: {\n      selectors: {\n        ':hover': {\n          backgroundColor: 'initial'\n        }\n      }\n    },\n    itemIsSelected: {\n      backgroundColor: selectedRowColor,\n      selectors: (_b = {}, _b[\"& .\" + TreeAutomationSelectors.menuButtonClassName] = {\n        visibility: 'visible'\n      }, _b)\n    },\n    itemIsNotSelected: {\n      selectors: (_c = {\n        ':hover': {\n          backgroundColor: hoveredRowColor\n        }\n      }, _c[\":hover& .\" + TreeAutomationSelectors.menuButtonClassName] = {\n        visibility: 'visible'\n      }, _c[\"& .\" + TreeAutomationSelectors.openMenuClassName] = {\n        visibility: 'visible'\n      }, _c)\n    },\n    itemLabel: {\n      flex: '1 1 auto',\n      whiteSpace: 'nowrap',\n      maxWidth: '100%',\n      marginLeft: '5px',\n      outline: 'none',\n      marginRight: 12\n    },\n    expandIconButton: [TreeAutomationSelectors.collapseExpandClassName, __assign(__assign({}, sharedIconContainerStyle), {\n      color: palette.black\n    })],\n    expandIconButtonEnabled: {\n      cursor: 'pointer'\n    },\n    expandIconButtonDisabled: {\n      opacity: 0.4\n    },\n    expandIcon: __assign(__assign({}, sharedIconStyle), {\n      fontSize: 12,\n      transition: '0.2s transform',\n      transformOrigin: 'center'\n    }),\n    expandIconExpanded: {\n      transform: 'rotate(90deg)'\n    },\n    noExpandIcon: __assign({}, blankIconBlockStyle),\n    levelIndentSpacer: __assign({}, blankIconBlockStyle),\n    menuButton: [TreeAutomationSelectors.menuButtonClassName, {\n      flex: '0 0 auto',\n      // Menu button should be hidden by default.\n      // We will show it in the following cases, though: a row is hovered, a row is selected, or the menu is open.\n      visibility: 'hidden',\n      position: 'sticky',\n      right: 0,\n      width: menuButtonSize,\n      height: menuButtonSize,\n      fontSize: 16,\n      border: 'none',\n      cursor: 'pointer',\n      selectors: {\n        ':hover': {\n          color: palette.themePrimary\n        }\n      }\n    }],\n    menuButtonSelectedRowClosedMenu: {\n      backgroundColor: selectedRowColor,\n      selectors: {\n        ':hover': {\n          backgroundColor: hoveredRowColor\n        }\n      }\n    },\n    menuButtonSelectedRowOpenMenu: [TreeAutomationSelectors.openMenuClassName, {\n      color: palette.themePrimary,\n      backgroundColor: hoveredRowColor\n    }],\n    menuButtonUnselectedRowClosedMenu: {\n      backgroundColor: hoveredRowColor,\n      selectors: {\n        ':hover': {\n          backgroundColor: selectedRowColor\n        }\n      }\n    },\n    menuButtonUnselectedRowOpenMenu: [TreeAutomationSelectors.openMenuClassName, {\n      color: palette.themePrimary,\n      backgroundColor: selectedRowColor\n    }],\n    menuButtonDisabled: {\n      color: palette.neutralSecondaryAlt,\n      backgroundColor: 'transparent',\n      selectors: {\n        ':hover': {\n          color: palette.neutralSecondaryAlt,\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n    itemIconContainer: __assign({}, sharedIconContainerStyle),\n    itemIcon: __assign(__assign({}, sharedIconStyle), {\n      fontSize: 16\n    }),\n    noItemIcon: {\n      flex: '0 0 auto',\n      // By default, don't take up any space with the no icon element (some trees may not even have icons).\n      width: 0\n    }\n  };\n};","map":{"version":3,"sources":["../../../src/components/Tree/Tree.styles.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*!\n * Copyright (C) Microsoft Corporation. All rights reserved.\n */\nimport { __assign } from \"tslib\";\nimport { getFocusStyle } from '@fluentui/react/lib/Styling';\nimport { TreeAutomationSelectors } from './Tree.selectors';\nvar buttonHighContrastFocus = {\n    left: -2,\n    top: -2,\n    bottom: -2,\n    right: -2,\n    border: 'none',\n    outlineColor: 'ButtonText'\n};\nexport var getStyles = function (props) {\n    var _a, _b, _c;\n    var className = props.className, theme = props.theme, nodeHeight = props.nodeHeight, iconWidth = props.iconWidth;\n    var palette = theme.palette;\n    var sharedIconContainerStyle = {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n        width: iconWidth,\n        flex: '0 0 auto'\n    };\n    var sharedIconStyle = {\n        flex: '0 0 auto',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '1em',\n        height: '1em',\n        padding: 0,\n        margin: 0\n    };\n    var blankIconBlockStyle = {\n        width: iconWidth,\n        flex: '0 0 auto'\n    };\n    // Menu button should be a little smaller than the node to account for borders.\n    var menuButtonSize = nodeHeight - 2;\n    var backgroundColor = palette.neutralLighter;\n    var hoveredRowColor = palette.neutralQuaternaryAlt;\n    var selectedRowColor = palette.neutralQuaternary;\n    return {\n        root: [\n            className,\n            TreeAutomationSelectors.treeRootClassName,\n            {\n                display: 'flex',\n                boxSizing: 'border-box',\n                height: '100%',\n                width: '100%',\n                backgroundColor: backgroundColor\n            }\n        ],\n        innerRoot: {\n            display: 'block',\n            position: 'relative',\n            flex: '1 1 auto',\n            boxSizing: 'border-box'\n        },\n        focusZone: {},\n        scrollView: {\n            display: 'flex',\n            overflow: 'auto',\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0\n        },\n        list: {\n            display: 'flex',\n            flex: '0 0 auto',\n            minWidth: '100%',\n            minHeight: '100%',\n            selectors: (_a = {},\n                _a['& .ms-List-surface'] = {\n                    width: '100%',\n                    height: '100%'\n                },\n                _a)\n        },\n        item: [\n            getFocusStyle(theme, -1, 'relative', buttonHighContrastFocus),\n            TreeAutomationSelectors.treeNodeClassName,\n            {\n                display: 'flex',\n                flex: '1 1 auto',\n                flexDirection: 'row',\n                alignItems: 'center',\n                whiteSpace: 'nowrap',\n                height: nodeHeight,\n                position: 'relative',\n                outline: 'none',\n                border: '1px solid transparent',\n                boxSizing: 'border-box'\n            }\n        ],\n        itemIsSelectable: {\n            cursor: 'pointer'\n        },\n        itemIsNotSelectable: {\n            selectors: {\n                ':hover': {\n                    backgroundColor: 'initial'\n                }\n            }\n        },\n        itemIsSelected: {\n            backgroundColor: selectedRowColor,\n            selectors: (_b = {},\n                _b[\"& .\" + TreeAutomationSelectors.menuButtonClassName] = {\n                    visibility: 'visible'\n                },\n                _b)\n        },\n        itemIsNotSelected: {\n            selectors: (_c = {\n                    ':hover': {\n                        backgroundColor: hoveredRowColor\n                    }\n                },\n                _c[\":hover& .\" + TreeAutomationSelectors.menuButtonClassName] = {\n                    visibility: 'visible'\n                },\n                _c[\"& .\" + TreeAutomationSelectors.openMenuClassName] = {\n                    visibility: 'visible'\n                },\n                _c)\n        },\n        itemLabel: {\n            flex: '1 1 auto',\n            whiteSpace: 'nowrap',\n            maxWidth: '100%',\n            marginLeft: '5px',\n            outline: 'none',\n            marginRight: 12\n        },\n        expandIconButton: [\n            TreeAutomationSelectors.collapseExpandClassName,\n            __assign(__assign({}, sharedIconContainerStyle), { color: palette.black })\n        ],\n        expandIconButtonEnabled: {\n            cursor: 'pointer'\n        },\n        expandIconButtonDisabled: {\n            opacity: 0.4\n        },\n        expandIcon: __assign(__assign({}, sharedIconStyle), { fontSize: 12, transition: '0.2s transform', transformOrigin: 'center' }),\n        expandIconExpanded: {\n            transform: 'rotate(90deg)'\n        },\n        noExpandIcon: __assign({}, blankIconBlockStyle),\n        levelIndentSpacer: __assign({}, blankIconBlockStyle),\n        menuButton: [\n            TreeAutomationSelectors.menuButtonClassName,\n            {\n                flex: '0 0 auto',\n                // Menu button should be hidden by default.\n                // We will show it in the following cases, though: a row is hovered, a row is selected, or the menu is open.\n                visibility: 'hidden',\n                position: 'sticky',\n                right: 0,\n                width: menuButtonSize,\n                height: menuButtonSize,\n                fontSize: 16,\n                border: 'none',\n                cursor: 'pointer',\n                selectors: {\n                    ':hover': {\n                        color: palette.themePrimary\n                    }\n                }\n            }\n        ],\n        menuButtonSelectedRowClosedMenu: {\n            backgroundColor: selectedRowColor,\n            selectors: {\n                ':hover': {\n                    backgroundColor: hoveredRowColor\n                }\n            }\n        },\n        menuButtonSelectedRowOpenMenu: [\n            TreeAutomationSelectors.openMenuClassName,\n            {\n                color: palette.themePrimary,\n                backgroundColor: hoveredRowColor\n            }\n        ],\n        menuButtonUnselectedRowClosedMenu: {\n            backgroundColor: hoveredRowColor,\n            selectors: {\n                ':hover': {\n                    backgroundColor: selectedRowColor\n                }\n            }\n        },\n        menuButtonUnselectedRowOpenMenu: [\n            TreeAutomationSelectors.openMenuClassName,\n            {\n                color: palette.themePrimary,\n                backgroundColor: selectedRowColor\n            }\n        ],\n        menuButtonDisabled: {\n            color: palette.neutralSecondaryAlt,\n            backgroundColor: 'transparent',\n            selectors: {\n                ':hover': {\n                    color: palette.neutralSecondaryAlt,\n                    backgroundColor: 'transparent'\n                }\n            }\n        },\n        itemIconContainer: __assign({}, sharedIconContainerStyle),\n        itemIcon: __assign(__assign({}, sharedIconStyle), { fontSize: 16 }),\n        noItemIcon: {\n            flex: '0 0 auto',\n            // By default, don't take up any space with the no icon element (some trees may not even have icons).\n            width: 0\n        }\n    };\n};\n//# sourceMappingURL=Tree.styles.js.map"]},"metadata":{},"sourceType":"module"}