{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\niagrawal\\\\Desktop\\\\microsoft work\\\\tree_dnd\\\\src\\\\RenderTreeNode.tsx\";\nimport * as React from 'react';\nimport { ItemTypes } from './ItemTypes';\nimport { DragSource } from 'react-dnd'; //drop imports\n\nconst style = {\n  border: '1px dashed black',\n  backgroundColor: 'white',\n  cursor: 'move',\n  display: 'flex',\n  alignItems: 'center',\n  marginLeft: 8,\n  marginRight: 8\n};\n\nconst RenderTreeNode = props => {\n  const opacity = props.isDragging ? 0.4 : 1;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: props.connectDropTarget,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: props.connectDragSource,\n    style: { ...style,\n      opacity\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, React.Children.only(props.children)));\n};\n\n_c = RenderTreeNode;\nexport default DragSource(ItemTypes.BOX, {\n  beginDrag: props => {\n    return {\n      name: props.item.label\n    };\n  },\n\n  endDrag(props, monitor) {\n    const item = monitor.getItem();\n    const dropResult = monitor.getDropResult();\n\n    if (dropResult) {\n      alert(`You dropped ${item.name} into ${dropResult.name}!`);\n    }\n  }\n\n}, (connect, monitor) => {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n})(RenderTreeNode);\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderTreeNode\");","map":{"version":3,"sources":["C:/Users/niagrawal/Desktop/microsoft work/tree_dnd/src/RenderTreeNode.tsx"],"names":["React","ItemTypes","DragSource","style","border","backgroundColor","cursor","display","alignItems","marginLeft","marginRight","RenderTreeNode","props","opacity","isDragging","connectDropTarget","connectDragSource","Children","only","children","BOX","beginDrag","name","item","label","endDrag","monitor","getItem","dropResult","getDropResult","alert","connect","dragSource"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,QAAgD,WAAhD,C,CAEA;;AAIA,MAAMC,KAA0B,GAAG;AAC/BC,EAAAA,MAAM,EAAE,kBADuB;AAE/BC,EAAAA,eAAe,EAAE,OAFc;AAG/BC,EAAAA,MAAM,EAAE,MAHuB;AAI/BC,EAAAA,OAAO,EAAE,MAJsB;AAK/BC,EAAAA,UAAU,EAAE,QALmB;AAM/BC,EAAAA,UAAU,EAAE,CANmB;AAO/BC,EAAAA,WAAW,EAAE;AAPkB,CAAnC;;AAsBA,MAAMC,cAA6C,GAAIC,KAAD,IAAU;AAC5D,QAAMC,OAAO,GAAGD,KAAK,CAACE,UAAN,GAAmB,GAAnB,GAAyB,CAAzC;AACA,sBACA;AAAK,IAAA,GAAG,EAAEF,KAAK,CAACG,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,GAAG,EAAEH,KAAK,CAACI,iBAAhB;AAAmC,IAAA,KAAK,EAAE,EAAE,GAAGb,KAAL;AAAYU,MAAAA;AAAZ,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKb,KAAK,CAACiB,QAAN,CAAeC,IAAf,CAAoBN,KAAK,CAACO,QAA1B,CADL,CADJ,CADA;AAOH,CATD;;KAAMR,c;AAYN,eAAeT,UAAU,CACrBD,SAAS,CAACmB,GADW,EAErB;AACEC,EAAAA,SAAS,EAAGT,KAAD,IAAgC;AACzC,WAAO;AAAEU,MAAAA,IAAI,EAAEV,KAAK,CAACW,IAAN,CAAWC;AAAnB,KAAP;AACD,GAHH;;AAIEC,EAAAA,OAAO,CAACb,KAAD,EAA6Bc,OAA7B,EAAyD;AAC9D,UAAMH,IAAI,GAAGG,OAAO,CAACC,OAAR,EAAb;AACA,UAAMC,UAAU,GAAGF,OAAO,CAACG,aAAR,EAAnB;;AAEA,QAAID,UAAJ,EAAgB;AACdE,MAAAA,KAAK,CAAE,eAAcP,IAAI,CAACD,IAAK,SAAQM,UAAU,CAACN,IAAK,GAAlD,CAAL;AACD;AACF;;AAXH,CAFqB,EAerB,CAACS,OAAD,EAA+BL,OAA/B,KAA8D;AAC5D,SAAO;AACLV,IAAAA,iBAAiB,EAAEe,OAAO,CAACC,UAAR,EADd;AAELlB,IAAAA,UAAU,EAAEY,OAAO,CAACZ,UAAR;AAFP,GAAP;AAID,CApBoB,CAAV,CAqBbH,cArBa,CAAf","sourcesContent":["import * as React from 'react';\r\nimport { ITreeProps, ITreeItem } from '@business-app/fabric/lib/components/Tree/Tree.types';\r\nimport { DragSourceMonitor, ConnectDragSource } from 'react-dnd'\r\nimport { ItemTypes } from './ItemTypes'\r\nimport { DragSource, DragSourceConnector } from 'react-dnd';\r\n\r\n//drop imports\r\nimport { ConnectDropTarget, DropTargetMonitor } from 'react-dnd'\r\nimport { DropTarget, DropTargetConnector } from 'react-dnd'\r\n\r\nconst style: React.CSSProperties = {\r\n    border: '1px dashed black',\r\n    backgroundColor: 'white',\r\n    cursor: 'move',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    marginLeft: 8,\r\n    marginRight: 8\r\n}\r\nexport interface RenderTreeNodeProps{\r\n    item: ITreeItem;\r\n\r\n    // Collected drag Props\r\n    isDragging: boolean\r\n    connectDragSource: ConnectDragSource\r\n\r\n    //collected drop props\r\n    canDrop: boolean\r\n    isOver: boolean\r\n    connectDropTarget: ConnectDropTarget\r\n}\r\n\r\nconst RenderTreeNode: React.FC<RenderTreeNodeProps> = (props) =>{\r\n    const opacity = props.isDragging ? 0.4 : 1\r\n    return( \r\n    <div ref={props.connectDropTarget}>\r\n        <div ref={props.connectDragSource} style={{ ...style, opacity }}>\r\n            {React.Children.only(props.children)}\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DragSource(\r\n    ItemTypes.BOX,\r\n    {\r\n      beginDrag: (props: RenderTreeNodeProps) => {\r\n        return { name: props.item.label }\r\n      },\r\n      endDrag(props: RenderTreeNodeProps, monitor: DragSourceMonitor) {\r\n        const item = monitor.getItem()\r\n        const dropResult = monitor.getDropResult()\r\n  \r\n        if (dropResult) {\r\n          alert(`You dropped ${item.name} into ${dropResult.name}!`)\r\n        }\r\n      },\r\n    },\r\n    (connect: DragSourceConnector, monitor: DragSourceMonitor) => {\r\n      return {\r\n        connectDragSource: connect.dragSource(),\r\n        isDragging: monitor.isDragging(),\r\n      }\r\n    },\r\n)(RenderTreeNode);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}