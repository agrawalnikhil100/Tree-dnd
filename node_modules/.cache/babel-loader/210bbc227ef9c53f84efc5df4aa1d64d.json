{"ast":null,"code":"/*!\n * Copyright (C) Microsoft Corporation. All rights reserved.\n */\nimport { __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nexport function useArrayTree(topLevelItems) {\n  if (topLevelItems === void 0) {\n    topLevelItems = [];\n  }\n\n  if (topLevelItems.some(function (x) {\n    return x.level !== 0;\n  })) {\n    throw new Error('topLevelItems');\n  }\n\n  var _a = React.useState(__spreadArrays(topLevelItems)),\n      treeItems = _a[0],\n      setTreeItems = _a[1];\n\n  var getChildrenOf = React.useCallback(function (item) {\n    var startIndex;\n    var itemLevel;\n\n    if (item !== null) {\n      var itemIndex = treeItems.indexOf(item);\n\n      if (itemIndex < 0) {\n        throw new Error('item');\n      }\n\n      startIndex = itemIndex;\n      itemLevel = item.level;\n    } else {\n      startIndex = -1;\n      itemLevel = -1;\n    }\n\n    var children = [];\n    var index = startIndex;\n\n    while (index + 1 < treeItems.length && treeItems[index + 1].level > itemLevel) {\n      if (treeItems[index + 1].level === itemLevel + 1) {\n        children.push(treeItems[index + 1]);\n      }\n\n      index++;\n    }\n\n    return children;\n  }, [treeItems]);\n  var appendChildrenTo = React.useCallback(function (item, children) {\n    var itemLevel;\n\n    if (item !== null) {\n      itemLevel = item.level;\n    } else {\n      itemLevel = -1;\n    }\n\n    if (children.some(function (x) {\n      return x.level !== itemLevel + 1;\n    })) {\n      throw new Error('children');\n    }\n\n    setTreeItems(function (items) {\n      var startIndex;\n\n      if (item !== null) {\n        var itemIndex = items.indexOf(item);\n\n        if (itemIndex < 0) {\n          throw new Error('item');\n        }\n\n        startIndex = itemIndex;\n      } else {\n        startIndex = -1;\n      }\n\n      var index = startIndex;\n\n      while (index + 1 < items.length && items[index + 1].level > itemLevel) {\n        index++;\n      }\n\n      var indexOfLastDescendantOrSelf = index;\n      items = items.slice();\n      items.splice.apply(items, __spreadArrays([indexOfLastDescendantOrSelf + 1, 0], children));\n      return items;\n    });\n  }, [setTreeItems]);\n  var replace = React.useCallback(function (item, replacementItem) {\n    if (item.level !== replacementItem.level) {\n      throw new Error('replacementItem');\n    }\n\n    if (item.setSize !== replacementItem.setSize) {\n      throw new Error('replacementItem');\n    }\n\n    setTreeItems(function (items) {\n      var itemIndex = items.indexOf(item);\n\n      if (itemIndex < 0) {\n        return items;\n      }\n\n      items = items.slice();\n      items.splice(itemIndex, 1, replacementItem);\n      return items;\n    });\n  }, [setTreeItems]);\n  var remove = React.useCallback(function (item) {\n    setTreeItems(function (items) {\n      var itemIndex = items.indexOf(item);\n\n      if (itemIndex < 0) {\n        throw new Error('item');\n      }\n\n      var startIndex = itemIndex;\n      var endIndex = itemIndex;\n      var itemLevel = item.level;\n\n      while (endIndex + 1 < items.length && items[endIndex + 1].level > itemLevel) {\n        endIndex++;\n      }\n\n      items = items.slice();\n      items.splice(startIndex, endIndex - startIndex + 1);\n      return items;\n    });\n  }, [setTreeItems]);\n  var clear = React.useCallback(function () {\n    setTreeItems([]);\n  }, [setTreeItems]);\n  var refresh = React.useCallback(function () {\n    setTreeItems(function (items) {\n      return items.slice();\n    });\n  }, [setTreeItems]);\n  return {\n    items: treeItems,\n    getChildrenOf: getChildrenOf,\n    appendChildrenTo: appendChildrenTo,\n    replace: replace,\n    remove: remove,\n    clear: clear,\n    refresh: refresh\n  };\n}","map":{"version":3,"sources":["../../../src/components/Tree/useArrayTree.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*!\n * Copyright (C) Microsoft Corporation. All rights reserved.\n */\nimport { __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nexport function useArrayTree(topLevelItems) {\n    if (topLevelItems === void 0) { topLevelItems = []; }\n    if (topLevelItems.some(function (x) { return x.level !== 0; })) {\n        throw new Error('topLevelItems');\n    }\n    var _a = React.useState(__spreadArrays(topLevelItems)), treeItems = _a[0], setTreeItems = _a[1];\n    var getChildrenOf = React.useCallback(function (item) {\n        var startIndex;\n        var itemLevel;\n        if (item !== null) {\n            var itemIndex = treeItems.indexOf(item);\n            if (itemIndex < 0) {\n                throw new Error('item');\n            }\n            startIndex = itemIndex;\n            itemLevel = item.level;\n        }\n        else {\n            startIndex = -1;\n            itemLevel = -1;\n        }\n        var children = [];\n        var index = startIndex;\n        while (index + 1 < treeItems.length && treeItems[index + 1].level > itemLevel) {\n            if (treeItems[index + 1].level === itemLevel + 1) {\n                children.push(treeItems[index + 1]);\n            }\n            index++;\n        }\n        return children;\n    }, [treeItems]);\n    var appendChildrenTo = React.useCallback(function (item, children) {\n        var itemLevel;\n        if (item !== null) {\n            itemLevel = item.level;\n        }\n        else {\n            itemLevel = -1;\n        }\n        if (children.some(function (x) { return x.level !== itemLevel + 1; })) {\n            throw new Error('children');\n        }\n        setTreeItems(function (items) {\n            var startIndex;\n            if (item !== null) {\n                var itemIndex = items.indexOf(item);\n                if (itemIndex < 0) {\n                    throw new Error('item');\n                }\n                startIndex = itemIndex;\n            }\n            else {\n                startIndex = -1;\n            }\n            var index = startIndex;\n            while (index + 1 < items.length && items[index + 1].level > itemLevel) {\n                index++;\n            }\n            var indexOfLastDescendantOrSelf = index;\n            items = items.slice();\n            items.splice.apply(items, __spreadArrays([indexOfLastDescendantOrSelf + 1, 0], children));\n            return items;\n        });\n    }, [setTreeItems]);\n    var replace = React.useCallback(function (item, replacementItem) {\n        if (item.level !== replacementItem.level) {\n            throw new Error('replacementItem');\n        }\n        if (item.setSize !== replacementItem.setSize) {\n            throw new Error('replacementItem');\n        }\n        setTreeItems(function (items) {\n            var itemIndex = items.indexOf(item);\n            if (itemIndex < 0) {\n                return items;\n            }\n            items = items.slice();\n            items.splice(itemIndex, 1, replacementItem);\n            return items;\n        });\n    }, [setTreeItems]);\n    var remove = React.useCallback(function (item) {\n        setTreeItems(function (items) {\n            var itemIndex = items.indexOf(item);\n            if (itemIndex < 0) {\n                throw new Error('item');\n            }\n            var startIndex = itemIndex;\n            var endIndex = itemIndex;\n            var itemLevel = item.level;\n            while (endIndex + 1 < items.length && items[endIndex + 1].level > itemLevel) {\n                endIndex++;\n            }\n            items = items.slice();\n            items.splice(startIndex, endIndex - startIndex + 1);\n            return items;\n        });\n    }, [setTreeItems]);\n    var clear = React.useCallback(function () {\n        setTreeItems([]);\n    }, [setTreeItems]);\n    var refresh = React.useCallback(function () {\n        setTreeItems(function (items) { return items.slice(); });\n    }, [setTreeItems]);\n    return {\n        items: treeItems,\n        getChildrenOf: getChildrenOf,\n        appendChildrenTo: appendChildrenTo,\n        replace: replace,\n        remove: remove,\n        clear: clear,\n        refresh: refresh\n    };\n}\n//# sourceMappingURL=useArrayTree.js.map"]},"metadata":{},"sourceType":"module"}